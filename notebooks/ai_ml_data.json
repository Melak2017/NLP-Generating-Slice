{
    "Artificial Intelligence": "Artificial intelligence (AI) is the intelligence of machines or software, as opposed to the intelligence of humans or other animals. It is a field of study in computer science that develops and studies intelligent machines. Such machines may be called AIs.\nAI technology is widely used throughout industry, government, and science. Some high-profile applications are: advanced web search engines (e.g., Google Search), recommendation systems (used by YouTube, Amazon, and Netflix), understanding human speech (such as Google Assistant, Siri, and Alexa), self-driving cars (e.g., Waymo), generative and creative tools (ChatGPT and AI art), and superhuman play and analysis in strategy games (such as chess and Go).Alan Turing was the first person to conduct substantial research in the field that he called Machine Intelligence. Artificial intelligence was founded as an academic discipline in 1956. The field went through multiple cycles of optimism followed by disappointment and loss of funding. Funding and interest vastly increased after 2012 when deep learning surpassed all previous AI techniques, and after 2017 with the transformer architecture. This led to the AI spring of the early 2020s, with companies, universities, and laboratories overwhelmingly based in the United States pioneering significant advances in artificial intelligence.The various sub-fields of AI research are centered around particular goals and the use of particular tools. The traditional goals of AI research include reasoning, knowledge representation, planning, learning, natural language processing, perception, and support for robotics. General intelligence (the ability to complete any task performable by a human) is among the field's long-term goals.To solve these problems, AI researchers have adapted and integrated a wide range of problem-solving techniques, including search and mathematical optimization, formal logic, artificial neural networks, and methods based on statistics, operations research, and economics. AI also draws upon psychology, linguistics, philosophy, neuroscience and other fields.\n\nGoals\nThe general problem of simulating (or creating) intelligence has been broken into sub-problems. These consist of particular traits or capabilities that researchers expect an intelligent system to display. The traits described below have received the most attention and cover the scope of AI research.\n\nReasoning, problem-solving\nEarly researchers developed algorithms that imitated step-by-step reasoning that humans use when they solve puzzles or make logical deductions. By the late 1980s and 1990s, methods were developed for dealing with uncertain or incomplete information, employing concepts from probability and economics.Many of these algorithms are insufficient for solving large reasoning problems because they experience a \"combinatorial explosion\": they became exponentially slower as the problems grew larger. Even humans rarely use the step-by-step deduction that early AI research could model. They solve most of their problems using fast, intuitive judgments. Accurate and efficient reasoning is an unsolved problem.\n\nKnowledge representation\nKnowledge representation and knowledge engineering allow AI programs to answer questions intelligently and make deductions about real-world facts. Formal knowledge representations are used in content-based indexing and retrieval, scene interpretation, clinical decision support, knowledge discovery (mining \"interesting\" and actionable inferences from large databases), and other areas.A knowledge base is a body of knowledge represented in a form that can be used by a program. An ontology is the set of objects, relations, concepts, and properties used by a particular domain of knowledge. Knowledge bases need to represent things such as: objects, properties, categories and relations between objects; situations, events, states and time; causes and effects; knowledge about knowledge (what we know about what other people know); default reasoning (things that humans assume are true until they are told differently and will remain true even when other facts are changing); and many other aspects and domains of knowledge.\nAmong the most difficult problems in knowledge representation are: the breadth of commonsense knowledge (the set of atomic facts that the average person knows is enormous); and the sub-symbolic form of most commonsense knowledge (much of what people know is not represented as \"facts\" or \"statements\" that they could express verbally). There is also the difficulty of knowledge acquisition, the problem of obtaining knowledge for AI applications.\n\nPlanning and decision making\nAn \"agent\" is anything that perceives and takes actions in the world. A rational agent has goals or preferences and takes actions to make them happen. In automated planning, the agent has a specific goal. In automated decision making, the agent has preferences – there are some situations it would prefer to be in, and some situations it is trying to avoid. The decision making agent assigns a number to each situation (called the \"utility\") that measures how much the agent prefers it. For each possible action, it can calculate the \"expected utility\": the utility of all possible outcomes of the action, weighted by the probability that the outcome will occur. It can then choose the action with the maximum expected utility.In classical planning, the agent knows exactly what the effect of any action will be. In most real-world problems, however, the agent may not be certain about the situation they are in (it is \"unknown\" or \"unobservable\") and it may not know for certain what will happen after each possible action (it is not \"deterministic\"). It must choose an action by making a probabilistic guess and then reassess the situation to see if the action worked.In some problems, the agent's preferences may be uncertain, especially if there are other agents or humans involved. These can be learned (e.g., with inverse reinforcement learning) or the agent can seek information to improve its preferences. Information value theory can be used to weigh the value of exploratory or experimental actions. The space of possible future actions and situations is typically intractably large, so the agents must take actions and evaluate situations while being uncertain what the outcome will be.\nA Markov decision process has a transition model that describes the probability that a particular action will change the state in a particular way, and a reward function that supplies the utility of each state and the cost of each action. A policy associates a decision with each possible state. The policy could be calculated (e.g. by iteration), be heuristic, or it can be learned.Game theory describes rational behavior of multiple interacting agents, and is used in AI programs that make decisions that involve other agents.\n\nLearning\nMachine learning is the study of programs that can improve their performance on a given task automatically. It has been a part of AI from the beginning.There are several kinds of machine learning. Unsupervised learning analyzes a stream of data and finds patterns and makes predictions without any other guidance. Supervised learning requires a human to label the input data first, and comes in two main varieties: classification (where the program must learn to predict what category the input belongs in) and regression (where the program must deduce a numeric function based on numeric input).In reinforcement learning the agent is rewarded for good responses and punished for bad ones. The agent learns to choose responses that are classified as \"good\". Transfer learning is when the knowledge gained from one problem is applied to a new problem. Deep learning is a type of machine learning that runs inputs through biologically inspired artificial neural networks for all of these types of learning.Computational learning theory can assess learners by computational complexity, by sample complexity (how much data is required), or by other notions of optimization.\n\nNatural language processing\nNatural language processing (NLP) allows programs to read, write and communicate in human languages such as English. Specific problems include speech recognition, speech synthesis, machine translation, information extraction, information retrieval and question answering.Early work, based on Noam Chomsky's generative grammar and semantic networks, had difficulty with word-sense disambiguation unless restricted to small domains called \"micro-worlds\" (due to the common sense knowledge problem). Margaret Masterman believed that it was meaning, and not grammar that was the key to understanding languages, and that thesauri and not dictionaries should be the basis of computational language structure.\nModern deep learning techniques for NLP include word embedding (representing words, typically as vectors encoding their meaning), transformers (a deep learning architecture using an attention mechanism), and others. In 2019, generative pre-trained transformer (or \"GPT\") language models began to generate coherent text, and by 2023 these models were able to get human-level scores on the bar exam, SAT test, GRE test, and many other real-world applications.\n\nPerception\nMachine perception is the ability to use input from sensors (such as cameras, microphones, wireless signals, active lidar, sonar, radar, and tactile sensors) to deduce aspects of the world. Computer vision is the ability to analyze visual input.The field includes speech recognition, image classification, facial recognition, object recognition, and robotic perception.\n\nSocial intelligence\nAffective computing is an interdisciplinary umbrella that comprises systems that recognize, interpret, process or simulate human feeling, emotion and mood. For example, some virtual assistants are programmed to speak conversationally or even to banter humorously; it makes them appear more sensitive to the emotional dynamics of human interaction, or to otherwise facilitate human–computer interaction.\nHowever, this tends to give naïve users an unrealistic conception of the intelligence of existing computer agents. Moderate successes related to affective computing include textual sentiment analysis and, more recently, multimodal sentiment analysis, wherein AI classifies the affects displayed by a videotaped subject.\n\nGeneral intelligence\nA machine with artificial general intelligence should be able to solve a wide variety of problems with breadth and versatility similar to human intelligence.\n\nTechniques\nAI research uses a wide variety of techniques to accomplish the goals above.\n\nSearch and optimization\nAI can solve many problems by intelligently searching through many possible solutions. There are two very different kinds of search used in AI: state space search and local search.\n\nState space search\nState space search searches through a tree of possible states to try to find a goal state. For example, planning algorithms search through trees of goals and subgoals, attempting to find a path to a target goal, a process called means-ends analysis.Simple exhaustive searches are rarely sufficient for most real-world problems: the search space (the number of places to search) quickly grows to astronomical numbers. The result is a search that is too slow or never completes. \"Heuristics\" or \"rules of thumb\" can help to prioritize choices that are more likely to reach a goal.Adversarial search is used for game-playing programs, such as chess or Go. It searches through a tree of possible moves and counter-moves, looking for a winning position.\n\nLocal search\nLocal search uses mathematical optimization to find a solution to a problem. It begins with some form of guess and refines it incrementally.Gradient descent is a type of local search that optimizes a set of numerical parameters by incrementally adjusting them to minimize a loss function. Variants of gradient descent are commonly used to train neural networks.Another type of local search is evolutionary computation, which aims to iteratively improve a set of candidate solutions by \"mutating\" and \"recombining\" them, selecting only the fittest to survive each generation.Distributed search processes can coordinate via swarm intelligence algorithms. Two popular swarm algorithms used in search are particle swarm optimization (inspired by bird flocking) and ant colony optimization (inspired by ant trails).\n\nLogic\nFormal Logic is used for reasoning and knowledge representation.\nFormal logic comes in two main forms: propositional logic (which operates on statements that are true or false and uses logical connectives such as \"and\", \"or\", \"not\" and \"implies\")\nand predicate logic (which also operates on objects, predicates and relations and uses quantifiers such as \"Every X is a Y\" and \"There are some Xs that are Ys\").Logical inference (or deduction) is the process of proving a new statement (conclusion) from other statements that are already known to be true (the premises).\nA logical knowledge base also handles queries and assertions as a special case of inference.\nAn inference rule describes what is a valid step in a proof. The most general inference rule is resolution.\nInference can be reduced to performing a search to find a path that leads from premises to conclusions, where each step is the application of an inference rule.\nInference performed this way is intractable except for short proofs in restricted domains. No efficient, powerful and general method has been discovered.\nFuzzy logic assigns a \"degree of truth\" between 0 and 1. It can therefore handle propositions that are vague and partially true.Non-monotonic logics are designed to handle default reasoning.\nOther specialized versions of logic have been developed to describe many complex domains (see knowledge representation above).\n\nProbabilistic methods for uncertain reasoning\nMany problems in AI (including in reasoning, planning, learning, perception, and robotics) require the agent to operate with incomplete or uncertain information. AI researchers have devised a number of tools to solve these problems using methods from probability theory and economics.Bayesian networks\nare a very general tool that can be used for many problems, including reasoning (using the Bayesian inference algorithm), learning (using the expectation-maximization algorithm), planning (using decision networks)\nand perception (using dynamic Bayesian networks).Probabilistic algorithms can also be used for filtering, prediction, smoothing and finding explanations for streams of data, helping perception systems to analyze processes that occur over time (e.g., hidden Markov models or Kalman filters).\nPrecise mathematical tools have been developed that analyze how an agent can make choices and plan, using decision theory, decision analysis, and information value theory. These tools include models such as Markov decision processes, dynamic decision networks, game theory and mechanism design.\n\nClassifiers and statistical learning methods\nThe simplest AI applications can be divided into two types: classifiers (e.g. \"if shiny then diamond\"), on one hand, and controllers (e.g. \"if diamond then pick up\"), on the other hand. Classifiers\nare functions that use pattern matching to determine the closest match. They can be fine-tuned based on chosen examples using supervised learning. Each pattern (also called an \"observation\") is labeled with a certain predefined class. All the observations combined with their class labels are known as a data set. When a new observation is received, that observation is classified based on previous experience.There are many kinds of classifiers in use. The decision tree is the simplest and most widely used symbolic machine learning algorithm. K-nearest neighbor algorithm was the most widely used analogical AI until the mid-1990s, and Kernel methods such as the support vector machine (SVM) displaced k-nearest neighbor in the 1990s.\nThe naive Bayes classifier is reportedly the \"most widely used learner\" at Google, due in part to its scalability.Neural networks are also used as classifiers.\n\nArtificial neural networks\nAn Artificial neural network is based on a collection of nodes also known as artificial neurons, which loosely model the neurons in a biological brain. It is trained to recognise patterns, once trained it can recognise those patterns in fresh data. There is an input, at least one hidden layer of nodes and an output. Each node applies a function and once the weight crosses its specified threshold, the data is transmitted to the next layer. A network is typically called a deep neural network if it has at least 2 hidden layers.Learning algorithms for neural networks use local search to choose the weights that will get the right output for each input during training. The most common training technique is the backpropagation algorithm.\nNeural networks learn to model complex relationships between inputs and outputs and find patterns in data. In theory, a neural network can learn any function.In feedforward neural networks the signal passes in only one direction.Recurrent neural networks feed the output signal back into the input, which allows short-term memories of previous input events. Long short term memory is the most successful network architecture for recurrent networks.Perceptrons\nuse only a single layer of neurons, deep learning uses multiple layers.\nConvolutional neural networks strengthen the connection between neurons that are \"close\" to each other – this is especially important in image processing, where a local set of neurons must identify an \"edge\" before the network can identify an object.\n\nDeep learning\nDeep learning\nuses several layers of neurons between the network's inputs and outputs. The multiple layers can progressively extract higher-level features from the raw input. For example, in image processing, lower layers may identify edges, while higher layers may identify the concepts relevant to a human such as digits or letters or faces.Deep learning has profoundly improved the performance of programs in many important subfields of artificial intelligence, including computer vision, speech recognition, natural language processing, image classification\nand others. The reason that deep learning performs so well in so many applications is not known as of 2023.\nThe sudden success of deep learning in 2012–2015 did not occur because of some new discovery or theoretical breakthrough (deep neural networks and backpropagation had been described by many people, as far back as the 1950s)\nbut because of two factors: the incredible increase in computer power (including the hundred-fold increase in speed by switching to GPUs) and the availability of vast amounts of training data, especially the giant curated datasets used for benchmark testing, such as ImageNet.\n\nGPT\nGenerative pre-trained transformers (GPT) are large language models that are based on the semantic relationships between words in sentences (natural language processing). Text-based GPT models are pre-trained on a large corpus of text which can be from the internet. The pre-training consists in predicting the next token (a token being usually a word, subword, or punctuation). Throughout this pre-training, GPT models accumulate knowledge about the world, and can then generate human-like text by repeatedly predicting the next token. Typically, a subsequent training phase makes the model more truthful, useful and harmless, usually with a technique called reinforcement learning from human feedback (RLHF). Current GPT models are still prone to generating falsehoods called \"hallucinations\", although this can be reduced with RLHF and quality data. They are used in chatbots which allow you to ask a question or request a task in simple text.Current models and services include: Bard, ChatGPT, Grok, Claude, Copilot and LLaMA. Multimodal GPT models can process different types of data (modalities) such as images, videos, sound and text.\n\nSpecialized hardware and software\nIn the late 2010s, graphics processing units (GPUs) that were increasingly designed with AI-specific enhancements and used with specialized TensorFlow software, had replaced previously used central processing unit (CPUs) as the dominant means for large-scale (commercial and academic) machine learning models' training.\nHistorically, specialized languages, such as Lisp, Prolog, Python and others, had been used.\n\nApplications\nAI and machine learning technology is used in most of the essential applications of the 2020s, including: search engines (such as Google Search), targeting online advertisements, recommendation systems (offered by Netflix, YouTube or Amazon), driving internet traffic, targeted advertising (AdSense, Facebook), virtual assistants (such as Siri or Alexa), autonomous vehicles (including drones, ADAS and self-driving cars), automatic language translation (Microsoft Translator, Google Translate), facial recognition (Apple's Face ID or Microsoft's DeepFace and Google's FaceNet) and image labeling (used by Facebook, Apple's iPhoto and TikTok).\n\nHealth and Medicine\nThe application of AI in medicine and medical research has the potential to increase patient care and quality of life. Through the lens of the Hippocratic Oath, medical professionals are ethically compelled to use AI, if applications can more accurately diagnose and treat patients.\nFor medical research, AI is an important tool for processing and integrating Big Data. This is particularly important for organoid and tissue engineering development which use microscopy imaging as a key technique in fabrication. \nIt has been suggested that AI can overcome discrepancies in funding allocated to different fields of research. New AI tools can deepen our understanding of biomedically relevant pathways. For example, AlphaFold 2 (2021) demonstrated the ability to approximate, in hours rather than months, the 3D structure of a protein. In 2023 it was reported that AI guided drug discovery helped find a class of antibiotics capable of killing two different types of drug-resistant bacteria.\n\nGames\nGame playing programs have been used since the 1950s to demonstrate and test AI's most advanced techniques. Deep Blue became the first computer chess-playing system to beat a reigning world chess champion, Garry Kasparov, on 11 May 1997. In 2011, in a Jeopardy! quiz show exhibition match, IBM's question answering system, Watson, defeated the two greatest Jeopardy! champions, Brad Rutter and Ken Jennings, by a significant margin. In March 2016, AlphaGo won 4 out of 5 games of Go in a match with Go champion Lee Sedol, becoming the first computer Go-playing system to beat a professional Go player without handicaps. Then in 2017 it defeated Ke Jie, who was the best Go player in the world. Other programs handle imperfect-information games, such as the poker-playing program Pluribus. DeepMind developed increasingly generalistic reinfrocement learning models, such as with MuZero, which could be trained to play chess, Go, or Atari games. In 2019, DeepMind's AlphaStar achieved grandmaster level in StarCraft II, a particularly challenging real-time strategy game that involves incomplete knowledge of what happens on the map. In 2021 an AI agent competed in a Playstation Gran Turismo competition, winning against four of the world’s best Gran Turismo drivers using deep reinforcement learning.\n\nMilitary\nVarious countries are deploying AI military applications. The main applications enhance command and control, communications, sensors, integration and interoperability. Research is targeting intelligence collection and analysis, logistics, cyber operations, information operations, and semiautonomous and autonomous vehicles. AI technologies enable coordination of sensors and effectors, threat detection and identification, marking of enemy positions, target acquisition, coordination and deconfliction of distributed Joint Fires between networked combat vehicles involving manned and unmanned teams. AI was incorporated into military operations in Iraq and Syria.\nIn November 2023, US Vice President Kamala Harris disclosed a declaration signed by 31 nations to set guardrails for the military use of IA. The commitments include using legal reviews to ensure the compliance of military AI with international laws, and being cautious and transparent in the development of this technology.\n\nGenerative AI\nIn the early 2020s, generative AI gained widespread prominence. In March 2023, 58% of US adults had heard about ChatGPT and 14% had tried it. The increasing realism and ease-of-use of AI-based text-to-image generators such as Midjourney, DALL-E, and Stable Diffusion sparked a trend of viral AI-generated photos. Widespread attention was gained by a fake photo of Pope Francis wearing a white puffer coat, the fictional arrest of Donald Trump, and a hoax of an attack on the Pentagon, as well as the usage in professional creative arts.\n\nIndustry Specific Tasks\nThere are also thousands of successful AI applications used to solve specific problems for specific industries or institutions. In a 2017 survey, one in five companies reported they had incorporated \"AI\" in some offerings or processes. A few examples are energy storage, medical diagnosis, military logistics, applications that predict the result of judicial decisions, foreign policy, or supply chain management.\nIn agriculture, AI has helped farmers identify areas that need irrigation, fertilization, pesticide treatments or increasing yield. Agronomists use AI to conduct research and development. AI has been used to predict the ripening time for crops such as tomatoes, monitor soil moisture, operate agricultural robots, conduct predictive analytics, classify livestock pig call emotions, automate greenhouses, detect diseases and pests, and save water.\nArtificial intelligence is used in astronomy to analyze increasing amounts of available data and applications, mainly for \"classification, regression, clustering, forecasting, generation, discovery, and the development of new scientific insights\" for example for discovering exoplanets, forecasting solar activity, and distinguishing between signals and instrumental effects in gravitational wave astronomy. It could also be used for activities in space such as space exploration, including analysis of data from space missions, real-time science decisions of spacecraft, space debris avoidance, and more autonomous operation.\n\nEthics\nAI, like any powerful technology, has potential benefits and potential risks. AI may be able to advance science and find solutions for serious problems: Demis Hassabis of Deep Mind hopes to \"solve intelligence, and then use that to solve everything else\". However, as the use of AI has become widespread, several unintended consequences and risks have been identified.Anyone looking to use machine learning as part of real-world, in-production systems needs to factor ethics into their AI training processes and strive to avoid bias. This is especially true when using AI algorithms that are inherently unexplainable in deep learning.\n\nRisks and harm\nPrivacy and copyright\nMachine learning algorithms require large amounts of data. The techniques used to acquire this data have raised concerns about privacy, surveillance and copyright.\nTechnology companies collect a wide range of data from their users, including online activity, geolocation data, video and audio.\nFor example, in order to build speech recognition algorithms, Amazon have recorded millions of private conversations and allowed temps to listen to and transcribe some of them.\nOpinions about this widespread surveillance range from those who see it as a necessary evil to those for whom it is clearly unethical and a violation of the right to privacy.AI developers argue that this is the only way to deliver valuable applications. and have developed several techniques that attempt to preserve privacy while still obtaining the data, such as data aggregation, de-identification and differential privacy. Since 2016, some privacy experts, such as Cynthia Dwork, began to view privacy in terms of fairness. Brian Christian wrote that experts have pivoted \"from the question of 'what they know' to the question of 'what they're doing with it'.\".Generative AI is often trained on unlicensed copyrighted works, including in domains such as images or computer code; the output is then used under a rationale of \"fair use\". Also website owners who do not wish to have their copyrighted content be AI indexed or ‘scraped’ can add code to their site, as you would, if you did not want your website to be indexed by a search engine which is currently available to certain services such as OpenAI. Experts disagree about how well, and under what circumstances, this rationale will hold up in courts of law; relevant factors may include \"the purpose and character of the use of the copyrighted work\" and \"the effect upon the potential market for the copyrighted work\". In 2023, leading authors (including John Grisham and Jonathan Franzen) sued AI companies for using their work to train generative AI.\n\nMisinformation\nYouTube, Facebook and others use recommender systems to guide users to more content. These AI programs were given the goal of maximizing user engagement (that is, the only goal was to keep people watching). The AI learned that users tended to choose misinformation, conspiracy theories, and extreme partisan content, and, to keep them watching, the AI recommended more of it. Users also tended to watch more content on the same subject, so the AI led people into filter bubbles where they received multiple versions of the same misinformation. This convinced many users that the misinformation was true, and ultimately undermined trust in institutions, the media and the government. The AI program had correctly learned to maximize its goal, but the result was harmful to society. After the U.S. election in 2016, major technology companies took steps to mitigate the problem.\nIn 2022, generative AI began to create images, audio, video and text that are indistinguishable from real photographs, recordings, films or human writing. It is possible for bad actors to use this technology to create massive amounts of misinformation or propaganda. AI pioneer Geoffrey Hinton expressed concern about AI enabling \"authoritarian leaders to manipulate their electorates\" on a large scale, among other risks.\n\nAlgorithmic bias and fairness\nMachine learning applications will be biased if they learn from biased data.\nThe developers may not be aware that the bias exists.\nBias can be introduced by the way training data is selected and by the way a model is deployed. If a biased algorithm is used to make decisions that can seriously harm people (as it can in medicine, finance, recruitment, housing or policing) then the algorithm may cause discrimination.Fairness in machine learning is the study of how to prevent the harm caused by algorithmic bias. It has become serious area of academic study within AI. Researchers have discovered it is not always possible to define \"fairness\" in a way that satisfies all stakeholders.On June 28, 2015, Google Photos's new image labeling feature mistakenly identified Jacky Alcine and a friend as \"gorillas\" because they were black. The system was trained on a dataset that contained very few images of black people, a problem called \"sample size disparity\". Google \"fixed\" this problem by preventing the system from labelling anything as a \"gorilla\". Eight years later, in 2023, Google Photos still could not identify a gorilla, and neither could similar products from Apple, Facebook, Microsoft and Amazon.COMPAS is a commercial program widely used by U.S. courts to assess the likelihood of a defendant becoming a recidivist.\nIn 2016, Julia Angwin at ProPublica discovered that COMPAS exhibited racial bias, despite the fact that the program was not told the races of the defendants. Although the error rate for both whites and blacks was calibrated equal at exactly 61%, the errors for each race were different—the system consistently overestimated the chance that a black person would re-offend and would underestimate the chance that a white person would not re-offend. In 2017, several researchers showed that it was mathematically impossible for COMPAS to accommodate all possible measures of fairness when the base rates of re-offense were different for whites and blacks in the data.A program can make biased decisions even if the data does not explicitly mention a problematic feature (such as \"race\" or \"gender\"). The feature will correlate with other features (like \"address\", \"shopping history\" or \"first name\"), and the program will make the same decisions based on these features as it would on \"race\" or \"gender\".\nMoritz Hardt said \"the most robust fact in this research area is that fairness through blindness doesn't work.\"Criticism of COMPAS highlighted a deeper problem with the misuse of AI. Machine learning models are designed to make \"predictions\" that are only valid if we assume that the future will resemble the past. If they are trained on data that includes the results of racist decisions in the past, machine learning models must predict that racist decisions will be made in the future. Unfortunately, if an application then uses these predictions as recommendations, some of these \"recommendations\" will likely be racist. Thus, machine learning is not well suited to help make decisions in areas where there is hope that the future will be better than the past. It is necessarily descriptive and not proscriptive.Bias and unfairness may go undetected because the developers are overwhelmingly white and male: among AI engineers, about 4% are black and 20% are women.At its 2022 Conference on Fairness, Accountability, and Transparency (ACM FAccT 2022) the Association for Computing Machinery, in Seoul, South Korea, presented and published findings recommending that until AI and robotics systems are demonstrated to be free of bias mistakes, they are unsafe and the use of self-learning neural networks trained on vast, unregulated sources of flawed internet data should be curtailed.\n\nLack of transparency\nMany AI systems are so complex that their designers cannot explain how they reach their decisions. Particularly with deep neural networks, in which there are a large amount of non-linear relationships between inputs and outputs. But some popular explainability techniques exist.There have been many cases where a machine learning program passed rigorous tests, but nevertheless learned something different than what the programmers intended. For example, a system that could identify skin diseases better than medical professionals was found to actually have a strong tendency to classify images with a ruler as \"cancerous\", because pictures of malignancies typically include a ruler to show the scale. Another machine learning system designed to help effectively allocate medical resources was found to classify patients with asthma as being at \"low risk\" of dying from pneumonia. Having asthma is actually a severe risk factor, but since the patients having asthma would usually get much more medical care, they were relatively unlikely to die according to the training data. The correlation between asthma and low risk of dying from pneumonia was real, but misleading.People who have been harmed by an algorithm's decision have a right to an explanation. Doctors, for example, are required to clearly and completely explain the reasoning behind any decision they make. Early drafts of the European Union's General Data Protection Regulation in 2016 included an explicit statement that this right exists. Industry experts noted that this is an unsolved problem with no solution in sight. Regulators argued that nevertheless the harm is real: if the problem has no solution, the tools should not be used.DARPA established the XAI (\"Explainable Artificial Intelligence\") program in 2014 to try and solve these problems.There are several potential solutions to the transparency problem. SHAP helps visualise the contribution of each feature to the output. LIME can locally approximate a model with a simpler, interpretable model. Multitask learning provides a large number of outputs in addition to the target classification. These other outputs can help developers deduce what the network has learned. Deconvolution, DeepDream and other generative methods can allow developers to see what different layers of a deep network have learned and produce output that can suggest what the network is learning.\n\nConflict, surveillance and weaponized AI\nA lethal autonomous weapon is a machine that locates, selects and engages human targets without human supervision. By 2015, over fifty countries were reported to be researching battlefield robots. These weapons are considered especially dangerous for several reasons: if they kill an innocent person it is not clear who should be held accountable, it is unlikely they will reliably choose targets, and, if produced at scale, they are potentially weapons of mass destruction. In 2014, 30 nations (including China) supported a ban on autonomous weapons under the United Nations' Convention on Certain Conventional Weapons, however the United States and others disagreed.AI provides a number of tools that are particularly useful for authoritarian governments: smart spyware, face recognition and voice recognition allow widespread surveillance; such surveillance allows machine learning to classify potential enemies of the state and can prevent them from hiding; recommendation systems can precisely target propaganda and misinformation for maximum effect; deepfakes and generative AI aid in producing misinformation; advanced AI can make authoritarian centralized decision making more competitive with liberal and decentralized systems such as markets.AI facial recognition systems are used for mass surveillance, notably in China. In 2019, Bengaluru, India deployed AI-managed traffic signals. This system uses cameras to monitor traffic density and adjust signal timing based on the interval needed to clear traffic. Terrorists, criminals and rogue states can use weaponized AI such as advanced digital warfare and lethal autonomous weapons. Machine-learning AI is also able to design tens of thousands of toxic molecules in a matter of hours.\n\nTechnological unemployment\nFrom the early days of the development of artificial intelligence there have been arguments, for example those put forward by Joseph Weizenbaum, about whether tasks that can be done by computers actually should be done by them, given the difference between computers and humans, and between quantitative calculation and qualitative, value-based judgement.Economists have frequently highlighted the risks of redundancies from AI, and speculated about unemployment if there is no adequate social policy for full employment.In the past, technology has tended to increase rather than reduce total employment, but economists acknowledge that \"we're in uncharted territory\" with AI. A survey of economists showed disagreement about whether the increasing use of robots and AI will cause a substantial increase in long-term unemployment, but they generally agree that it could be a net benefit if productivity gains are redistributed. Risk estimates vary; for example, in the 2010s, Michael Osborne and Carl Benedikt Frey estimated 47% of U.S. jobs are at \"high risk\" of potential automation, while an OECD report classified only 9% of U.S. jobs as \"high risk\". The methodology of speculating about future employment levels has been criticised as lacking evidential foundation, and for implying that technology, rather than social policy, creates unemployment, as opposed to redundancies.Unlike previous waves of automation, many middle-class jobs may be eliminated by artificial intelligence; The Economist stated in 2015 that \"the worry that AI could do to white-collar jobs what steam power did to blue-collar ones during the Industrial Revolution\" is \"worth taking seriously\". Jobs at extreme risk range from paralegals to fast food cooks, while job demand is likely to increase for care-related professions ranging from personal healthcare to the clergy.In April 2023, it was reported that 70% of the jobs for Chinese video game illlustrators had been eliminated by generative artificial intelligence.\n\nExistential risk\nIt has been argued AI will become so powerful that humanity may irreversibly lose control of it. This could, as physicist Stephen Hawking stated, \"spell the end of the human race\". This scenario has been common in science fiction, when a computer or robot suddenly develops a human-like \"self-awareness\" (or \"sentience\" or \"consciousness\") and becomes a malevolent character. These sci-fi scenarios are misleading in several ways.\nFirst, AI does not require human-like \"sentience\" to be an existential risk. Modern AI programs are given specific goals and use learning and intelligence to achieve them. Philosopher Nick Bostrom argued that if one gives almost any goal to a sufficiently powerful AI, it may choose to destroy humanity to achieve it (he used the example of a paperclip factory manager). Stuart Russell gives the example of household robot that tries to find a way to kill its owner to prevent it from being unplugged, reasoning that \"you can't fetch the coffee if you're dead.\" In order to be safe for humanity, a superintelligence would have to be genuinely aligned with humanity's morality and values so that it is \"fundamentally on our side\".Second, Yuval Noah Harari argues that AI does not require a robot body or physical control to pose an existential risk. The essential parts of civilization are not physical. Things like ideologies, law, government, money and the economy are made of language; they exist because there are stories that billions of people believe. The current prevalence of misinformation suggests that an AI could use language to convince people to believe anything, even to take actions that are destructive.The opinions amongst experts and industry insiders are mixed, with sizable fractions both concerned and unconcerned by risk from eventual superintelligent AI. Personalities such as Stephen Hawking, Bill Gates, and Elon Musk have expressed concern about existential risk from AI.In the early 2010s, experts argued that the risks are too distant in the future to warrant research or that humans will be valuable from the perspective of a superintelligent machine. However, after 2016, the study of current and future risks and possible solutions became a serious area of research.AI pioneers including Fei-Fei Li, Geoffrey Hinton, Yoshua Bengio, Cynthia Breazeal, Rana el Kaliouby, Demis Hassabis, Joy Buolamwini, and Sam Altman have expressed concerns about the risks of AI. In 2023, many leading AI experts issued the joint statement that \"Mitigating the risk of extinction from AI should be a global priority alongside other societal-scale risks such as pandemics and nuclear war\".Other researchers, however, spoke in favor of a less dystopian view. AI pioneer Juergen Schmidhuber did not sign the joint statement, emphasising that in 95% of all cases, AI research is about making \"human lives longer and healthier and easier.\" While the tools that are now being used to improve lives can also be used by bad actors, \"they can also be used against the bad actors.\" Andrew Ng also argued that \"it’s a mistake to fall for the doomsday hype on AI—and that regulators who do will only benefit vested interests.\" Yann LeCun \"scoffs at his peers’ dystopian scenarios of supercharged misinformation and even, eventually, human extinction.\"\n\nLimiting AI\nPossible options for limiting AI include: using Embedded Ethics or Constitutional AI where companies or governments can add a policy, restricting high levels of compute power in training, restricting the ability to rewrite its own code base, restrict certain AI techniques but not in the training phase, open-source (transparency) vs proprietary (could be more restricted), backup model with redundancy, restricting security, privacy and copyright, restricting or controlling the memory, real-time monitoring, risk analysis, emergency shut-off, rigorous simulation and testing, model certification, assess known vulnerabilities, restrict the training material, restrict access to the internet, issue terms of use.\n\nEthical machines and alignment\nFriendly AI are machines that have been designed from the beginning to minimize risks and to make choices that benefit humans. Eliezer Yudkowsky, who coined the term, argues that developing friendly AI should be a higher research priority: it may require a large investment and it must be completed before AI becomes an existential risk.Machines with intelligence have the potential to use their intelligence to make ethical decisions. The field of machine ethics provides machines with ethical principles and procedures for resolving ethical dilemmas.\nThe field of machine ethics is also called computational morality,\nand was founded at an AAAI symposium in 2005.Other approaches include Wendell Wallach's \"artificial moral agents\"\nand Stuart J. Russell's three principles for developing provably beneficial machines.\n\nFrameworks\nArtificial Intelligence projects can have their ethical permissibility tested while designing, developing, and implementing an AI system. An AI framework such as the Care and Act Framework containing the SUM values – developed by the Alan Turing Institute tests projects in four main areas:\nRESPECT the dignity of individual people\nCONNECT with other people sincerely, openly and inclusively\nCARE for the wellbeing of everyone\nPROTECT social values, justice and the public interestOther developments in ethical frameworks include those decided upon during the Asilomar Conference, the Montreal Declaration for Responsible AI, and the IEEE's Ethics of Autonomous Systems initiative, among others; however, these principles do not go without their criticisms, especially regards to the people chosen contributes to these frameworks.Promotion of the wellbeing of the people and communities that these technologies affect requires consideration of the social and ethical implications at all stages of AI system design, development and implementation, and collaboration between job roles such as data scientists, product managers, data engineers, domain experts, and delivery managers.\n\nRegulation\nThe regulation of artificial intelligence is the development of public sector policies and laws for promoting and regulating artificial intelligence (AI); it is therefore related to the broader regulation of algorithms.\nThe regulatory and policy landscape for AI is an emerging issue in jurisdictions globally. According to AI Index at Stanford, the annual number of AI-related laws passed in the 127 survey countries jumped from one passed in 2016 to 37 passed in 2022 alone.\nBetween 2016 and 2020, more than 30 countries adopted dedicated strategies for AI.\nMost EU member states had released national AI strategies, as had Canada, China, India, Japan, Mauritius, the Russian Federation, Saudi Arabia, United Arab Emirates, US and Vietnam. Others were in the process of elaborating their own AI strategy, including Bangladesh, Malaysia and Tunisia.\nThe Global Partnership on Artificial Intelligence was launched in June 2020, stating a need for AI to be developed in accordance with human rights and democratic values, to ensure public confidence and trust in the technology. Henry Kissinger, Eric Schmidt, and Daniel Huttenlocher published a joint statement in November 2021 calling for a government commission to regulate AI.\nIn 2023, OpenAI leaders published recommendations for the governance of superintelligence, which they believe may happen in less than 10 years. In 2023, the United Nations also launched an advisory body to provide recommendations on AI governance; the body comprises technology company executives, governments officials and academics.In a 2022 Ipsos survey, attitudes towards AI varied greatly by country; 78% of Chinese citizens, but only 35% of Americans, agreed that \"products and services using AI have more benefits than drawbacks\". A 2023 Reuters/Ipsos poll found that 61% of Americans agree, and 22% disagree, that AI poses risks to humanity.\nIn a 2023 Fox News poll, 35% of Americans thought it \"very important\", and an additional 41% thought it \"somewhat important\", for the federal government to regulate AI, versus 13% responding \"not very important\" and 8% responding \"not at all important\".In November 2023, the first global AI Safety Summit was held in Bletchley Park in the UK to discuss the near and far term risks of AI and the possibility of mandatory and voluntary regulatory frameworks. 28 countries including the United States, China, and the European Union issued a declaration at the start of the summit, calling for international co-operation to manage the challenges and risks of artificial intelligence.\n\nHistory\nThe study of mechanical or \"formal\" reasoning began with philosophers and mathematicians in antiquity. The study of logic led directly to Alan Turing's theory of computation, which suggested that a machine, by shuffling symbols as simple as \"0\" and \"1\", could simulate both mathematical deduction and formal reasoning, which is known as the Church–Turing thesis. This, along with concurrent discoveries in cybernetics and information theory, led researchers to consider the possibility of building an \"electronic brain\".Alan Turing was thinking about machine intelligence at least as early as 1941, when he circulated a paper on machine intelligence which could be the earliest paper in the field of AI – though it is now lost. The first available paper generally recognized as \"AI\" was McCullouch and Pitts design for Turing-complete \"artificial neurons\" in 1943 – the first mathematical model of a neural network. The paper was influenced by Turing's earlier paper 'On Computable Numbers' from 1936 using similar two-state boolean 'neurons', but was the first to apply it to neuronal function.The term 'Machine Intelligence' was used by Alan Turing during his life which was later often referred to as 'Artificial Intelligence' after his death in 1954. In 1950 Turing published the best known of his papers 'Computing Machinery and Intelligence', the paper introduced his concept of what is now known as the Turing test to the general public. Then followed three radio broadcasts on AI by Turing, the lectures: 'Intelligent Machinery, A Heretical Theory’, ‘Can Digital Computers Think’? and the panel discussion ‘Can Automatic Calculating Machines be Said to Think’. By 1956 computer intelligence had been actively pursued for more than a decade in Britain; the earliest AI programmes were written there in 1951–1952.In 1951, using a Ferranti Mark 1 computer of the University of Manchester, checkers and chess programs were wrote where you could play against the computer. The field of American AI research was founded at a workshop at Dartmouth College in 1956. The attendees became the leaders of AI research in the 1960s. They and their students produced programs that the press described as \"astonishing\": computers were learning checkers strategies, solving word problems in algebra, proving logical theorems and speaking English. Artificial Intelligence laboratories were set up at a number of British and US Universities in the latter 1950s and early 1960s.They had, however, underestimated the difficulty of the problem. Both the U.S. and British governments cut off exploratory research in response to the criticism of Sir James Lighthill and ongoing pressure from the U.S. Congress to fund more productive projects. Minsky's and Papert's book Perceptrons was understood as proving that artificial neural networks would never be useful for solving real-world tasks, thus discrediting the approach altogether. The \"AI winter\", a period when obtaining funding for AI projects was difficult, followed.In the early 1980s, AI research was revived by the commercial success of expert systems, a form of AI program that simulated the knowledge and analytical skills of human experts. By 1985, the market for AI had reached over a billion dollars. At the same time, Japan's fifth generation computer project inspired the U.S. and British governments to restore funding for academic research. However, beginning with the collapse of the Lisp Machine market in 1987, AI once again fell into disrepute, and a second, longer-lasting winter began.Many researchers began to doubt that the current practices would be able to imitate all the processes of human cognition, especially perception, robotics, learning and pattern recognition. A number of researchers began to look into \"sub-symbolic\" approaches. Robotics researchers, such as Rodney Brooks, rejected \"representation\" in general and focussed directly on engineering machines that move and survive. Judea Pearl, Lofti Zadeh and others developed methods that handled incomplete and uncertain information by making reasonable guesses rather than precise logic. But the most important development was the revival of \"connectionism\", including neural network research, by Geoffrey Hinton and others. In 1990, Yann LeCun successfully showed that convolutional neural networks can recognize handwritten digits, the first of many successful applications of neural networks.AI gradually restored its reputation in the late 1990s and early 21st century by exploiting formal mathematical methods and by finding specific solutions to specific problems. This \"narrow\" and \"formal\" focus allowed researchers to produce verifiable results and collaborate with other fields (such as statistics, economics and mathematics).\nBy 2000, solutions developed by AI researchers were being widely used, although in the 1990s they were rarely described as \"artificial intelligence\".Several academic researchers became concerned that AI was no longer pursuing the original goal of creating versatile, fully intelligent machines. Beginning around 2002, they founded the subfield of artificial general intelligence (or \"AGI\"), which had several well-funded institutions by the 2010s.Deep learning began to dominate industry benchmarks in 2012 and was adopted throughout the field.\nFor many specific tasks, other methods were abandoned.\nDeep learning's success was based on both hardware improvements (faster computers, graphics processing units, cloud computing)\nand access to large amounts of data (including curated datasets, such as ImageNet).\nDeep learning's success led to an enormous increase in interest and funding in AI.\nThe amount of machine learning research (measured by total publications) increased by 50% in the years 2015–2019,\nand WIPO reported that AI was the most prolific emerging technology in terms of the number of patent applications and granted patents.\nAccording to 'AI Impacts', about $50 billion annually was invested in \"AI\" around 2022 in the US alone and about 20% of new US Computer Science PhD graduates have specialized in \"AI\";\nabout 800,000 \"AI\"-related US job openings existed in 2022. The large majority of the advances have occurred within the United States, with its companies, universities, and research labs leading artificial intelligence research.In 2016, issues of fairness and the misuse of technology were catapulted into center stage at machine learning conferences, publications vastly increased, funding became available, and many researchers re-focussed their careers on these issues. The alignment problem became a serious field of academic study.\n\nPhilosophy\nDefining artificial intelligence\nAlan Turing wrote in 1950 \"I propose to consider the question 'can machines think'?\" He advised changing the question from whether a machine \"thinks\", to \"whether or not it is possible for machinery to show intelligent behaviour\". He devised the Turing test, which measures the ability of a machine to simulate human conversation. Since we can only observe the behavior of the machine, it does not matter if it is \"actually\" thinking or literally has a \"mind\". Turing notes that we can not determine these things about other people but \"it is usual to have a polite convention that everyone thinks\"Russell and Norvig agree with Turing that AI must be defined in terms of \"acting\" and not \"thinking\". However, they are critical that the test compares machines to people. \"Aeronautical engineering texts,\" they wrote, \"do not define the goal of their field as making 'machines that fly so exactly like pigeons that they can fool other pigeons.'\" AI founder John McCarthy agreed, writing that \"Artificial intelligence is not, by definition, simulation of human intelligence\".McCarthy defines intelligence as \"the computational part of the ability to achieve goals in the world.\" Another AI founder, Marvin Minsky similarly defines it as \"the ability to solve hard problems\". These definitions view intelligence in terms of well-defined problems with well-defined solutions, where both the difficulty of the problem and the performance of the program are direct measures of the \"intelligence\" of the machine—and no other philosophical discussion is required, or may not even be possible.\nAnother definition has been adopted by Google, a major practitioner in the field of AI. This definition stipulates the ability of systems to synthesize information as the manifestation of intelligence, similar to the way it is defined in biological intelligence.\n\nEvaluating approaches to AI\nNo established unifying theory or paradigm has guided AI research for most of its history. The unprecedented success of statistical machine learning in the 2010s eclipsed all other approaches (so much so that some sources, especially in the business world, use the term \"artificial intelligence\" to mean \"machine learning with neural networks\"). This approach is mostly sub-symbolic, soft and narrow (see below). Critics argue that these questions may have to be revisited by future generations of AI researchers.\n\nSymbolic AI and its limits\nSymbolic AI (or \"GOFAI\") simulated the high-level conscious reasoning that people use when they solve puzzles, express legal reasoning and do mathematics. They were highly successful at \"intelligent\" tasks such as algebra or IQ tests. In the 1960s, Newell and Simon proposed the physical symbol systems hypothesis: \"A physical symbol system has the necessary and sufficient means of general intelligent action.\"However, the symbolic approach failed on many tasks that humans solve easily, such as learning, recognizing an object or commonsense reasoning. Moravec's paradox is the discovery that high-level \"intelligent\" tasks were easy for AI, but low level \"instinctive\" tasks were extremely difficult. Philosopher Hubert Dreyfus had argued since the 1960s that human expertise depends on unconscious instinct rather than conscious symbol manipulation, and on having a \"feel\" for the situation, rather than explicit symbolic knowledge. Although his arguments had been ridiculed and ignored when they were first presented, eventually, AI research came to agree with him.The issue is not resolved: sub-symbolic reasoning can make many of the same inscrutable mistakes that human intuition does, such as algorithmic bias. Critics such as Noam Chomsky argue continuing research into symbolic AI will still be necessary to attain general intelligence, in part because sub-symbolic AI is a move away from explainable AI: it can be difficult or impossible to understand why a modern statistical AI program made a particular decision. The emerging field of neuro-symbolic artificial intelligence attempts to bridge the two approaches.\n\nNeat vs. scruffy\n\"Neats\" hope that intelligent behavior is described using simple, elegant principles (such as logic, optimization, or neural networks). \"Scruffies\" expect that it necessarily requires solving a large number of unrelated problems. Neats defend their programs with theoretical rigor, scruffies rely mainly on incremental testing to see if they work. This issue was actively discussed in the 1970s and 1980s, but eventually was seen as irrelevant. Modern AI has elements of both.\n\nSoft vs. hard computing\nFinding a provably correct or optimal solution is intractable for many important problems. Soft computing is a set of techniques, including genetic algorithms, fuzzy logic and neural networks, that are tolerant of imprecision, uncertainty, partial truth and approximation. Soft computing was introduced in the late 1980s and most successful AI programs in the 21st century are examples of soft computing with neural networks.\n\nNarrow vs. general AI\nAI researchers are divided as to whether to pursue the goals of artificial general intelligence and superintelligence directly or to solve as many specific problems as possible (narrow AI) in hopes these solutions will lead indirectly to the field's long-term goals. General intelligence is difficult to define and difficult to measure, and modern AI has had more verifiable successes by focusing on specific problems with specific solutions. The experimental sub-field of artificial general intelligence studies this area exclusively.\n\nMachine consciousness, sentience and mind\nThe philosophy of mind does not know whether a machine can have a mind, consciousness and mental states, in the same sense that human beings do. This issue considers the internal experiences of the machine, rather than its external behavior. Mainstream AI research considers this issue irrelevant because it does not affect the goals of the field: to build machines that can solve problems using intelligence. Russell and Norvig add that \"[t]he additional project of making a machine conscious in exactly the way humans are is not one that we are equipped to take on.\" However, the question has become central to the philosophy of mind. It is also typically the central question at issue in artificial intelligence in fiction.\n\nConsciousness\nDavid Chalmers identified two problems in understanding the mind, which he named the \"hard\" and \"easy\" problems of consciousness. The easy problem is understanding how the brain processes signals, makes plans and controls behavior. The hard problem is explaining how this feels or why it should feel like anything at all, assuming we are right in thinking that it truly does feel like something (Dennett's consciousness illusionism says this is an illusion). Human information processing is easy to explain, however, human subjective experience is difficult to explain. For example, it is easy to imagine a color-blind person who has learned to identify which objects in their field of view are red, but it is not clear what would be required for the person to know what red looks like.\n\nComputationalism and functionalism\nComputationalism is the position in the philosophy of mind that the human mind is an information processing system and that thinking is a form of computing. Computationalism argues that the relationship between mind and body is similar or identical to the relationship between software and hardware and thus may be a solution to the mind–body problem. This philosophical position was inspired by the work of AI researchers and cognitive scientists in the 1960s and was originally proposed by philosophers Jerry Fodor and Hilary Putnam.Philosopher John Searle characterized this position as \"strong AI\": \"The appropriately programmed computer with the right inputs and outputs would thereby have a mind in exactly the same sense human beings have minds.\" Searle counters this assertion with his Chinese room argument, which attempts to show that, even if a machine perfectly simulates human behavior, there is still no reason to suppose it also has a mind.\n\nRobot rights\nIf a machine has a mind and subjective experience, then it may also have sentience (the ability to feel), and if so it could also suffer; it has been argued that this could entitle it to certain rights. Any hypothetical robot rights would lie on a spectrum with animal rights and human rights. This issue has been considered in fiction for centuries, and is now being considered by, for example, California's Institute for the Future; however, critics argue that the discussion is premature.\n\nFuture\nSuperintelligence and the singularity\nA superintelligence is a hypothetical agent that would possess intelligence far surpassing that of the brightest and most gifted human mind.If research into artificial general intelligence produced sufficiently intelligent software, it might be able to reprogram and improve itself. The improved software would be even better at improving itself, leading to what I. J. Good called an \"intelligence explosion\" and Vernor Vinge called a \"singularity\".However, technologies cannot improve exponentially indefinitely, and typically follow an S-shaped curve, slowing when they reach the physical limits of what the technology can do.\n\nTranshumanism\nRobot designer Hans Moravec, cyberneticist Kevin Warwick, and inventor Ray Kurzweil have predicted that humans and machines will merge in the future into cyborgs that are more capable and powerful than either. This idea, called transhumanism, has roots in Aldous Huxley and Robert Ettinger.Edward Fredkin argues that \"artificial intelligence is the next stage in evolution\", an idea first proposed by Samuel Butler's \"Darwin among the Machines\" as far back as 1863, and expanded upon by George Dyson in his book of the same name in 1998.\n\nIn fiction\nThought-capable artificial beings have appeared as storytelling devices since antiquity, and have been a persistent theme in science fiction.A common trope in these works began with Mary Shelley's Frankenstein, where a human creation becomes a threat to its masters. This includes such works as Arthur C. Clarke's and Stanley Kubrick's 2001: A Space Odyssey (both 1968), with HAL 9000, the murderous computer in charge of the Discovery One spaceship, as well as The Terminator (1984) and The Matrix (1999). In contrast, the rare loyal robots such as Gort from The Day the Earth Stood Still (1951) and Bishop from Aliens (1986) are less prominent in popular culture.Isaac Asimov introduced the Three Laws of Robotics in many books and stories, most notably the \"Multivac\" series about a super-intelligent computer of the same name. Asimov's laws are often brought up during lay discussions of machine ethics; while almost all artificial intelligence researchers are familiar with Asimov's laws through popular culture, they generally consider the laws useless for many reasons, one of which is their ambiguity.Several works use AI to force us to confront the fundamental question of what makes us human, showing us artificial beings that have the ability to feel, and thus to suffer. This appears in Karel Čapek's R.U.R., the films A.I. Artificial Intelligence and Ex Machina, as well as the novel Do Androids Dream of Electric Sheep?, by Philip K. Dick. Dick considers the idea that our understanding of human subjectivity is altered by technology created with artificial intelligence.\n\nSee also\nAI effect\nArtificial intelligence detection software – Software to detect AI-generated contentPages displaying short descriptions of redirect targets\nArtificial intelligence in healthcare – Overview of the use of artificial intelligence in healthcare\nBehavior selection algorithm – Algorithm that selects actions for intelligent agents\nBusiness process automation – Technology-enabled automation of complex business processes\nCase-based reasoning – Process of solving new problems based on the solutions of similar past problems\nEmergent algorithm – Algorithm exhibiting emergent behavior\nFemale gendering of AI technologies\nGlossary of artificial intelligence – List of definitions of terms and concepts commonly used in the study of artificial intelligence\nRobotic process automation – Form of business process automation technology\nWeak artificial intelligence – Form of artificial intelligence\nWetware computer – Computer composed of organic material\nIntelligence amplification – Use of information technology to augment human intelligence\n\nExplanatory notes\nReferences\nAI textbooks\nThe two most widely used textbooks in 2023. (See the Open Syllabus).\n\nRussell, Stuart J.; Norvig, Peter. (2021). Artificial Intelligence: A Modern Approach (4th ed.). Hoboken: Pearson. ISBN 978-0134610993. LCCN 20190474.\nRich, Elaine; Knight, Kevin; Nair, Shivashankar B (2010). Artificial Intelligence (3rd ed.). New Delhi: Tata McGraw Hill India. ISBN 978-0070087705.These were the four of the most widely used AI textbooks in 2008:\n\nHistory of AI\nOther sources\nFurther reading\nExternal links\n\n\"Artificial Intelligence\". Internet Encyclopedia of Philosophy.\nThomason, Richmond. \"Logic and Artificial Intelligence\". In Zalta, Edward N. (ed.). Stanford Encyclopedia of Philosophy.\nArtificial Intelligence. BBC Radio 4 discussion with John Agar, Alison Adam & Igor Aleksander (In Our Time, 8 December 2005).\nTheranostics and AI—The Next Advance in Cancer Precision Medicine.",
    "Machine Learning": "Machine learning (ML) is a field of study in artificial intelligence concerned with the development and study of statistical algorithms that can learn from data and generalize to unseen data, and thus perform tasks without explicit instructions. Recently, generative artificial neural networks have been able to surpass many previous approaches in performance.Machine learning approaches have been applied to many fields including large language models, computer vision, speech recognition, email filtering, agriculture, and medicine, where it is too costly to develop algorithms to perform the needed tasks. ML is known in its application across business problems under the name predictive analytics. Although not all machine learning is statistically based, computational statistics is an important source of the field's methods.\nThe mathematical foundations of ML are provided by mathematical optimization (mathematical programming) methods. Data mining is a related (parallel) field of study, focusing on exploratory data analysis through unsupervised learning. From a theoretical point of view Probably approximately correct learning provides a framework for describing machine learning.\n\nHistory and relationships to other fields\nThe term machine learning was coined in 1959 by Arthur Samuel, an IBM employee and pioneer in the field of computer gaming and artificial intelligence. The synonym self-teaching computers was also used in this time period.Although the earliest machine learning model was introduced in the 1950s when Arthur Samuel invented a program that calculated the winning chance in checkers for each side, the history of machine learning roots back to decades of human desire and effort to study human cognitive processes. In 1949, Canadian psychologist Donald Hebb published the book The Organization of Behavior, in which he introduced a theoretical neural structure formed by certain interactions among nerve cells. Hebb's model of neurons interacting with one another set a groundwork for how AIs and machine learning algorithms work under nodes, or artificial neurons used by computers to communicate data. Other researchers who have studied human cognitive systems contributed to the modern machine learning technologies as well, including logician Walter Pitts and Warren McCulloch, who proposed the early mathematical models of neural networks to come up with algorithms that mirror human thought processes.By the early 1960s an experimental \"learning machine\" with punched tape memory, called Cybertron, had been developed by Raytheon Company to analyze sonar signals, electrocardiograms, and speech patterns using rudimentary reinforcement learning. It was repetitively \"trained\" by a human operator/teacher to recognize patterns and equipped with a \"goof\" button to cause it to re-evaluate incorrect decisions. A representative book on research into machine learning during the 1960s was Nilsson's book on Learning Machines, dealing mostly with machine learning for pattern classification. Interest related to pattern recognition continued into the 1970s, as described by Duda and Hart in 1973. In 1981 a report was given on using teaching strategies so that a neural network learns to recognize 40 characters (26 letters, 10 digits, and 4 special symbols) from a computer terminal.Tom M. Mitchell provided a widely quoted, more formal definition of the algorithms studied in the machine learning field: \"A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P,  improves with experience E.\" This definition of the tasks in which machine learning is concerned offers a fundamentally operational definition rather than defining the field in cognitive terms. This follows Alan Turing's proposal in his paper \"Computing Machinery and Intelligence\", in which the question \"Can machines think?\" is replaced with the question \"Can machines do what we (as thinking entities) can do?\".Modern-day machine learning has two objectives, one is to classify data based on models which have been developed, the other purpose is to make predictions for future outcomes based on these models. A hypothetical algorithm specific to classifying data may use computer vision of moles coupled with supervised learning in order to train it to classify the cancerous moles. A machine learning algorithm for stock trading may inform the trader of future potential predictions.\n\nArtificial intelligence\nAs a scientific endeavor, machine learning grew out of the quest for artificial intelligence (AI). In the early days of AI as an academic discipline, some researchers were interested in having machines learn from data. They attempted to approach the problem with various symbolic methods, as well as what were then termed \"neural networks\"; these were mostly perceptrons and other models that were later found to be reinventions of the generalized linear models of statistics. Probabilistic reasoning was also employed, especially in automated medical diagnosis.: 488 However, an increasing emphasis on the logical, knowledge-based approach caused a rift between AI and machine learning. Probabilistic systems were plagued by theoretical and practical problems of data acquisition and representation.: 488  By 1980, expert systems had come to dominate AI, and statistics was out of favor. Work on symbolic/knowledge-based learning did continue within AI, leading to inductive logic programming, but the more statistical line of research was now outside the field of AI proper, in pattern recognition and information retrieval.: 708–710, 755  Neural networks research had been abandoned by AI and computer science around the same time. This line, too, was continued outside the AI/CS field, as \"connectionism\", by researchers from other disciplines including Hopfield, Rumelhart, and Hinton. Their main success came in the mid-1980s with the reinvention of backpropagation.: 25 Machine learning (ML), reorganized and recognized as its own field, started to flourish in the 1990s. The field changed its goal from achieving artificial intelligence to tackling solvable problems of a practical nature. It shifted focus away from the symbolic approaches it had inherited from AI, and toward methods and models borrowed from statistics, fuzzy logic, and probability theory.\n\nData mining\nMachine learning and data mining often employ the same methods and overlap significantly, but while machine learning focuses on prediction, based on known properties learned from the training data, data mining focuses on the discovery of (previously) unknown properties in the data (this is the analysis step of knowledge discovery in databases). Data mining uses many machine learning methods, but with different goals; on the other hand, machine learning also employs data mining methods as \"unsupervised learning\" or as a preprocessing step to improve learner accuracy. Much of the confusion between these two research communities (which do often have separate conferences and separate journals, ECML PKDD being a major exception) comes from the basic assumptions they work with: in machine learning, performance is usually evaluated with respect to the ability to reproduce known knowledge, while in knowledge discovery and data mining (KDD) the key task is the discovery of previously unknown knowledge. Evaluated with respect to known knowledge, an uninformed (unsupervised) method will easily be outperformed by other supervised methods, while in a typical KDD task, supervised methods cannot be used due to the unavailability of training data.\nMachine learning also has intimate ties to optimization: many learning problems are formulated as minimization of some loss function on a training set of examples. Loss functions express the discrepancy between the predictions of the model being trained and the actual problem instances (for example, in classification, one wants to assign a label to instances, and models are trained to correctly predict the pre-assigned labels of a set of examples).\n\nGeneralization\nThe difference between optimization and machine learning arises from the goal of generalization: while optimization algorithms can minimize the loss on a training set, machine learning is concerned with minimizing the loss on unseen samples. Characterizing the generalization of various learning algorithms is an active topic of current research, especially for deep learning algorithms.\n\nStatistics\nMachine learning and statistics are closely related fields in terms of methods, but distinct in their principal goal: statistics draws population inferences from a sample, while machine learning finds generalizable predictive patterns. According to Michael I. Jordan, the ideas of machine learning, from methodological principles to theoretical tools, have had a long pre-history in statistics. He also suggested the term data science as a placeholder to call the overall field.Conventional statistical analyses require the a priori selection of a model most suitable for the study data set. In addition, only significant or theoretically relevant variables based on previous experience are included for analysis. In contrast, machine learning is not built on a pre-structured model; rather, the data shape the model by detecting underlying patterns. The more variables (input) used to train the model, the more accurate the ultimate model will be.Leo Breiman distinguished two statistical modeling paradigms: data model and algorithmic model, wherein \"algorithmic model\" means more or less the machine learning algorithms like Random Forest.\nSome statisticians have adopted methods from machine learning, leading to a combined field that they call statistical learning.\n\nStatistical Physics\nAnalytical and computational techniques derived from deep-rooted physics of disordered systems can be extended to large-scale problems, including machine learning, e.g., to analyze the weight space of deep neural networks. Statistical physics is thus finding applications in the area of medical diagnostics.\n\nTheory\nA core objective of a learner is to generalize from its experience. Generalization in this context is the ability of a learning machine to perform accurately on new, unseen examples/tasks after having experienced a learning data set. The training examples come from some generally unknown probability distribution (considered representative of the space of occurrences) and the learner has to build a general model about this space that enables it to produce sufficiently accurate predictions in new cases.\nThe computational analysis of machine learning algorithms and their performance is a branch of theoretical computer science known as computational learning theory via the Probably Approximately Correct Learning (PAC) model. Because training sets are finite and the future is uncertain, learning theory usually does not yield guarantees of the performance of algorithms. Instead, probabilistic bounds on the performance are quite common. The bias–variance decomposition is one way to quantify generalization error.\nFor the best performance in the context of generalization, the complexity of the hypothesis should match the complexity of the function underlying the data. If the hypothesis is less complex than the function, then the model has under fitted the data. If the complexity of the model is increased in response, then the training error decreases. But if the hypothesis is too complex, then the model is subject to overfitting and generalization will be poorer.In addition to performance bounds, learning theorists study the time complexity and feasibility of learning. In computational learning theory, a computation is considered feasible if it can be done in polynomial time. There are two kinds of time complexity results: Positive results show that a certain class of functions can be learned in polynomial time. Negative results show that certain classes cannot be learned in polynomial time.\n\nApproaches\nMachine learning approaches are traditionally divided into three broad categories, which correspond to learning paradigms, depending on the nature of the \"signal\" or \"feedback\" available to the learning system:\n\nSupervised learning: The computer is presented with example inputs and their desired outputs, given by a \"teacher\", and the goal is to learn a general rule that maps inputs to outputs.\nUnsupervised learning: No labels are given to the learning algorithm, leaving it on its own to find structure in its input. Unsupervised learning can be a goal in itself (discovering hidden patterns in data) or a means towards an end (feature learning).\nReinforcement learning: A computer program interacts with a dynamic environment in which it must perform a certain goal (such as driving a vehicle or playing a game against an opponent). As it navigates its problem space, the program is provided feedback that's analogous to rewards, which it tries to maximize.Although each algorithm has advantages and limitations, no single algorithm works for all problems.\n\nSupervised learning\nSupervised learning algorithms build a mathematical model of a set of data that contains both the inputs and the desired outputs. The data is known as training data, and consists of a set of training examples. Each training example has one or more inputs and the desired output, also known as a supervisory signal.  In the mathematical model, each training example is represented by an array or vector, sometimes called a feature vector, and the training data is represented by a matrix. Through iterative optimization of an objective function, supervised learning algorithms learn a function that can be used to predict the output associated with new inputs. An optimal function allows the algorithm to correctly determine the output for inputs that were not a part of the training data. An algorithm that improves the accuracy of its outputs or predictions over time is said to have learned to perform that task.Types of supervised-learning algorithms include active learning, classification and regression. Classification algorithms are used when the outputs are restricted to a limited set of values, and regression algorithms are used when the outputs may have any numerical value within a range. As an example, for a classification algorithm that filters emails, the input would be an incoming email, and the output would be the name of the folder in which to file the email.\nSimilarity learning is an area of supervised machine learning closely related to regression and classification, but the goal is to learn from examples using a similarity function that measures how similar or related two objects are. It has applications in ranking, recommendation systems, visual identity tracking, face verification, and speaker verification.\n\nUnsupervised learning\nUnsupervised learning algorithms find structures in data that has not been labeled, classified or categorized. Instead of responding to feedback, unsupervised learning algorithms identify commonalities in the data and react based on the presence or absence of such commonalities in each new piece of data. Central applications of unsupervised machine learning include clustering, dimensionality reduction, and density estimation. Unsupervised learning algorithms also streamlined the process of identifying large indel based haplotypes of a gene of interest from pan-genome.\nCluster analysis is the assignment of a set of observations into subsets (called clusters) so that observations within the same cluster are similar according to one or more predesignated criteria, while observations drawn from different clusters are dissimilar. Different clustering techniques make different assumptions on the structure of the data, often defined by some similarity metric and evaluated, for example, by internal compactness, or the similarity between members of the same cluster, and separation, the difference between clusters. Other methods are based on estimated density and graph connectivity.\n\nSemi-supervised learning\nSemi-supervised learning falls between unsupervised learning (without any labeled training data) and supervised learning (with completely labeled training data). Some of the training examples are missing training labels, yet many machine-learning researchers have found that unlabeled data, when used in conjunction with a small amount of labeled data, can produce a considerable improvement in learning accuracy.\nIn weakly supervised learning, the training labels are noisy, limited, or imprecise; however, these labels are often cheaper to obtain, resulting in larger effective training sets.\n\nReinforcement learning\nReinforcement learning is an area of machine learning concerned with how software agents ought to take actions in an environment so as to maximize some notion of cumulative reward. Due to its generality, the field is studied in many other disciplines, such as game theory, control theory, operations research, information theory, simulation-based optimization, multi-agent systems, swarm intelligence, statistics and genetic algorithms. In reinforcement learning, the environment is typically represented as a Markov decision process (MDP). Many reinforcements learning algorithms use dynamic programming techniques. Reinforcement learning algorithms do not assume knowledge of an exact mathematical model of the MDP and are used when exact models are infeasible. Reinforcement learning algorithms are used in autonomous vehicles or in learning to play a game against a human opponent.\n\nDimensionality reduction\nDimensionality reduction is a process of reducing the number of random variables under consideration by obtaining a set of principal variables. In other words, it is a process of reducing the dimension of the feature set, also called the \"number of features\". Most of the dimensionality reduction techniques can be considered as either feature elimination or extraction. One of the popular methods of dimensionality reduction is principal component analysis (PCA). PCA involves changing higher-dimensional data (e.g., 3D) to a smaller space (e.g., 2D). This results in a smaller dimension of data (2D instead of 3D), while keeping all original variables in the model without changing the data.\nThe manifold hypothesis proposes that high-dimensional data sets lie along low-dimensional manifolds, and many dimensionality reduction techniques make this assumption, leading to the area of manifold learning and manifold regularization.\n\nOther types\nOther approaches have been developed which do not fit neatly into this three-fold categorization, and sometimes more than one is used by the same machine learning system. For example, topic modeling, meta-learning.\n\nSelf-learning\nSelf-learning, as a machine learning paradigm was introduced in 1982 along with a neural network capable of self-learning, named crossbar adaptive array (CAA). It is learning with no external rewards and no external teacher advice. The CAA self-learning algorithm computes, in a crossbar fashion, both decisions about actions and emotions (feelings) about consequence situations. The system is driven by the interaction between cognition and emotion.\nThe self-learning algorithm updates a memory matrix W =||w(a,s)|| such that in each iteration executes the following machine learning routine: \n\nin situation s perform action a\nreceive a consequence situation s'\ncompute emotion of being in the consequence situation v(s')\nupdate crossbar memory  w'(a,s) = w(a,s) + v(s')It is a system with only one input, situation, and only one output, action (or behavior) a. There is neither a separate reinforcement input nor an advice input from the environment. The backpropagated value (secondary reinforcement) is the emotion toward the consequence situation. The CAA exists in two environments, one is the behavioral environment where it behaves, and the other is the genetic environment, wherefrom it initially and only once receives initial emotions about situations to be encountered in the behavioral environment. After receiving the genome (species) vector from the genetic environment, the CAA learns a goal-seeking behavior, in an environment that contains both desirable and undesirable situations.\n\nFeature learning\nSeveral learning algorithms aim at discovering better representations of the inputs provided during training. Classic examples include principal component analysis and cluster analysis. Feature learning algorithms, also called representation learning algorithms, often attempt to preserve the information in their input but also transform it in a way that makes it useful, often as a pre-processing step before performing classification or predictions. This technique allows reconstruction of the inputs coming from the unknown data-generating distribution, while not being necessarily faithful to configurations that are implausible under that distribution. This replaces manual feature engineering, and allows a machine to both learn the features and use them to perform a specific task.\nFeature learning can be either supervised or unsupervised. In supervised feature learning, features are learned using labeled input data. Examples include artificial neural networks, multilayer perceptrons, and supervised dictionary learning. In unsupervised feature learning, features are learned with unlabeled input data.  Examples include dictionary learning, independent component analysis, autoencoders, matrix factorization and various forms of clustering.Manifold learning algorithms attempt to do so under the constraint that the learned representation is low-dimensional. Sparse coding algorithms attempt to do so under the constraint that the learned representation is sparse, meaning that the mathematical model has many zeros. Multilinear subspace learning algorithms aim to learn low-dimensional representations directly from tensor representations for multidimensional data, without reshaping them into higher-dimensional vectors. Deep learning algorithms discover multiple levels of representation, or a hierarchy of features, with higher-level, more abstract features defined in terms of (or generating) lower-level features. It has been argued that an intelligent machine is one that learns a representation that disentangles the underlying factors of variation that explain the observed data.Feature learning is motivated by the fact that machine learning tasks such as classification often require input that is mathematically and computationally convenient to process. However, real-world data such as images, video, and sensory data has not yielded attempts to algorithmically define specific features. An alternative is to discover such features or representations through examination, without relying on explicit algorithms.\n\nSparse dictionary learning\nSparse dictionary learning is a feature learning method where a training example is represented as a linear combination of basis functions, and is assumed to be a sparse matrix. The method is strongly NP-hard and difficult to solve approximately. A popular heuristic method for sparse dictionary learning is the K-SVD algorithm. Sparse dictionary learning has been applied in several contexts. In classification, the problem is to determine the class to which a previously unseen training example belongs. For a dictionary where each class has already been built, a new training example is associated with the class that is best sparsely represented by the corresponding dictionary. Sparse dictionary learning has also been applied in image de-noising. The key idea is that a clean image patch can be sparsely represented by an image dictionary, but the noise cannot.\n\nAnomaly detection\nIn data mining, anomaly detection, also known as outlier detection, is the identification of rare items, events or observations which raise suspicions by differing significantly from the majority of the data. Typically, the anomalous items represent an issue such as bank fraud, a structural defect, medical problems or errors in a text. Anomalies are referred to as outliers, novelties, noise, deviations and exceptions.In particular, in the context of abuse and network intrusion detection, the interesting objects are often not rare objects, but unexpected bursts of inactivity. This pattern does not adhere to the common statistical definition of an outlier as a rare object. Many outlier detection methods (in particular, unsupervised algorithms) will fail on such data unless aggregated appropriately. Instead, a cluster analysis algorithm may be able to detect the micro-clusters formed by these patterns.Three broad categories of anomaly detection techniques exist. Unsupervised anomaly detection techniques detect anomalies in an unlabeled test data set under the assumption that the majority of the instances in the data set are normal, by looking for instances that seem to fit the least to the remainder of the data set. Supervised anomaly detection techniques require a data set that has been labeled as \"normal\" and \"abnormal\" and involves training a classifier (the key difference to many other statistical classification problems is the inherently unbalanced nature of outlier detection). Semi-supervised anomaly detection techniques construct a model representing normal behavior from a given normal training data set and then test the likelihood of a test instance to be generated by the model.\n\nRobot learning\nRobot learning is inspired by a multitude of machine learning methods, starting from supervised learning, reinforcement learning, and finally meta-learning (e.g. MAML).\n\nAssociation rules\nAssociation rule learning is a rule-based machine learning method for discovering relationships between variables in large databases. It is intended to identify strong rules discovered in databases using some measure of \"interestingness\".Rule-based machine learning is a general term for any machine learning method that identifies, learns, or evolves \"rules\" to store, manipulate or apply knowledge. The defining characteristic of a rule-based machine learning algorithm is the identification and utilization of a set of relational rules that collectively represent the knowledge captured by the system. This is in contrast to other machine learning algorithms that commonly identify a singular model that can be universally applied to any instance in order to make a prediction. Rule-based machine learning approaches include learning classifier systems, association rule learning, and artificial immune systems.\nBased on the concept of strong rules, Rakesh Agrawal, Tomasz Imieliński and Arun Swami introduced association rules for discovering regularities between products in large-scale transaction data recorded by point-of-sale (POS) systems in supermarkets. For example, the rule \n  \n    \n      \n        {\n        \n          o\n          n\n          i\n          o\n          n\n          s\n          ,\n          p\n          o\n          t\n          a\n          t\n          o\n          e\n          s\n        \n        }\n        ⇒\n        {\n        \n          b\n          u\n          r\n          g\n          e\n          r\n        \n        }\n      \n    \n    {\\displaystyle \\{\\mathrm {onions,potatoes} \\}\\Rightarrow \\{\\mathrm {burger} \\}}\n   found in the sales data of a supermarket would indicate that if a customer buys onions and potatoes together, they are likely to also buy hamburger meat. Such information can be used as the basis for decisions about marketing activities such as promotional pricing or product placements. In addition to market basket analysis, association rules are employed today in application areas including Web usage mining, intrusion detection, continuous production, and bioinformatics. In contrast with sequence mining, association rule learning typically does not consider the order of items either within a transaction or across transactions.\nLearning classifier systems (LCS) are a family of rule-based machine learning algorithms that combine a discovery component, typically a genetic algorithm, with a learning component, performing either supervised learning, reinforcement learning, or unsupervised learning. They seek to identify a set of context-dependent rules that collectively store and apply knowledge in a piecewise manner in order to make predictions.Inductive logic programming (ILP) is an approach to rule learning using logic programming as a uniform representation for input examples, background knowledge, and hypotheses. Given an encoding of the known background knowledge and a set of examples represented as a logical database of facts, an ILP system will derive a hypothesized logic program that entails all positive and no negative examples. Inductive programming is a related field that considers any kind of programming language for representing hypotheses (and not only logic programming), such as functional programs.\nInductive logic programming is particularly useful in bioinformatics and natural language processing. Gordon Plotkin and Ehud Shapiro laid the initial theoretical foundation for inductive machine learning in a logical setting. Shapiro built their first implementation (Model Inference System) in 1981: a Prolog program that inductively inferred logic programs from positive and negative examples. The term inductive here refers to philosophical induction, suggesting a theory to explain observed facts, rather than mathematical induction, proving a property for all members of a well-ordered set.\n\nModels\nPerforming machine learning can involve creating a model, which is trained on some training data and then can process additional data to make predictions. Various types of models have been used and researched for machine learning systems.\n\nArtificial neural networks\nArtificial neural networks (ANNs), or connectionist systems, are computing systems vaguely inspired by the biological neural networks that constitute animal brains. Such systems \"learn\" to perform tasks by considering examples, generally without being programmed with any task-specific rules.\nAn ANN is a model based on a collection of connected units or nodes called \"artificial neurons\", which loosely model the neurons in a biological brain. Each connection, like the synapses in a biological brain, can transmit information, a \"signal\", from one artificial neuron to another. An artificial neuron that receives a signal can process it and then signal additional artificial neurons connected to it. In common ANN implementations, the signal at a connection between artificial neurons is a real number, and the output of each artificial neuron is computed by some non-linear function of the sum of its inputs. The connections between artificial neurons are called \"edges\". Artificial neurons and edges typically have a weight that adjusts as learning proceeds. The weight increases or decreases the strength of the signal at a connection. Artificial neurons may have a threshold such that the signal is only sent if the aggregate signal crosses that threshold. Typically, artificial neurons are aggregated into layers. Different layers may perform different kinds of transformations on their inputs. Signals travel from the first layer (the input layer) to the last layer (the output layer), possibly after traversing the layers multiple times.\nThe original goal of the ANN approach was to solve problems in the same way that a human brain would. However, over time, attention moved to performing specific tasks, leading to deviations from biology. Artificial neural networks have been used on a variety of tasks, including computer vision, speech recognition, machine translation, social network filtering, playing board and video games and medical diagnosis.\nDeep learning consists of multiple hidden layers in an artificial neural network. This approach tries to model the way the human brain processes light and sound into vision and hearing. Some successful applications of deep learning are computer vision and speech recognition.\n\nDecision trees\nDecision tree learning uses a decision tree as a predictive model to go from observations about an item (represented in the branches) to conclusions about the item's target value (represented in the leaves). It is one of the predictive modeling approaches used in statistics, data mining, and machine learning. Tree models where the target variable can take a discrete set of values are called classification trees; in these tree structures, leaves represent class labels, and branches represent conjunctions of features that lead to those class labels. Decision trees where the target variable can take continuous values (typically real numbers) are called regression trees. In decision analysis, a decision tree can be used to visually and explicitly represent decisions and decision making. In data mining, a decision tree describes data, but the resulting classification tree can be an input for decision-making.\n\nSupport-vector machines\nSupport-vector machines (SVMs), also known as support-vector networks, are a set of related supervised learning methods used for classification and regression. Given a set of training examples, each marked as belonging to one of two categories, an SVM training algorithm builds a model that predicts whether a new example falls into one category.  An SVM training algorithm is a non-probabilistic, binary, linear classifier, although methods such as Platt scaling exist to use SVM in a probabilistic classification setting. In addition to performing linear classification, SVMs can efficiently perform a non-linear classification using what is called the kernel trick, implicitly mapping their inputs into high-dimensional feature spaces.\n\nRegression analysis\nRegression analysis encompasses a large variety of statistical methods to estimate the relationship between input variables and their associated features. Its most common form is linear regression, where a single line is drawn to best fit the given data according to a mathematical criterion such as ordinary least squares. The latter is often extended by regularization methods to mitigate overfitting and bias, as in ridge regression. When dealing with non-linear problems, go-to models include polynomial regression (for example, used for trendline fitting in Microsoft Excel), logistic regression (often used in statistical classification) or even kernel regression, which introduces non-linearity by taking advantage of the kernel trick to implicitly map input variables to higher-dimensional space.\n\nBayesian networks\nA Bayesian network, belief network, or directed acyclic graphical model is a probabilistic graphical model that represents a set of random variables and their conditional independence with a directed acyclic graph (DAG). For example, a Bayesian network could represent the probabilistic relationships between diseases and symptoms. Given symptoms, the network can be used to compute the probabilities of the presence of various diseases. Efficient algorithms exist that perform inference and learning. Bayesian networks that model sequences of variables, like speech signals or protein sequences, are called dynamic Bayesian networks. Generalizations of Bayesian networks that can represent and solve decision problems under uncertainty are called influence diagrams.\n\nGaussian processes\nA Gaussian process is a stochastic process in which every finite collection of the random variables in the process has a multivariate normal distribution, and it relies on a pre-defined covariance function, or kernel, that models how pairs of points relate to each other depending on their locations.\nGiven a set of observed points, or input–output examples, the distribution of the (unobserved) output of a new point as function of its input data can be directly computed by looking like the observed points and the covariances between those points and the new, unobserved point.\nGaussian processes are popular surrogate models in Bayesian optimization used to do hyperparameter optimization.\n\nGenetic algorithms\nA genetic algorithm (GA) is a search algorithm and heuristic technique that mimics the process of natural selection, using methods such as mutation and crossover to generate new genotypes in the hope of finding good solutions to a given problem. In machine learning, genetic algorithms were used in the 1980s and 1990s. Conversely, machine learning techniques have been used to improve the performance of genetic and evolutionary algorithms.\n\nBelief functions\nThe theory of belief functions, also referred to as evidence theory or Dempster–Shafer theory, is a general framework for reasoning with uncertainty, with understood connections to other frameworks such as probability, possibility and  imprecise probability theories. These theoretical frameworks can be thought of as a kind of learner and have some analogous properties of how evidence is combined (e.g.,  Dempster's rule of combination), just like how in a pmf-based Bayesian approach would combine probabilities. However, there are many caveats to these beliefs functions when compared to Bayesian approaches in order to incorporate ignorance and Uncertainty quantification. These belief function approaches that are implemented within the machine learning domain typically leverage a fusion approach of various ensemble methods to better handle the learner's decision boundary, low samples, and ambiguous class issues that standard machine learning approach tend to have difficulty resolving. However, the computational complexity of these algorithms are dependent on the number of propositions (classes), and can lead a much higher computation time when compared to other machine learning approaches.\n\nTraining models\nTypically, machine learning models require a high quantity of reliable data in order for the models to perform accurate predictions. When training a machine learning model, machine learning engineers need to target and collect a large and representative sample of data. Data from the training set can be as varied as a corpus of text, a collection of images, sensor data, and data collected from individual users of a service. Overfitting is something to watch out for when training a machine learning model. Trained models derived from biased or non-evaluated data can result in skewed or undesired predictions. Bias models may result in detrimental outcomes thereby furthering the negative impacts on society or objectives. Algorithmic bias is a potential result of data not being fully prepared for training. Machine learning ethics is becoming a field of study and notably be integrated within machine learning engineering teams.\n\nFederated learning\nFederated learning is an adapted form of distributed artificial intelligence to training machine learning models that decentralizes the training process, allowing for users' privacy to be maintained by not needing to send their data to a centralized server. This also increases efficiency by decentralizing the training process to many devices. For example, Gboard uses federated machine learning to train search query prediction models on users' mobile phones without having to send individual searches back to Google.\n\nApplications\nThere are many applications for machine learning, including:\n\nIn 2006, the media-services provider Netflix held the first \"Netflix Prize\" competition to find a program to better predict user preferences and improve the accuracy of its existing Cinematch movie recommendation algorithm by at least 10%. A joint team made up of researchers from AT&T Labs-Research in collaboration with the teams Big Chaos and Pragmatic Theory built an ensemble model to win the Grand Prize in 2009 for $1 million. Shortly after the prize was awarded, Netflix realized that viewers' ratings were not the best indicators of their viewing patterns (\"everything is a recommendation\") and they changed their recommendation engine accordingly. In 2010 The Wall Street Journal wrote about the firm Rebellion Research and their use of machine learning to predict the financial crisis. In 2012, co-founder of Sun Microsystems, Vinod Khosla, predicted that 80% of medical doctors jobs would be lost in the next two decades to automated machine learning medical diagnostic software. In 2014, it was reported that a machine learning algorithm had been applied in the field of art history to study fine art paintings and that it may have revealed previously unrecognized influences among artists. In 2019 Springer Nature published the first research book created using machine learning. In 2020, machine learning technology was used to help make diagnoses and aid researchers in developing a cure for COVID-19. Machine learning was recently applied to predict the pro-environmental behavior of travelers. Recently, machine learning technology was also applied to optimize smartphone's performance and thermal behavior based on the user's interaction with the phone. When applied correctly, machine learning algorithms (MLAs) can utilize a wide range of company characteristics to predict stock returns without overfitting. By employing effective feature engineering and combining forecasts, MLAs can generate results that far surpass those obtained from basic linear techniques like OLS.\n\nLimitations\nAlthough machine learning has been transformative in some fields, machine-learning programs often fail to deliver expected results. Reasons for this are numerous: lack of (suitable) data, lack of access to the data, data bias, privacy problems, badly chosen tasks and algorithms, wrong tools and people, lack of resources, and evaluation problems.The \"black box theory\" poses another yet significant challenge. Black box refers to a situation where the algorithm or the process of producing an output is entirely opaque, meaning that even the coders of the algorithm cannot audit the pattern that the machine extracted out of the data. The House of Lords Select Committee, which claimed that such an “intelligence system” that could have a “substantial impact on an individual’s life” would not be considered acceptable unless it provided “a full and satisfactory explanation for the decisions” it makes.In 2018, a self-driving car from Uber failed to detect a pedestrian, who was killed after a collision. Attempts to use machine learning in healthcare with the IBM Watson system failed to deliver even after years of time and billions of dollars invested. Microsoft's chatbot has been reported to produce hostile and offensive response against its users.Machine learning has been used as a strategy to update the evidence related to a systematic review and increased reviewer burden related to the growth of biomedical literature. While it has improved with training sets, it has not yet developed sufficiently to reduce the workload burden without limiting the necessary sensitivity for the findings research themselves.\n\nBias\nMachine learning approaches in particular can suffer from different data biases. A machine learning system trained specifically on current customers may not be able to predict the needs of new customer groups that are not represented in the training data. When trained on human-made data, machine learning is likely to pick up the constitutional and unconscious biases already present in society.Language models learned from data have been shown to contain human-like biases. In an experiment carried out by ProPublica, an investigative journalism organization, a machine learning algorithm’s insight towards the recidivism rates among prisoners falsely flagged “black defendants high risk twice as often as white defendants.” In 2015, Google photos would often tag black people as gorillas, and in 2018 this still was not well resolved, but Google reportedly was still using the workaround to remove all gorillas from the training data, and thus was not able to recognize real gorillas at all. Similar issues with recognizing non-white people have been found in many other systems. In 2016, Microsoft tested a chatbot that learned from Twitter, and it quickly picked up racist and sexist language.Because of such challenges, the effective use of machine learning may take longer to be adopted in other domains. Concern for fairness in machine learning, that is, reducing bias in machine learning and propelling its use for human good is increasingly expressed by artificial intelligence scientists, including Fei-Fei Li, who reminds engineers that \"There's nothing artificial about AI...It's inspired by people, it's created by people, and—most importantly—it impacts people. It is a powerful tool we are only just beginning to understand, and that is a profound responsibility.\"\n\nExplainability\nExplainable AI (XAI), or Interpretable AI, or Explainable Machine Learning (XML), is artificial intelligence (AI) in which humans can understand the decisions or predictions made by the AI. It contrasts with the \"black box\" concept in machine learning where even its designers cannot explain why an AI arrived at a specific decision. By refining the mental models of users of AI-powered systems and dismantling their misconceptions, XAI promises to help users perform more effectively. XAI may be an implementation of the social right to explanation.\n\nOverfitting\nSettling on a bad, overly complex theory gerrymandered to fit all the past training data is known as overfitting. Many systems attempt to reduce overfitting by rewarding a theory in accordance with how well it fits the data but penalizing the theory in accordance with how complex the theory is.\n\nOther limitations and vulnerabilities\nLearners can also disappoint by \"learning the wrong lesson\". A toy example is that an image classifier trained only on pictures of brown horses and black cats might conclude that all brown patches are likely to be horses. A real-world example is that, unlike humans, current image classifiers often do not primarily make judgments from the spatial relationship between components of the picture, and they learn relationships between pixels that humans are oblivious to, but that still correlate with images of certain types of real objects. Modifying these patterns on a legitimate image can result in \"adversarial\" images that the system misclassifies.Adversarial vulnerabilities can also result in nonlinear systems, or from non-pattern perturbations. For some systems, it is possible to change the output by only changing a single adversarially chosen pixel. Machine learning models are often vulnerable to manipulation and/or evasion via adversarial machine learning.Researchers have demonstrated how backdoors can be placed undetectably into classifying (e.g., for categories \"spam\" and well-visible \"not spam\" of posts) machine learning models which are often developed and/or trained by third parties. Parties can change the classification of any input, including in cases for which a type of data/software transparency is provided, possibly including white-box access.\n\nModel assessments\nClassification of machine learning models can be validated by accuracy estimation techniques like the holdout method, which splits the data in a training and test set (conventionally 2/3 training set and 1/3 test set designation) and evaluates the performance of the training model on the test set. In comparison, the K-fold-cross-validation method randomly partitions the data into K subsets and then K experiments are performed each respectively considering 1 subset for evaluation and the remaining K-1 subsets for training the model. In addition to the holdout and cross-validation methods, bootstrap, which samples n instances with replacement from the dataset, can be used to assess model accuracy.In addition to overall accuracy, investigators frequently report sensitivity and specificity meaning True Positive Rate (TPR) and True Negative Rate (TNR) respectively. Similarly, investigators sometimes report the false positive rate (FPR) as well as the false negative rate (FNR). However, these rates are ratios that fail to reveal their numerators and denominators. The total operating characteristic (TOC) is an effective method to express a model's diagnostic ability. TOC shows the numerators and denominators of the previously mentioned rates, thus TOC provides more information than the commonly used receiver operating characteristic (ROC) and ROC's associated area under the curve (AUC).\n\nEthics\nMachine learning poses a host of ethical questions. Systems that are trained on datasets collected with biases may exhibit these biases upon use (algorithmic bias), thus digitizing cultural prejudices. For example, in 1988, the UK's Commission for Racial Equality found that St. George's Medical School had been using a computer program trained from data of previous admissions staff and this program had denied nearly 60 candidates who were found to be either women or had non-European sounding names. Using job hiring data from a firm with racist hiring policies may lead to a machine learning system duplicating the bias by scoring job applicants by similarity to previous successful applicants. Another example includes predictive policing company Geolitica's predictive algorithm that resulted in “disproportionately high levels of over-policing in low-income and minority communities” after being trained with historical crime data.While responsible collection of data and documentation of algorithmic rules used by a system is considered a critical part of machine learning, some researchers blame lack of participation and representation of minority population in the field of AI for machine learning's vulnerability to biases. In fact, according to research carried out by the Computing Research Association (CRA) in 2021, “female faculty merely make up 16.1%” of all faculty members who focus on AI among several universities around the world. Furthermore, among the group of “new U.S. resident AI PhD graduates,” 45% identified as white, 22.4% as Asian, 3.2% as Hispanic, and 2.4% as African American, which further demonstrates a lack of diversity in the field of AI.AI can be well-equipped to make decisions in technical fields, which rely heavily on data and historical information. These decisions rely on objectivity and logical reasoning. Because human languages contain biases, machines trained on language corpora will necessarily also learn these biases.Other forms of ethical challenges, not related to personal biases, are seen in health care. There are concerns among health care professionals that these systems might not be designed in the public's interest but as income-generating machines. This is especially true in the United States where there is a long-standing ethical dilemma of improving health care, but also increasing profits. For example, the algorithms could be designed to provide patients with unnecessary tests or medication in which the algorithm's proprietary owners hold stakes. There is potential for machine learning in health care to provide professionals an additional tool to diagnose, medicate, and plan recovery paths for patients, but this requires these biases to be mitigated.\n\nHardware\nSince the 2010s, advances in both machine learning algorithms and computer hardware have led to more efficient methods for training deep neural networks (a particular narrow subdomain of machine learning) that contain many layers of non-linear hidden units. By 2019, graphic processing units (GPUs), often with AI-specific enhancements, had displaced CPUs as the dominant method of training large-scale commercial cloud AI. OpenAI estimated the hardware computing used in the largest deep learning projects from AlexNet (2012) to AlphaZero (2017), and found a 300,000-fold increase in the amount of compute required, with a doubling-time trendline of 3.4 months.\n\nNeuromorphic/Physical Neural Networks\nA physical neural network or Neuromorphic computer  is a type of artificial neural network in which an electrically adjustable material is used to emulate the function of a neural synapse. \"Physical\" neural network is used to emphasize the reliance on physical hardware used to emulate neurons as opposed to software-based approaches. More generally the term is applicable to other artificial neural networks in which a memristor or other electrically adjustable resistance material is used to emulate a neural synapse.\n\nEmbedded Machine Learning\nEmbedded Machine Learning is a sub-field of machine learning, where the machine learning model is run on embedded systems with limited computing resources such as wearable computers, edge devices and microcontrollers. Running machine learning model in embedded devices removes the need for transferring and storing data on cloud servers for further processing, henceforth, reducing data breaches and privacy leaks happening because of transferring data, and also minimizes theft of intellectual properties, personal data and business secrets. Embedded Machine Learning could be applied through several techniques including hardware acceleration, using approximate computing, optimization of machine learning models and many more.\n\nSoftware\nSoftware suites containing a variety of machine learning algorithms include the following:\n\nFree and open-source software\nProprietary software with free and open-source editions\nKNIME\nRapidMiner\n\nProprietary software\nJournals\nJournal of Machine Learning Research\nMachine Learning\nNature Machine Intelligence\nNeural Computation\nIEEE Transactions on Pattern Analysis and Machine Intelligence\n\nConferences\nAAAI Conference on Artificial Intelligence\nAssociation for Computational Linguistics (ACL)\nEuropean Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases (ECML PKDD)\nInternational Conference on Computational Intelligence Methods for Bioinformatics and Biostatistics (CIBB)\nInternational Conference on Machine Learning (ICML)\nInternational Conference on Learning Representations (ICLR)\nInternational Conference on Intelligent Robots and Systems (IROS)\nConference on Knowledge Discovery and Data Mining (KDD)\nConference on Neural Information Processing Systems (NeurIPS)\n\nSee also\nAutomated machine learning – Process of automating the application of machine learning\nBig data – Extremely large or complex datasets\nDifferentiable programming – Programming paradigm\nForce control\nList of important publications in machine learning\nList of datasets for machine-learning research\n\nReferences\nSources\nDomingos, Pedro (September 22, 2015). The Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World. Basic Books. ISBN 978-0465065707.\nNilsson, Nils (1998). Artificial Intelligence: A New Synthesis. Morgan Kaufmann. ISBN 978-1-55860-467-4. Archived from the original on 26 July 2020. Retrieved 18 November 2019.\nRussell, Stuart J.; Norvig, Peter (2003), Artificial Intelligence: A Modern Approach (2nd ed.), Upper Saddle River, New Jersey: Prentice Hall, ISBN 0-13-790395-2.\nPoole, David; Mackworth, Alan; Goebel, Randy (1998). Computational Intelligence: A Logical Approach. New York: Oxford University Press. ISBN 978-0-19-510270-3. Archived from the original on 26 July 2020. Retrieved 22 August 2020.\n\nFurther reading\nExternal links\n\n Quotations related to Machine learning at Wikiquote\nInternational Machine Learning Society\nmloss is an academic database of open-source machine learning software.",
    "Deep Learning": "Deep learning is the subset of machine learning methods based on artificial neural networks with representation learning. The adjective \"deep\" refers to the use of multiple layers in the network. Methods used can be either supervised, semi-supervised or unsupervised.Deep-learning architectures such as deep neural networks, deep belief networks, recurrent neural networks, convolutional neural networks and transformers have been applied to fields including computer vision, speech recognition, natural language processing, machine translation, bioinformatics, drug design, medical image analysis, climate science, material inspection and board game programs, where they have produced results comparable to and in some cases surpassing human expert performance.Artificial neural networks (ANNs) were inspired by information processing and distributed communication nodes in biological systems. ANNs have various differences from biological brains. Specifically, artificial neural networks tend to be static and symbolic, while the biological brain of most living organisms is dynamic (plastic) and analog. ANNs are generally seen as low quality models for brain function.\n\nDefinition\nDeep learning is a class of machine learning algorithms that: 199–200  uses multiple layers to progressively extract higher-level features from the raw input. For example, in image processing, lower layers may identify edges, while higher layers may identify the concepts relevant to a human such as digits or letters or faces.\nFrom another angle to view deep learning, deep learning refers to \"computer-simulate\" or \"automate\" human learning processes from a source (e.g., an image of dogs) to a learned object (dogs). Therefore, a notion coined as \"deeper\" learning or \"deepest\" learning makes sense. The deepest learning refers to the fully automatic learning from a source to a final learned object. A deeper learning thus refers to a mixed learning process: a human learning process from a source to a learned semi-object, followed by a computer learning process from the human learned semi-object to a final learned object.\n\nOverview\nMost modern deep learning models are based on multi-layered artificial neural networks such as convolutional neural networks and transformers, although they can also include propositional formulas or latent variables organized layer-wise in deep generative models such as the nodes in deep belief networks and deep Boltzmann machines.In deep learning, each level learns to transform its input data into a slightly more abstract and composite representation. In an image recognition application, the raw input may be a matrix of pixels; the first representational layer may abstract the pixels and encode edges; the second layer may compose and encode arrangements of edges; the third layer may encode a nose and eyes; and the fourth layer may recognize that the image contains a face. Importantly, a deep learning process can learn which features to optimally place in which level on its own. This does not eliminate the need for hand-tuning; for example, varying numbers of layers and layer sizes can provide different degrees of abstraction.The word \"deep\" in \"deep learning\" refers to the number of layers through which the data is transformed. More precisely, deep learning systems have a substantial credit assignment path (CAP) depth. The CAP is the chain of transformations from input to output. CAPs describe potentially causal connections between input and output. For a feedforward neural network, the depth of the CAPs is that of the network and is the number of hidden layers plus one (as the output layer is also parameterized). For recurrent neural networks, in which a signal may propagate through a layer more than once, the CAP depth is potentially unlimited. No universally agreed-upon threshold of depth divides shallow learning from deep learning, but most researchers agree that deep learning involves CAP depth higher than 2. CAP of depth 2 has been shown to be a universal approximator in the sense that it can emulate any function. Beyond that, more layers do not add to the function approximator ability of the network. Deep models (CAP > 2) are able to extract better features than shallow models and hence, extra layers help in learning the features effectively.\nDeep learning architectures can be constructed with a greedy layer-by-layer method. Deep learning helps to disentangle these abstractions and pick out which features improve performance.For supervised learning tasks, deep learning methods enable elimination of feature engineering, by translating the data into compact intermediate representations akin to principal components, and derive layered structures that remove redundancy in representation.\nDeep learning algorithms can be applied to unsupervised learning tasks. This is an important benefit because unlabeled data are more abundant than the labeled data. Examples of deep structures that can be trained in an unsupervised manner are deep belief networks.Machine learning models are now adept at identifying complex patterns in financial market data. Due to the benefits of artificial intelligence, investors are increasingly utilizing deep learning techniques to forecast and analyze trends in stock and foreign exchange markets.\n\nInterpretations\nDeep neural networks are generally interpreted in terms of the universal approximation theorem or probabilistic inference.The classic universal approximation theorem concerns the capacity of feedforward neural networks with a single hidden layer of finite size to approximate continuous functions. In 1989, the first proof was published by George Cybenko for sigmoid activation functions and was generalised to feed-forward multi-layer architectures in 1991 by Kurt Hornik. Recent work also showed that universal approximation also holds for non-bounded activation functions such as Kunihiko Fukushima's rectified linear unit.The universal approximation theorem for deep neural networks concerns the capacity of networks with bounded width but the depth is allowed to grow. Lu et al. proved that if the width of a deep neural network with ReLU activation is strictly larger than the input dimension, then the network can approximate any Lebesgue integrable function; if the width is smaller or equal to the input dimension, then a deep neural network is not a universal approximator.\nThe probabilistic interpretation derives from the field of machine learning. It features inference, as well as the optimization concepts of training and testing, related to fitting and generalization, respectively. More specifically, the probabilistic interpretation considers the activation nonlinearity as a cumulative distribution function. The probabilistic interpretation led to the introduction of dropout as regularizer in neural networks. The probabilistic interpretation was introduced by researchers including Hopfield, Widrow and Narendra and popularized in surveys such as the one by Bishop.\n\nHistory\nThere are two types of neural networks: feedforward neural networks (FNNs) and recurrent neural networks (RNNs). RNNs have cycles in their connectivity structure, FNNs don't. In the 1920s, Wilhelm Lenz and Ernst Ising created and analyzed the Ising model which is essentially a non-learning RNN architecture consisting of neuron-like threshold elements. In 1972, Shun'ichi Amari made this architecture adaptive. His learning RNN was popularised by John Hopfield in 1982. RNNs have become central for speech recognition and language processing.\nCharles Tappert writes that Frank Rosenblatt developed and explored all of the basic ingredients of the deep learning systems of today, referring to Rosenblatt's 1962 book which introduced multilayer perceptron (MLP) with 3 layers: an input layer, a hidden layer with randomized weights that did not learn, and an output layer. It also introduced variants, including a version with four-layer perceptrons where the last two layers have learned weights (and thus a proper multilayer perceptron).: section 16  In addition, term deep learning was proposed in 1986 by Rina Dechter although the history of its appearance is apparently more complicated.The first general, working learning algorithm for supervised, deep, feedforward, multilayer perceptrons was published by Alexey Ivakhnenko and Lapa in 1967. A 1971 paper described a deep network with eight layers trained by the group method of data handling.The first deep learning multilayer perceptron trained by stochastic gradient descent was published in 1967 by Shun'ichi Amari. In computer experiments conducted by Amari's student Saito, a five layer MLP with two modifiable layers learned  internal representations to classify non-linearily separable pattern classes. In 1987 Matthew Brand reported that wide 12-layer nonlinear perceptrons could be fully end-to-end trained to reproduce logic functions of nontrivial circuit depth via gradient descent on small batches of random input/output samples, but concluded that training time on contemporary hardware (sub-megaflop computers) made the technique impractical, and proposed using fixed random early layers as an input hash for a single modifiable layer.  Instead, subsequent developments in hardware and hyperparameter tunings have made end-to-end stochastic gradient descent the currently dominant training technique.\nIn 1970, Seppo Linnainmaa published the reverse mode of automatic differentiation of discrete connected networks of nested differentiable functions. This became known as backpropagation. It is an efficient application of the chain rule derived by Gottfried Wilhelm Leibniz in 1673 to networks of differentiable nodes. \nThe terminology \"back-propagating errors\" was actually introduced in 1962 by Rosenblatt, but he did not know how to implement this, although Henry J. Kelley had a continuous precursor of backpropagation already in 1960 in the context of control theory. In 1982, Paul Werbos applied backpropagation to MLPs in the way that has become standard. In 1985, David E. Rumelhart et al. published an experimental analysis of the technique.Deep learning architectures for convolutional neural networks (CNNs) with convolutional layers and downsampling layers began with the Neocognitron introduced by Kunihiko Fukushima in 1980. In 1969, he also introduced the ReLU (rectified linear unit) activation function. The rectifier has become the most popular activation function for CNNs and deep learning in general. CNNs have become an essential tool for computer vision.\nThe term Deep Learning was introduced to the machine learning community by Rina Dechter in 1986, and to artificial neural networks by Igor Aizenberg and colleagues in 2000, in the context of Boolean threshold neurons.In 1988, Wei Zhang et al. applied the backpropagation algorithm \nto a convolutional neural network (a simplified Neocognitron with convolutional interconnections between the image feature layers and the last fully connected layer) for alphabet recognition. They also proposed an implementation of the CNN with an optical computing system. \nIn 1989, Yann LeCun et al. applied backpropagation to a CNN with the purpose of recognizing handwritten ZIP codes on mail. While the algorithm worked, training required 3 days. Subsequently, Wei Zhang, et al. modified their model by removing the last fully connected layer and applied it for medical image object segmentation in 1991 and breast cancer detection in mammograms in 1994. LeNet-5 (1998), a 7-level CNN by Yann LeCun et al., that classifies digits, was applied by several banks to recognize hand-written numbers on checks  digitized in 32x32 pixel images.\nIn the 1980s, backpropagation did not work well for deep learning with long credit assignment paths. To overcome this problem, Jürgen Schmidhuber (1992) proposed a hierarchy of RNNs pre-trained one level at a time by self-supervised learning. It uses predictive coding  to learn internal representations at multiple self-organizing time scales. This can substantially facilitate downstream deep learning. The RNN hierarchy can be collapsed into a single RNN, by distilling a higher level chunker network into a lower level automatizer network. In 1993, a chunker solved a deep learning task whose depth exceeded 1000.In 1992, Jürgen Schmidhuber also published an alternative to RNNs which is now called a linear Transformer or a  Transformer with linearized self-attention (save for a normalization operator). It learns internal spotlights of attention: a slow feedforward neural network learns by gradient descent to control the fast weights of another neural network through outer products of self-generated activation patterns FROM and TO (which are now called key and value for self-attention). This fast weight attention mapping is applied to a query pattern.\nThe modern Transformer was introduced by Ashish Vaswani et al. in their 2017 paper \"Attention Is All You Need\". \nIt combines this with a softmax operator and a projection matrix.\nTransformers have increasingly become the model of choice for natural language processing. Many modern large language models such as ChatGPT, GPT-4, and BERT use it. Transformers are also increasingly being used in computer vision.In 1991, Jürgen Schmidhuber also published adversarial neural networks that contest with each other in the form of a zero-sum game, where one network's gain is the other network's loss. The first network is a generative model that models a probability distribution over output patterns. The second network learns by gradient descent to predict the reactions of the environment to these patterns. This was called \"artificial curiosity\". In 2014, this principle was used in a generative adversarial network (GAN) by Ian Goodfellow et al. Here the environmental reaction is 1 or 0 depending on whether the first network's output is in a given set. This can be used to create realistic deepfakes. Excellent image quality is achieved by Nvidia's StyleGAN (2018) based on the Progressive GAN by Tero Karras et al. Here the GAN generator is grown from small to large scale in a pyramidal fashion.\nSepp Hochreiter's diploma thesis (1991) was called \"one of the most important documents in the history of machine learning\" by his supervisor Schmidhuber. It not only tested the neural history compressor, but also identified and analyzed the vanishing gradient problem. Hochreiter proposed recurrent residual connections to solve this problem. This led to the deep learning method called long short-term memory (LSTM), published in 1997. LSTM recurrent neural networks can learn \"very deep learning\" tasks with long credit assignment paths that require memories of events that happened thousands of discrete time steps before. The \"vanilla LSTM\" with forget gate was introduced in 1999 by Felix Gers, Schmidhuber and Fred Cummins. LSTM has become the  most cited neural network of the 20th century.\nIn 2015, Rupesh Kumar Srivastava, Klaus Greff, and Schmidhuber used LSTM principles to create the Highway network, a feedforward neural network with hundreds of layers, much deeper than previous networks. 7 months later, Kaiming He, Xiangyu Zhang;  Shaoqing Ren, and Jian Sun won the ImageNet 2015 competition with an open-gated or gateless Highway network variant called Residual neural network. This has become the most cited neural network of the 21st century.In 1994, André de Carvalho, together with Mike Fairhurst and David Bisset, published experimental results of a multi-layer boolean neural network, also known as a weightless neural network, composed of a 3-layers self-organising feature extraction neural network module (SOFT) followed by a multi-layer classification neural network module (GSN), which were independently trained. Each layer in the feature extraction module extracted features with growing complexity regarding the previous layer.In 1995, Brendan Frey demonstrated that it was possible to train (over two days) a network containing six fully connected layers and several hundred hidden units using the wake-sleep algorithm, co-developed with Peter Dayan and Hinton.Since 1997, Sven Behnke extended the feed-forward hierarchical convolutional approach in the Neural Abstraction Pyramid by lateral and backward connections in order to flexibly incorporate context into decisions and iteratively resolve local ambiguities.\nSimpler models that use task-specific handcrafted features such as Gabor filters and support vector machines (SVMs) were a popular choice in the 1990s and 2000s, because of artificial neural network's (ANN) computational cost and a lack of understanding of how the brain wires its biological networks.\nBoth shallow and deep learning (e.g., recurrent nets) of ANNs for speech recognition have been explored for many years. These methods never outperformed non-uniform internal-handcrafting Gaussian mixture model/Hidden Markov model (GMM-HMM) technology based on generative models of speech trained discriminatively. Key difficulties have been analyzed, including gradient diminishing and weak temporal correlation structure in neural predictive models. Additional difficulties were the lack of training data and limited computing power. Most speech recognition researchers moved away from neural nets to pursue generative modeling. An exception was at SRI International in the late 1990s. Funded by the US government's NSA and DARPA, SRI studied deep neural networks in speech and speaker recognition. The speaker recognition team led by Larry Heck reported significant success with deep neural networks in speech processing in the 1998 National Institute of Standards and Technology Speaker Recognition evaluation. The SRI deep neural network was then deployed in the Nuance Verifier, representing the first major industrial application of deep learning. The principle of elevating \"raw\" features over hand-crafted optimization was first explored successfully in the architecture of deep autoencoder on the \"raw\" spectrogram or linear filter-bank features in the late 1990s, showing its superiority over the Mel-Cepstral features that contain stages of fixed transformation from spectrograms. The raw features of speech, waveforms, later produced excellent larger-scale results.Speech recognition was taken over by LSTM. In 2003, LSTM started to become competitive with traditional speech recognizers on certain tasks. In 2006, Alex Graves, Santiago Fernández, Faustino Gomez, and Schmidhuber combined it with connectionist temporal classification (CTC) in stacks of LSTM RNNs. In 2015, Google's speech recognition reportedly experienced a dramatic performance jump of 49% through CTC-trained LSTM, which they made available through Google Voice Search.The impact of deep learning in industry began in the early 2000s, when CNNs already processed an estimated 10% to 20% of all the checks written in the US, according to Yann LeCun. Industrial applications of deep learning to large-scale speech recognition started around 2010.\nIn 2006, publications by Geoff Hinton, Ruslan Salakhutdinov, Osindero and Teh showed how a many-layered feedforward neural network could be effectively pre-trained one layer at a time, treating each layer in turn as an unsupervised restricted Boltzmann machine, then fine-tuning it using supervised backpropagation. The papers referred to learning for deep belief nets.\nThe 2009 NIPS Workshop on Deep Learning for Speech Recognition was motivated by the limitations of deep generative models of speech, and the possibility that given more capable hardware and large-scale data sets that deep neural nets (DNN) might become practical. It was believed that pre-training DNNs using generative models of deep belief nets (DBN) would overcome the main difficulties of neural nets. However, it was discovered that replacing pre-training with large amounts of training data for straightforward backpropagation when using DNNs with large, context-dependent output layers produced error rates dramatically lower than then-state-of-the-art Gaussian mixture model (GMM)/Hidden Markov Model (HMM) and also than more-advanced generative model-based systems. The nature of the recognition errors produced by the two types of systems was characteristically different, offering technical insights into how to integrate deep learning into the existing highly efficient, run-time speech decoding system deployed by all major speech recognition systems. Analysis around 2009–2010, contrasting the GMM (and other generative speech models) vs. DNN models, stimulated early industrial investment in deep learning for speech recognition.  That analysis was done with comparable performance (less than 1.5% in error rate) between discriminative DNNs and generative models.\nIn 2010, researchers extended deep learning from TIMIT to large vocabulary speech recognition, by adopting large output layers of the DNN based on context-dependent HMM states constructed by decision trees.Deep learning is part of state-of-the-art systems in various disciplines, particularly computer vision and automatic speech recognition (ASR). Results on commonly used evaluation sets such as TIMIT (ASR) and MNIST (image classification), as well as a range of large-vocabulary speech recognition tasks have steadily improved. Convolutional neural networks (CNNs) were superseded for ASR by CTC for LSTM. but are more successful in computer vision.\nAdvances in hardware have driven renewed interest in deep learning. In 2009, Nvidia was involved in what was called the \"big bang\" of deep learning, \"as deep-learning neural networks were trained with Nvidia graphics processing units (GPUs)\". That year, Andrew Ng determined that GPUs could increase the speed of deep-learning systems by about 100 times. In particular, GPUs are well-suited for the matrix/vector computations involved in machine learning. GPUs speed up training algorithms by orders of magnitude, reducing running times from weeks to days. Further, specialized hardware and algorithm optimizations can be used for efficient processing of deep learning models.\n\nDeep learning revolution\nIn the late 2000s, deep learning started to outperform other methods in machine learning competitions.\nIn 2009, a long short-term memory trained by connectionist temporal classification (Alex Graves, Santiago Fernández, Faustino Gomez, and Jürgen Schmidhuber, 2006) was the first RNN to win pattern recognition contests, winning three competitions in connected handwriting recognition. Google later used CTC-trained LSTM for speech recognition on the smartphone.Significant impacts in image or object recognition were felt from 2011 to 2012. Although CNNs trained by backpropagation had been around for decades, and GPU implementations of NNs for years, including CNNs, faster implementations of CNNs on GPUs were needed to progress on computer vision. In 2011, the DanNet by Dan Ciresan, Ueli Meier, Jonathan Masci, Luca Maria Gambardella, and Jürgen Schmidhuber achieved for the first time superhuman performance in a visual pattern recognition contest, outperforming traditional methods by a factor of 3. Also in 2011, DanNet won the ICDAR Chinese handwriting contest, and in May 2012, it won the ISBI image segmentation contest. Until 2011, CNNs did not play a major role at computer vision conferences, but in June 2012, a paper by Ciresan et al. at the leading conference CVPR showed how max-pooling CNNs on GPU can dramatically improve many vision benchmark records.  In September 2012, DanNet also won the ICPR contest on analysis of large medical images for cancer detection, and in the following year also the MICCAI Grand Challenge on the same topic. In October 2012, the similar AlexNet by Alex Krizhevsky, Ilya Sutskever, and Geoffrey Hinton won the large-scale ImageNet competition by a significant margin over shallow machine learning methods. \nThe VGG-16 network by Karen Simonyan and Andrew Zisserman further reduced the error rate and\nwon the ImageNet 2014 competition, following a similar trend in large-scale speech recognition.\nImage classification was then extended to the more challenging task of generating descriptions (captions) for images, often as a combination of CNNs and LSTMs.In 2012, a team led by George E. Dahl won the \"Merck Molecular Activity Challenge\" using multi-task deep neural networks to predict the biomolecular target of one drug. In 2014, Sepp Hochreiter's group used deep learning to detect off-target and toxic effects of environmental chemicals in nutrients, household products and drugs and won the \"Tox21 Data Challenge\" of NIH, FDA and NCATS.In 2016, Roger Parloff mentioned a \"deep learning revolution\" that has transformed the AI industry.In March 2019, Yoshua Bengio, Geoffrey Hinton and Yann LeCun were awarded the Turing Award for conceptual and engineering breakthroughs that have made deep neural networks a critical component of computing.\n\nNeural networks\nArtificial neural networks (ANNs) or connectionist systems are computing systems inspired by the biological neural networks that constitute animal brains. Such systems learn (progressively improve their ability) to do tasks by considering examples, generally without task-specific programming. For example, in image recognition, they might learn to identify images that contain cats by analyzing example images that have been manually labeled as \"cat\" or \"no cat\" and using the analytic results to identify cats in other images. They have found most use in applications difficult to express with a traditional computer algorithm using rule-based programming.\nAn ANN is based on a collection of connected units called artificial neurons, (analogous to biological neurons in a biological brain). Each connection (synapse) between neurons can transmit a signal to another neuron. The receiving (postsynaptic) neuron can process the signal(s) and then signal downstream neurons connected to it. Neurons may have state, generally represented by real numbers, typically between 0 and 1. Neurons and synapses may also have a weight that varies as learning proceeds, which can increase or decrease the strength of the signal that it sends downstream.\nTypically, neurons are organized in layers. Different layers may perform different kinds of transformations on their inputs. Signals travel from the first (input), to the last (output) layer, possibly after traversing the layers multiple times.\nThe original goal of the neural network approach was to solve problems in the same way that a human brain would. Over time, attention focused on matching specific mental abilities, leading to deviations from biology such as backpropagation, or passing information in the reverse direction and adjusting the network to reflect that information.\nNeural networks have been used on a variety of tasks, including computer vision, speech recognition, machine translation, social network filtering, playing board and video games and medical diagnosis.\nAs of 2017, neural networks typically have a few thousand to a few million units and millions of connections. Despite this number being several order of magnitude less than the number of neurons on a human brain, these networks can perform many tasks at a level beyond that of humans (e.g., recognizing faces, or playing \"Go\").\n\nDeep neural networks\nA deep neural network (DNN) is an artificial neural network (ANN) with multiple layers between the input and output layers. There are different types of neural networks but they always consist of the same components: neurons, synapses, weights, biases, and functions. These components as a whole function in a way that mimics functions of the human brain, and can be trained like any other ML algorithm.For example, a DNN that is trained to recognize dog breeds will go over the given image and calculate the probability that the dog in the image is a certain breed. The user can review the results and select which probabilities the network should display (above a certain threshold, etc.) and return the proposed label. Each mathematical manipulation as such is considered a layer, and complex DNN have many layers, hence the name \"deep\" networks.\nDNNs can model complex non-linear relationships. DNN architectures generate compositional models where the object is expressed as a layered composition of primitives. The extra layers enable composition of features from lower layers, potentially modeling complex data with fewer units than a similarly performing shallow network. For instance, it was proved that sparse multivariate polynomials are exponentially easier to approximate with DNNs than with shallow networks.Deep architectures include many variants of a few basic approaches. Each architecture has found success in specific domains. It is not always possible to compare the performance of multiple architectures, unless they have been evaluated on the same data sets.\nDNNs are typically feedforward networks in which data flows from the input layer to the output layer without looping back. At first, the DNN creates a map of virtual neurons and assigns random numerical values, or \"weights\", to connections between them. The weights and inputs are multiplied and return an output between 0 and 1. If the network did not accurately recognize a particular pattern, an algorithm would adjust the weights. That way the algorithm can make certain parameters more influential, until it determines the correct mathematical manipulation to fully process the data.\nRecurrent neural networks (RNNs), in which data can flow in any direction, are used for applications such as language modeling. Long short-term memory is particularly effective for this use.Convolutional deep neural networks (CNNs) are used in computer vision. CNNs also have been applied to acoustic modeling for automatic speech recognition (ASR).\n\nChallenges\nAs with ANNs, many issues can arise with naively trained DNNs. Two common issues are overfitting and computation time.\nDNNs are prone to overfitting because of the added layers of abstraction, which allow them to model rare dependencies in the training data. Regularization methods such as Ivakhnenko's unit pruning or weight decay (\n  \n    \n      \n        \n          ℓ\n          \n            2\n          \n        \n      \n    \n    {\\displaystyle \\ell _{2}}\n  -regularization) or sparsity (\n  \n    \n      \n        \n          ℓ\n          \n            1\n          \n        \n      \n    \n    {\\displaystyle \\ell _{1}}\n  -regularization) can be applied during training to combat overfitting. Alternatively dropout regularization randomly omits units from the hidden layers during training. This helps to exclude rare dependencies. Finally, data can be augmented via methods such as cropping and rotating such that smaller training sets can be increased in size to reduce the chances of overfitting.DNNs must consider many training parameters, such as the size (number of layers and number of units per layer), the learning rate, and initial weights. Sweeping through the parameter space for optimal parameters may not be feasible due to the cost in time and computational resources. Various tricks, such as batching (computing the gradient on several training examples at once rather than individual examples) speed up computation. Large processing capabilities of many-core architectures (such as GPUs or the Intel Xeon Phi) have produced significant speedups in training, because of the suitability of such processing architectures for the matrix and vector computations.Alternatively, engineers may look for other types of neural networks with more straightforward and convergent training algorithms. CMAC (cerebellar model articulation controller) is one such kind of neural network. It doesn't require learning rates or randomized initial weights. The training process can be guaranteed to converge in one step with a new batch of data, and the computational complexity of the training algorithm is linear with respect to the number of neurons involved.\n\nHardware\nSince the 2010s, advances in both machine learning algorithms and computer hardware have led to more efficient methods for training deep neural networks that contain many layers of non-linear hidden units and a very large output layer. By 2019, graphic processing units (GPUs), often with AI-specific enhancements, had displaced CPUs as the dominant method of training large-scale commercial cloud AI. OpenAI estimated the hardware computation used in the largest deep learning projects from AlexNet (2012) to AlphaZero (2017), and found a 300,000-fold increase in the amount of computation required, with a doubling-time trendline of 3.4 months.Special electronic circuits called deep learning processors were designed to speed up deep learning algorithms. Deep learning processors include neural processing units (NPUs) in Huawei cellphones and cloud computing servers such as tensor processing units (TPU) in the Google Cloud Platform. Cerebras Systems has also built a dedicated system to handle large deep learning models, the CS-2, based on the largest processor in the industry, the second-generation Wafer Scale Engine (WSE-2).Atomically thin semiconductors are considered promising for energy-efficient deep learning hardware where the same basic device structure is used for both logic operations and data storage.\nIn 2020, Marega et al. published experiments with a large-area active channel material for developing logic-in-memory devices and circuits based on floating-gate field-effect transistors (FGFETs).In 2021, J. Feldmann et al. proposed an integrated photonic hardware accelerator for parallel convolutional processing. The authors identify two key advantages of integrated photonics over its electronic counterparts: (1) massively parallel data transfer through wavelength division multiplexing in conjunction with frequency combs, and (2) extremely high data modulation speeds. Their system can execute trillions of multiply-accumulate operations per second, indicating the potential of integrated photonics in data-heavy AI applications.\n\nApplications\nAutomatic speech recognition\nLarge-scale automatic speech recognition is the first and most convincing successful case of deep learning. LSTM RNNs can learn \"Very Deep Learning\" tasks that involve multi-second intervals containing speech events separated by thousands of discrete time steps, where one time step corresponds to about 10 ms. LSTM with forget gates is competitive with traditional speech recognizers on certain tasks.The initial success in speech recognition was based on small-scale recognition tasks based on TIMIT. The data set contains 630 speakers from eight major dialects of American English, where each speaker reads 10 sentences. Its small size lets many configurations be tried. More importantly, the TIMIT task concerns phone-sequence recognition, which, unlike word-sequence recognition, allows weak phone bigram language models. This lets the strength of the acoustic modeling aspects of speech recognition be more easily analyzed. The error rates listed below, including these early results and measured as percent phone error rates (PER), have been summarized since 1991.\n\nThe debut of DNNs for speaker recognition in the late 1990s and speech recognition around 2009-2011 and of LSTM around 2003–2007, accelerated progress in eight major areas:\nScale-up/out and accelerated DNN training and decoding\nSequence discriminative training\nFeature processing by deep models with solid understanding of the underlying mechanisms\nAdaptation of DNNs and related deep models\nMulti-task and transfer learning by DNNs and related deep models\nCNNs and how to design them to best exploit domain knowledge of speech\nRNN and its rich LSTM variants\nOther types of deep models including tensor-based models and integrated deep generative/discriminative models.All major commercial speech recognition systems (e.g., Microsoft Cortana, Xbox, Skype Translator, Amazon Alexa, Google Now, Apple Siri, Baidu and iFlyTek voice search, and a range of Nuance speech products, etc.) are based on deep learning.\n\nImage recognition\nA common evaluation set for image classification is the MNIST database data set. MNIST is composed of handwritten digits and includes 60,000 training examples and 10,000 test examples. As with TIMIT, its small size lets users test multiple configurations. A comprehensive list of results on this set is available.Deep learning-based image recognition has become \"superhuman\", producing more accurate results than human contestants. This first occurred in 2011 in recognition of traffic signs, and in 2014, with recognition of human faces.Deep learning-trained vehicles now interpret 360° camera views. Another example is Facial Dysmorphology Novel Analysis (FDNA) used to analyze cases of human malformation connected to a large database of genetic syndromes.\n\nVisual art processing\nClosely related to the progress that has been made in image recognition is the increasing application of deep learning techniques to various visual art tasks. DNNs have proven themselves capable, for example, of\n\nidentifying the style period of a given painting\nNeural Style Transfer –  capturing the style of a given artwork and applying it in a visually pleasing manner to an arbitrary photograph or video\ngenerating striking imagery based on random visual input fields.\n\nNatural language processing\nNeural networks have been used for implementing language models since the early 2000s. LSTM helped to improve machine translation and language modeling.Other key techniques in this field are negative sampling and word embedding. Word embedding, such as word2vec, can be thought of as a representational layer in a deep learning architecture that transforms an atomic word into a positional representation of the word relative to other words in the dataset; the position is represented as a point in a vector space. Using word embedding as an RNN input layer allows the network to parse sentences and phrases using an effective compositional vector grammar. A compositional vector grammar can be thought of as probabilistic context free grammar (PCFG) implemented by an RNN. Recursive auto-encoders built atop word embeddings can assess sentence similarity and detect paraphrasing. Deep neural architectures provide the best results for constituency parsing, sentiment analysis, information retrieval, spoken language understanding, machine translation, contextual entity linking, writing style recognition, named-entity recognition (token classification), text classification, and others.Recent developments generalize word embedding to sentence embedding.\nGoogle Translate (GT) uses a large end-to-end long short-term memory (LSTM) network. Google Neural Machine Translation (GNMT) uses an example-based machine translation method in which the system \"learns from millions of examples\". It translates \"whole sentences at a time, rather than pieces\". Google Translate supports over one hundred languages. The network encodes the \"semantics of the sentence rather than simply memorizing phrase-to-phrase translations\". GT uses English as an intermediate between most language pairs.\n\nDrug discovery and toxicology\nA large percentage of candidate drugs fail to win regulatory approval. These failures are caused by insufficient efficacy (on-target effect), undesired interactions (off-target effects), or unanticipated toxic effects. Research has explored use of deep learning to predict the biomolecular targets, off-targets, and toxic effects of environmental chemicals in nutrients, household products and drugs.AtomNet is a deep learning system for structure-based rational drug design. AtomNet was used to predict novel candidate biomolecules for disease targets such as the Ebola virus and multiple sclerosis.In 2017 graph neural networks were used for the first time to predict various properties of molecules in a large toxicology data set. In 2019, generative neural networks were used to produce molecules that were validated experimentally all the way into mice.\n\nCustomer relationship management\nDeep reinforcement learning has been used to approximate the value of possible direct marketing actions, defined in terms of RFM variables. The estimated value function was shown to have a natural interpretation as customer lifetime value.\n\nRecommendation systems\nRecommendation systems have used deep learning to extract meaningful features for a latent factor model for content-based music and journal recommendations. Multi-view deep learning has been applied for learning user preferences from multiple domains. The model uses a hybrid collaborative and content-based approach and enhances recommendations in multiple tasks.\n\nBioinformatics\nAn autoencoder ANN was used in bioinformatics, to predict gene ontology annotations and gene-function relationships.In medical informatics, deep learning was used to predict sleep quality based on data from wearables and predictions of health complications from electronic health record data.\n\nDeep Neural Network Estimations\nDeep neural networks (DNN) can be used to estimate the entropy of a stochastic process and called Neural Joint Entropy Estimator (NJEE). Such an estimation provides insights on the affects of input random variables on an independent random variable. Practically, the DNN is trained as a classifier that maps an input vector or matrix X to an output probability distribution over the possible classes of random variable Y, given input X. For example, in image classification tasks, the NJEE maps a vector of pixels' color values to probabilities over possible image classes. In practice, the probability distribution of Y is obtained by a Softmax layer with number of nodes that is equal to the alphabet size of Y. NJEE uses continuously differentiable activation functions, such that the conditions for the universal approximation theorem holds. It is shown that this method provides a strongly consistent estimator and outperforms other methods in case of large alphabet sizes.\n\nMedical image analysis\nDeep learning has been shown to produce competitive results in medical application such as cancer cell classification, lesion detection, organ segmentation and image enhancement. Modern deep learning tools demonstrate the high accuracy of detecting various diseases and the helpfulness of their use by specialists to improve the diagnosis efficiency.\n\nMobile advertising\nFinding the appropriate mobile audience for mobile advertising is always challenging, since many data points must be considered and analyzed before a target segment can be created and used in ad serving by any ad server. Deep learning has been used to interpret large, many-dimensioned advertising datasets. Many data points are collected during the request/serve/click internet advertising cycle. This information can form the basis of machine learning to improve ad selection.\n\nImage restoration\nDeep learning has been successfully applied to inverse problems such as denoising, super-resolution, inpainting, and film colorization. These applications include learning methods such as \"Shrinkage Fields for Effective Image Restoration\" which trains on an image dataset, and Deep Image Prior, which trains on the image that needs restoration.\n\nFinancial fraud detection\nDeep learning is being successfully applied to financial fraud detection, tax evasion detection, and anti-money laundering.\n\nMaterials science\nIn November 2023, researchers at Google DeepMind and Lawrence Berkeley National Laboratory announced that they had developed an AI system known as GNoME. This system has contributed to materials science by discovering over 2 million new materials within a relatively short timeframe. GNoME employs deep learning techniques to efficiently explore potential material structures, achieving a significant increase in the identification of stable inorganic crystal structures. The system's predictions were validated through autonomous robotic experiments, demonstrating a noteworthy success rate of 71%. The data of newly discovered materials is publicly available through the Materials Project database, offering researchers the opportunity to identify materials with desired properties for various applications. This development has implications for the future of scientific discovery and the integration of AI in material science research, potentially expediting material innovation and reducing costs in product development. The use of AI and deep learning suggests the possibility of minimizing or eliminating manual lab experiments and allowing scientists to focus more on the design and analysis of unique compounds.\n\nMilitary\nThe United States Department of Defense applied deep learning to train robots in new tasks through observation.\n\nPartial differential equations\nPhysics informed neural networks have been used to solve partial differential equations in both forward and inverse problems in a data driven manner. One example is the reconstructing fluid flow governed by the Navier-Stokes equations. Using physics informed neural networks does not require the often expensive mesh generation that conventional CFD methods relies on.\n\nImage reconstruction\nImage reconstruction is the reconstruction of the underlying images from the image-related measurements. Several works showed the better and superior performance of the deep learning methods compared to analytical methods for various applications, e.g., spectral imaging  and ultrasound imaging.\n\nEpigenetic clock\nAn epigenetic clock is a biochemical test that can be used to measure age. Galkin et al. used deep neural networks to train an epigenetic aging clock of unprecedented accuracy using >6,000 blood samples. The clock uses information from 1000 CpG sites and predicts people with certain conditions older than healthy controls: IBD, frontotemporal dementia, ovarian cancer, obesity. The aging clock was planned to be released for public use in 2021 by an Insilico Medicine spinoff company Deep Longevity.\n\nRelation to human cognitive and brain development\nDeep learning is closely related to a class of theories of brain development (specifically, neocortical development) proposed by cognitive neuroscientists in the early 1990s. These developmental theories were instantiated in computational models, making them predecessors of deep learning systems. These developmental models share the property that various proposed learning dynamics in the brain (e.g., a wave of nerve growth factor) support the self-organization somewhat analogous to the neural networks utilized in deep learning models. Like the neocortex, neural networks employ a hierarchy of layered filters in which each layer considers information from a prior layer (or the operating environment), and then passes its output (and possibly the original input), to other layers. This process yields a self-organizing stack of transducers, well-tuned to their operating environment. A 1995 description stated, \"...the infant's brain seems to organize itself under the influence of waves of so-called trophic-factors ... different regions of the brain become connected sequentially, with one layer of tissue maturing before another and so on until the whole brain is mature\".A variety of approaches have been used to investigate the plausibility of deep learning models from a neurobiological perspective. On the one hand, several variants of the backpropagation algorithm have been proposed in order to increase its processing realism. Other researchers have argued that unsupervised forms of deep learning, such as those based on hierarchical generative models and deep belief networks, may be closer to biological reality. In this respect, generative neural network models have been related to neurobiological evidence about sampling-based processing in the cerebral cortex.Although a systematic comparison between the human brain organization and the neuronal encoding in deep networks has not yet been established, several analogies have been reported. For example, the computations performed by deep learning units could be similar to those of actual neurons and neural populations. Similarly, the representations developed by deep learning models are similar to those measured in the primate visual system both at the single-unit and at the population levels.\n\nCommercial activity\nFacebook's AI lab performs tasks such as automatically tagging uploaded pictures with the names of the people in them.Google's DeepMind Technologies developed a system capable of learning how to play Atari video games using only pixels as data input. In 2015 they demonstrated their AlphaGo system, which learned the game of Go well enough to beat a professional Go player. Google Translate uses a neural network to translate between more than 100 languages.\nIn 2017, Covariant.ai was launched, which focuses on integrating deep learning into factories.As of 2008, researchers at The University of Texas at Austin (UT) developed a machine learning framework called Training an Agent Manually via Evaluative Reinforcement, or TAMER, which proposed new methods for robots or computer programs to learn how to perform tasks by interacting with a human instructor. First developed as TAMER, a new algorithm called Deep TAMER was later introduced in 2018 during a collaboration between U.S. Army Research Laboratory (ARL) and UT researchers. Deep TAMER used deep learning to provide a robot with the ability to learn new tasks through observation. Using Deep TAMER, a robot learned a task with a human trainer, watching video streams or observing a human perform a task in-person. The robot later practiced the task with the help of some coaching from the trainer, who provided feedback such as \"good job\" and \"bad job\".\n\nCriticism and comment\nDeep learning has attracted both criticism and comment, in some cases from outside the field of computer science.\n\nTheory\nA main criticism concerns the lack of theory surrounding some methods. Learning in the most common deep architectures is implemented using well-understood gradient descent. However, the theory surrounding other algorithms, such as contrastive divergence is less clear. (e.g., Does it converge? If so, how fast? What is it approximating?) Deep learning methods are often looked at as a black box, with most confirmations done empirically, rather than theoretically.Others point out that deep learning should be looked at as a step towards realizing strong AI, not as an all-encompassing solution. Despite the power of deep learning methods, they still lack much of the functionality needed to realize this goal entirely. Research psychologist Gary Marcus noted:\n\nRealistically, deep learning is only part of the larger challenge of building intelligent machines. Such techniques lack ways of representing causal relationships (...) have no obvious ways of performing logical inferences, and they are also still a long way from integrating abstract knowledge, such as information about what objects are, what they are for, and how they are typically used. The most powerful A.I. systems, like Watson (...) use techniques like deep learning as just one element in a very complicated ensemble of techniques, ranging from the statistical technique of Bayesian inference to deductive reasoning.\n\nIn further reference to the idea that artistic sensitivity might be inherent in relatively low levels of the cognitive hierarchy, a published series of graphic representations of the internal states of deep (20-30 layers) neural networks attempting to discern within essentially random data the images on which they were trained demonstrate a visual appeal: the original research notice received well over 1,000 comments, and was the subject of what was for a time the most frequently accessed article on The Guardian's website.\n\nErrors\nSome deep learning architectures display problematic behaviors, such as confidently classifying unrecognizable images as belonging to a familiar category of ordinary images (2014) and misclassifying minuscule perturbations of correctly classified images (2013). Goertzel hypothesized that these behaviors are due to limitations in their internal representations and that these limitations would inhibit integration into heterogeneous multi-component artificial general intelligence (AGI) architectures. These issues may possibly be addressed by deep learning architectures that internally form states homologous to image-grammar decompositions of observed entities and events. Learning a grammar (visual or linguistic) from training data would be equivalent to restricting the system to commonsense reasoning that operates on concepts in terms of grammatical production rules and is a basic goal of both human language acquisition and artificial intelligence (AI).\n\nCyber threat\nAs deep learning moves from the lab into the world, research and experience show that artificial neural networks are vulnerable to hacks and deception. By identifying patterns that these systems use to function, attackers can modify inputs to ANNs in such a way that the ANN finds a match that human observers would not recognize. For example, an attacker can make subtle changes to an image such that the ANN finds a match even though the image looks to a human nothing like the search target. Such manipulation is termed an \"adversarial attack\".In 2016 researchers used one ANN to doctor images in trial and error fashion, identify another's focal points, and thereby generate images that deceived it. The modified images looked no different to human eyes. Another group showed that printouts of doctored images then photographed successfully tricked an image classification system. One defense is reverse image search, in which a possible fake image is submitted to a site such as TinEye that can then find other instances of it. A refinement is to search using only parts of the image, to identify images from which that piece may have been taken.Another group showed that certain psychedelic spectacles could fool a facial recognition system into thinking ordinary people were celebrities, potentially allowing one person to impersonate another. In 2017 researchers added stickers to stop signs and caused an ANN to misclassify them.ANNs can however be further trained to detect attempts at deception, potentially leading attackers and defenders into an arms race similar to the kind that already defines the malware defense industry. ANNs have been trained to defeat ANN-based anti-malware software by repeatedly attacking a defense with malware that was continually altered by a genetic algorithm until it tricked the anti-malware while retaining its ability to damage the target.In 2016, another group demonstrated that certain sounds could make the Google Now voice command system open a particular web address, and hypothesized that this could \"serve as a stepping stone for further attacks (e.g., opening a web page hosting drive-by malware)\".In \"data poisoning\", false data is continually smuggled into a machine learning system's training set to prevent it from achieving mastery.\n\nData collection ethics\nMost Deep Learning systems rely on training and verification data that is generated and/or annotated by humans. It has been argued in media philosophy that not only low-paid clickwork (e.g. on Amazon Mechanical Turk) is regularly deployed for this purpose, but also implicit forms of human microwork that are often not recognized as such. The philosopher Rainer Mühlhoff distinguishes five types of \"machinic capture\" of human microwork to generate training data: (1) gamification (the embedding of annotation or computation tasks in the flow of a game), (2) \"trapping and tracking\" (e.g. CAPTCHAs for image recognition or click-tracking on Google search results pages), (3) exploitation of social motivations (e.g. tagging faces on Facebook to obtain labeled facial images), (4) information mining (e.g. by leveraging quantified-self devices such as activity trackers) and (5) clickwork.Mühlhoff argues that in most commercial end-user applications of Deep Learning such as Facebook's face recognition system, the need for training data does not stop once an ANN is trained. Rather, there is a continued demand for human-generated verification data to constantly calibrate and update the ANN. For this purpose, Facebook introduced the feature that once a user is automatically recognized in an image, they receive a notification. They can choose whether or not they like to be publicly labeled on the image, or tell Facebook that it is not them in the picture. This user interface is a mechanism to generate \"a constant stream of verification data\" to further train the network in real-time. As Mühlhoff argues, the involvement of human users to generate training and verification data is so typical for most commercial end-user applications of Deep Learning that such systems may be referred to as \"human-aided artificial intelligence\".\n\nSee also\nApplications of artificial intelligence\nComparison of deep learning software\nCompressed sensing\nDifferentiable programming\nEcho state network\nList of artificial intelligence projects\nLiquid state machine\nList of datasets for machine-learning research\nReservoir computing\nScale space and deep learning\nSparse coding\nStochastic parrot\n\nReferences\n\n\n== Further reading ==",
    "Neural Networks": "A neural network is an interconnected population of biological neurons (typically containing multiple neural circuits), sometimes also called a biological neural network, or a network of artificial neurons or nodes in the case of an artificial neural network.Biological neural networks are studied to understand the organization and functioning of nervous systems, while artificial neural networks are used model biological systems, or to solve artificial intelligence (AI) problems.\n\nOverview\nA biological neural network is composed of a group of chemically connected or functionally associated neurons. A single neuron may be connected to many other neurons and the total number of neurons and connections in a network may be extensive. Connections, called synapses, are usually formed from axons to dendrites, though dendrodendritic synapses and other connections are possible. Apart from electrical signalling, there are other forms of signalling that arise from neurotransmitter diffusion.\nArtificial intelligence, cognitive modelling, and artificial neural networks are information processing paradigms inspired by how biological neural systems process data. Artificial intelligence and cognitive modelling try to simulate some properties of biological neural networks. In the artificial intelligence field, artificial neural networks have been applied successfully to speech recognition, image analysis and adaptive control, in order to construct software agents (in computer and video games) or autonomous robots.\nNeural network theory has served to identify better how the neurons in the brain function and provide the basis for efforts to create artificial intelligence.\n\nHistory\nThe preliminary theoretical base for contemporary neural networks was independently proposed by Alexander Bain (1873) and William James (1890). In their work, both thoughts and body activity resulted from interactions among neurons within the brain.\n\nFor Bain, every activity led to the firing of a certain set of neurons. When activities were repeated, the connections between those neurons strengthened. According to his theory, this repetition was what led to the formation of memory. The general scientific community at the time was skeptical of Bain's theory because it required what appeared to be an inordinate number of neural connections within the brain. It is now apparent that the brain is exceedingly complex and that the same brain “wiring” can handle multiple problems and inputs.\nJames' theory was similar to Bain's; however, he suggested that memories and actions resulted from electrical currents flowing among the neurons in the brain. His model, by focusing on the flow of electrical currents, did not require individual neural connections for each memory or action.\nC. S. Sherrington (1898) conducted experiments to test James' theory. He ran electrical currents down the spinal cords of rats. However, instead of demonstrating an increase in electrical current as projected by James, Sherrington found that the electrical current strength decreased as the testing continued over time. Importantly, this work led to the discovery of the concept of habituation. \nMcCulloch and Pitts  (1943) also created a computational model for neural networks based on mathematics and algorithms. They called this model threshold logic. These early models paved the way for neural network research to split into two distinct approaches. One approach focused on biological processes in the brain and the other focused on the application of neural networks to artificial intelligence.\nThe parallel distributed processing of the mid-1980s became popular under the name connectionism. The text by Rumelhart and McClelland (1986) provided a full exposition on the use of connectionism in computers to simulate neural processes.\nArtificial neural networks, as used in artificial intelligence, have traditionally been viewed as simplified models of neural processing in the brain, even though the relation between this model and brain biological architecture is debated, as it is not clear to what degree artificial neural networks mirror brain function.\n\nNeuroscience\nTheoretical and computational neuroscience is the field concerned with the analysis and computational modeling of biological neural systems.\nSince neural systems are intimately related to cognitive processes and behaviour, the field is closely related to cognitive and behavioural modeling.\nThe aim of the field is to create models of biological neural systems in order to understand how biological systems work. To gain this understanding, neuroscientists strive to make a link between observed biological processes (data), biologically plausible mechanisms for neural processing and learning (biological neural network models) and theory (statistical learning theory and information theory).\n\nTypes of models\nMany models are used; defined at different levels of abstraction, and modeling different aspects of neural systems. They range from models of the short-term behaviour of individual neurons, through models of the dynamics of neural circuitry arising from interactions between individual neurons, to models of behaviour arising from abstract neural modules that represent complete subsystems. These include models of the long-term and short-term plasticity of neural systems and their relation to learning and memory, from the individual neuron to the system level.\n\nConnectivity\nIn August 2020 scientists reported that bi-directional connections, or added appropriate feedback connections, can accelerate and improve communication between and in modular neural networks of the brain's cerebral cortex and lower the threshold for their successful communication. They showed that adding feedback connections between a resonance pair can support successful propagation of a single pulse packet throughout the entire network.\n\nRecent improvements\nWhile initially research had been concerned mostly with the electrical characteristics of neurons, a particularly important part of the investigation in recent years has been the exploration of the role of neuromodulators such as dopamine, acetylcholine, and serotonin on behaviour and learning.Biophysical models, such as BCM theory, has been important in understanding mechanisms for synaptic plasticity, and have had applications in both computer science and neuroscience.\n\nSee also\nAdaptive resonance theory\nBiological cybernetics\nBiologically inspired computing\nCognitive architecture\nCognitive science\nConnectomics\nCultured neuronal networks\nParallel constraint satisfaction processes\nSimulated reality\n\n\n== References ==",
    "Reinforcement Learning": "Reinforcement learning (RL) is an interdisciplinary area of machine learning and optimal control concerned with how an intelligent agent ought to take actions in a dynamic environment in order to maximize the cumulative reward. Reinforcement learning is one of three basic machine learning paradigms, alongside supervised learning and unsupervised learning.\nReinforcement learning differs from supervised learning in not needing labelled input/output pairs to be presented, and in not needing sub-optimal actions to be explicitly corrected. Instead the focus is on finding a balance between exploration (of uncharted territory) and exploitation (of current knowledge) with the goal of maximizing the long term reward, whose feedback might be incomplete or delayed.\nThe environment is typically stated in the form of a Markov decision process (MDP), because many reinforcement learning algorithms for this context use dynamic programming techniques. The main difference between the classical dynamic programming methods and reinforcement learning algorithms is that the latter do not assume knowledge of an exact mathematical model of the Markov decision process and they target large Markov decision processes where exact methods become infeasible.\n\nIntroduction\nDue to its generality, reinforcement learning is studied in many disciplines, such as game theory, control theory, operations research, information theory, simulation-based optimization, multi-agent systems, swarm intelligence, and statistics. In the operations research and control literature, reinforcement learning is called approximate dynamic programming, or neuro-dynamic programming. The problems of interest in reinforcement learning have also been studied in the theory of optimal control, which is concerned mostly with the existence and characterization of optimal solutions, and algorithms for their exact computation, and less with learning or approximation, particularly in the absence of a mathematical model of the environment.\nBasic reinforcement learning is modeled as a Markov decision process:\n\na set of environment and agent states, \n  \n    \n      \n        \n          \n            S\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {S}}}\n  ;\na set of actions, \n  \n    \n      \n        \n          \n            A\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {A}}}\n  , of the agent;\n\n  \n    \n      \n        \n          P\n          \n            a\n          \n        \n        (\n        s\n        ,\n        \n          s\n          ′\n        \n        )\n        =\n        Pr\n        (\n        \n          S\n          \n            t\n            +\n            1\n          \n        \n        =\n        \n          s\n          ′\n        \n        ∣\n        \n          S\n          \n            t\n          \n        \n        =\n        s\n        ,\n        \n          A\n          \n            t\n          \n        \n        =\n        a\n        )\n      \n    \n    {\\displaystyle P_{a}(s,s')=\\Pr(S_{t+1}=s'\\mid S_{t}=s,A_{t}=a)}\n  , the probability of transition (at time \n  \n    \n      \n        t\n      \n    \n    {\\displaystyle t}\n  ) from state \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n   to state \n  \n    \n      \n        \n          s\n          ′\n        \n      \n    \n    {\\displaystyle s'}\n   under action \n  \n    \n      \n        a\n      \n    \n    {\\displaystyle a}\n  .\n\n  \n    \n      \n        \n          R\n          \n            a\n          \n        \n        (\n        s\n        ,\n        \n          s\n          ′\n        \n        )\n      \n    \n    {\\displaystyle R_{a}(s,s')}\n  , the immediate reward after transition from \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n   to \n  \n    \n      \n        \n          s\n          ′\n        \n      \n    \n    {\\displaystyle s'}\n   with action \n  \n    \n      \n        a\n      \n    \n    {\\displaystyle a}\n  .The purpose of reinforcement learning is for the agent to learn an optimal, or nearly-optimal, policy that maximizes the \"reward function\" or other user-provided reinforcement signal that accumulates from the immediate rewards. This is similar to processes that appear to occur in animal psychology. For example, biological brains are hardwired to interpret signals such as pain and hunger as negative reinforcements, and interpret pleasure and food intake as positive reinforcements. In some circumstances, animals can learn to engage in behaviors that optimize these rewards. This suggests that animals are capable of reinforcement learning.A basic reinforcement learning agent AI interacts with its environment in discrete time steps. At each time t, the agent receives the current state \n  \n    \n      \n        \n          S\n          \n            t\n          \n        \n      \n    \n    {\\displaystyle S_{t}}\n   and reward \n  \n    \n      \n        \n          R\n          \n            t\n          \n        \n      \n    \n    {\\displaystyle R_{t}}\n  . It then chooses an action \n  \n    \n      \n        \n          A\n          \n            t\n          \n        \n      \n    \n    {\\displaystyle A_{t}}\n   from the set of available actions, which is subsequently sent to the environment. The environment moves to a new state \n  \n    \n      \n        \n          S\n          \n            t\n            +\n            1\n          \n        \n      \n    \n    {\\displaystyle S_{t+1}}\n   and the reward \n  \n    \n      \n        \n          R\n          \n            t\n            +\n            1\n          \n        \n      \n    \n    {\\displaystyle R_{t+1}}\n   associated with the transition \n  \n    \n      \n        (\n        \n          S\n          \n            t\n          \n        \n        ,\n        \n          A\n          \n            t\n          \n        \n        ,\n        \n          S\n          \n            t\n            +\n            1\n          \n        \n        )\n      \n    \n    {\\displaystyle (S_{t},A_{t},S_{t+1})}\n   is determined. The goal of a reinforcement learning agent is to learn a policy: \n  \n    \n      \n        π\n        :\n        \n          \n            S\n          \n        \n        ×\n        \n          \n            A\n          \n        \n        →\n        [\n        0\n        ,\n        1\n        ]\n      \n    \n    {\\displaystyle \\pi :{\\mathcal {S}}\\times {\\mathcal {A}}\\rightarrow [0,1]}\n  , \n  \n    \n      \n        π\n        (\n        s\n        ,\n        a\n        )\n        =\n        Pr\n        (\n        \n          A\n          \n            t\n          \n        \n        =\n        a\n        ∣\n        \n          S\n          \n            t\n          \n        \n        =\n        s\n        )\n      \n    \n    {\\displaystyle \\pi (s,a)=\\Pr(A_{t}=a\\mid S_{t}=s)}\n   that maximizes the expected cumulative reward.\nFormulating the problem as an Markov decision process assumes the agent directly observes the current environmental state; in this case the problem is said to have full observability. If the agent only has access to a subset of states, or if the observed states are corrupted by noise, the agent is said to have partial observability, and formally the problem must be formulated as a Partially observable Markov decision process. In both cases, the set of actions available to the agent can be restricted. For example, the state of an account balance could be restricted to be positive; if the current value of the state is 3 and the state transition attempts to reduce the value by 4, the transition will not be allowed.\nWhen the agent's performance is compared to that of an agent that acts optimally, the difference in performance gives rise to the notion of regret. In order to act near optimally, the agent must reason about the long-term consequences of its actions (i.e., maximize future income), although the immediate reward associated with this might be negative.\nThus, reinforcement learning is particularly well-suited to problems that include a long-term versus short-term reward trade-off. It has been applied successfully to various problems, including energy storage operation, robot control, photovoltaic generators dispatch, backgammon, checkers, Go (AlphaGo), and autonomous driving systems.Two elements make reinforcement learning powerful: the use of samples to optimize performance and the use of function approximation to deal with large environments. Thanks to these two key components, reinforcement learning can be used in large environments in the following situations:\n\nA model of the environment is known, but an analytic solution is not available;\nOnly a simulation model of the environment is given (the subject of simulation-based optimization);\nThe only way to collect information about the environment is to interact with it.The first two of these problems could be considered planning problems (since some form of model is available), while the last one could be considered to be a genuine learning problem. However, reinforcement learning converts both planning problems to machine learning problems.\n\nExploration\nThe exploration vs. exploitation trade-off has been most thoroughly studied through the multi-armed bandit problem and for finite state space Markov decision processes in Burnetas and Katehakis (1997).Reinforcement learning requires clever exploration mechanisms; randomly selecting actions, without reference to an estimated probability distribution, shows poor performance. The case of (small) finite Markov decision processes is relatively well understood. However, due to the lack of algorithms that scale well with the number of states (or scale to problems with infinite state spaces), simple exploration methods are the most practical.\nOne such method is \n  \n    \n      \n        ε\n      \n    \n    {\\displaystyle \\varepsilon }\n  -greedy, where \n  \n    \n      \n        0\n        <\n        ε\n        <\n        1\n      \n    \n    {\\displaystyle 0<\\varepsilon <1}\n   is a parameter controlling the amount of exploration vs. exploitation.  With probability \n  \n    \n      \n        1\n        −\n        ε\n      \n    \n    {\\displaystyle 1-\\varepsilon }\n  , exploitation is chosen, and the agent chooses the action that it believes has the best long-term effect (ties between actions are broken uniformly at random). Alternatively, with probability \n  \n    \n      \n        ε\n      \n    \n    {\\displaystyle \\varepsilon }\n  , exploration is chosen, and the action is chosen uniformly at random. \n  \n    \n      \n        ε\n      \n    \n    {\\displaystyle \\varepsilon }\n   is usually a fixed parameter but can be adjusted either according to a schedule (making the agent explore progressively less), or adaptively based on heuristics.\n\nAlgorithms for control learning\nEven if the issue of exploration is disregarded and even if the state was observable (assumed hereafter), the problem remains to use past experience to find out which actions lead to higher cumulative rewards.\n\nCriterion of optimality\nPolicy\nThe agent's action selection is modeled as a map called policy:\n\n  \n    \n      \n        π\n        :\n        \n          \n            A\n          \n        \n        ×\n        \n          \n            S\n          \n        \n        →\n        [\n        0\n        ,\n        1\n        ]\n      \n    \n    {\\displaystyle \\pi :{\\mathcal {A}}\\times {\\mathcal {S}}\\rightarrow [0,1]}\n  \n\n  \n    \n      \n        π\n        (\n        a\n        ,\n        s\n        )\n        =\n        Pr\n        (\n        \n          A\n          \n            t\n          \n        \n        =\n        a\n        ∣\n        \n          S\n          \n            t\n          \n        \n        =\n        s\n        )\n      \n    \n    {\\displaystyle \\pi (a,s)=\\Pr(A_{t}=a\\mid S_{t}=s)}\n  The policy map gives the probability of taking action \n  \n    \n      \n        a\n      \n    \n    {\\displaystyle a}\n   when in state \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n  .: 61  There are also deterministic policies.\n\nState-value function\nThe state-value function \n  \n    \n      \n        \n          V\n          \n            π\n          \n        \n        (\n        s\n        )\n      \n    \n    {\\displaystyle V_{\\pi }(s)}\n   is defined as, expected discounted return starting with state \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n  , i.e. \n  \n    \n      \n        \n          S\n          \n            0\n          \n        \n        =\n        s\n      \n    \n    {\\displaystyle S_{0}=s}\n  , and successively following policy \n  \n    \n      \n        π\n      \n    \n    {\\displaystyle \\pi }\n  . Hence, roughly speaking, the value function estimates \"how good\" it is to be in a given state.: 60 \n\n  \n    \n      \n        \n          V\n          \n            π\n          \n        \n        (\n        s\n        )\n        =\n        \n          \n            E\n          \n        \n        ⁡\n        [\n        G\n        ∣\n        \n          S\n          \n            0\n          \n        \n        =\n        s\n        ]\n        =\n        \n          \n            E\n          \n        \n        ⁡\n        \n          [\n          \n            \n              ∑\n              \n                t\n                =\n                0\n              \n              \n                ∞\n              \n            \n            \n              γ\n              \n                t\n              \n            \n            \n              R\n              \n                t\n                +\n                1\n              \n            \n            ∣\n            \n              S\n              \n                0\n              \n            \n            =\n            s\n          \n          ]\n        \n        ,\n      \n    \n    {\\displaystyle V_{\\pi }(s)=\\operatorname {\\mathbb {E} } [G\\mid S_{0}=s]=\\operatorname {\\mathbb {E} } \\left[\\sum _{t=0}^{\\infty }\\gamma ^{t}R_{t+1}\\mid S_{0}=s\\right],}\n  where the random variable \n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n   denotes the discounted return, and is defined as the sum of future discounted rewards:\n\n  \n    \n      \n        G\n        =\n        \n          ∑\n          \n            t\n            =\n            0\n          \n          \n            ∞\n          \n        \n        \n          γ\n          \n            t\n          \n        \n        \n          R\n          \n            t\n            +\n            1\n          \n        \n        =\n        \n          R\n          \n            1\n          \n        \n        +\n        γ\n        \n          R\n          \n            2\n          \n        \n        +\n        \n          γ\n          \n            2\n          \n        \n        \n          R\n          \n            3\n          \n        \n        +\n        …\n        ,\n      \n    \n    {\\displaystyle G=\\sum _{t=0}^{\\infty }\\gamma ^{t}R_{t+1}=R_{1}+\\gamma R_{2}+\\gamma ^{2}R_{3}+\\dots ,}\n  where \n  \n    \n      \n        \n          R\n          \n            t\n            +\n            1\n          \n        \n      \n    \n    {\\displaystyle R_{t+1}}\n   is the reward for transitioning from state \n  \n    \n      \n        \n          S\n          \n            t\n          \n        \n      \n    \n    {\\displaystyle S_{t}}\n   to \n  \n    \n      \n        \n          S\n          \n            t\n            +\n            1\n          \n        \n      \n    \n    {\\displaystyle S_{t+1}}\n  , \n  \n    \n      \n        0\n        ≤\n        γ\n        <\n        1\n      \n    \n    {\\displaystyle 0\\leq \\gamma <1}\n   is the discount rate. \n  \n    \n      \n        γ\n      \n    \n    {\\displaystyle \\gamma }\n   is less than 1, so rewards in the distant future are weighted less than rewards in the immediate future.\nThe algorithm must find a policy with maximum expected discounted return. From the theory of Markov decision processes it is known that, without loss of generality, the search can be restricted to the set of so-called stationary policies. A policy is stationary if the action-distribution returned by it depends only on the last state visited (from the observation agent's history). The search can be further restricted to deterministic stationary policies. A deterministic stationary policy deterministically selects actions based on the current state. Since any such policy can be identified with a mapping from the set of states to the set of actions, these policies can be identified with such mappings with no loss of generality.\n\nBrute force\nThe brute force approach entails two steps:\n\nFor each possible policy, sample returns while following it\nChoose the policy with the largest expected discounted returnOne problem with this is that the number of policies can be large, or even infinite. Another is that the variance of the returns may be large, which requires many samples to accurately estimate the discounted return of each policy.\nThese problems can be ameliorated if we assume some structure and allow samples generated from one policy to influence the estimates made for others. The two main approaches for achieving this are value function estimation and direct policy search.\n\nValue function\nValue function approaches attempt to find a policy that maximizes the discounted return by maintaining a set of estimates of expected discounted returns \n  \n    \n      \n        \n          \n            E\n          \n        \n        ⁡\n        [\n        G\n        ]\n      \n    \n    {\\displaystyle \\operatorname {\\mathbb {E} } [G]}\n   for some policy (usually either the \"current\" [on-policy] or the optimal [off-policy] one).\nThese methods rely on the theory of Markov decision processes, where optimality is defined in a sense stronger than the one above: A policy is optimal if it achieves the best-expected discounted return from any initial state (i.e., initial distributions play no role in this definition). Again, an optimal policy can always be found among stationary policies.\nTo define optimality in a formal manner, define the state-value of a policy \n  \n    \n      \n        π\n      \n    \n    {\\displaystyle \\pi }\n   by\n\n  \n    \n      \n        \n          V\n          \n            π\n          \n        \n        (\n        s\n        )\n        =\n        \n          \n            E\n          \n        \n        ⁡\n        [\n        G\n        ∣\n        s\n        ,\n        π\n        ]\n        ,\n      \n    \n    {\\displaystyle V^{\\pi }(s)=\\operatorname {\\mathbb {E} } [G\\mid s,\\pi ],}\n  where \n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n   stands for the discounted return associated with following \n  \n    \n      \n        π\n      \n    \n    {\\displaystyle \\pi }\n   from the initial state \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n  . Defining \n  \n    \n      \n        \n          V\n          \n            ∗\n          \n        \n        (\n        s\n        )\n      \n    \n    {\\displaystyle V^{*}(s)}\n   as the maximum possible state-value of \n  \n    \n      \n        \n          V\n          \n            π\n          \n        \n        (\n        s\n        )\n      \n    \n    {\\displaystyle V^{\\pi }(s)}\n  , where \n  \n    \n      \n        π\n      \n    \n    {\\displaystyle \\pi }\n   is allowed to change,\n\n  \n    \n      \n        \n          V\n          \n            ∗\n          \n        \n        (\n        s\n        )\n        =\n        \n          max\n          \n            π\n          \n        \n        \n          V\n          \n            π\n          \n        \n        (\n        s\n        )\n        .\n      \n    \n    {\\displaystyle V^{*}(s)=\\max _{\\pi }V^{\\pi }(s).}\n  A policy that achieves these optimal state-values in each state is called optimal. Clearly, a policy that is optimal in this strong sense is also optimal in the sense that it maximizes the expected discounted return \n  \n    \n      \n        \n          ρ\n          \n            π\n          \n        \n      \n    \n    {\\displaystyle \\rho ^{\\pi }}\n  , since \n  \n    \n      \n        \n          ρ\n          \n            π\n          \n        \n        =\n        \n          \n            E\n          \n        \n        ⁡\n        [\n        \n          V\n          \n            π\n          \n        \n        (\n        s\n        )\n        ]\n      \n    \n    {\\displaystyle \\rho ^{\\pi }=\\operatorname {\\mathbb {E} } [V^{\\pi }(s)]}\n  , where \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n   is a state randomly sampled from the distribution \n  \n    \n      \n        μ\n      \n    \n    {\\displaystyle \\mu }\n   of initial states (so \n  \n    \n      \n        μ\n        (\n        s\n        )\n        =\n        Pr\n        (\n        \n          S\n          \n            0\n          \n        \n        =\n        s\n        )\n      \n    \n    {\\displaystyle \\mu (s)=\\Pr(S_{0}=s)}\n  ).\nAlthough state-values suffice to define optimality, it is useful to define action-values. Given a state \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n  , an action \n  \n    \n      \n        a\n      \n    \n    {\\displaystyle a}\n   and a policy \n  \n    \n      \n        π\n      \n    \n    {\\displaystyle \\pi }\n  , the action-value of the pair \n  \n    \n      \n        (\n        s\n        ,\n        a\n        )\n      \n    \n    {\\displaystyle (s,a)}\n   under \n  \n    \n      \n        π\n      \n    \n    {\\displaystyle \\pi }\n   is defined by\n\n  \n    \n      \n        \n          Q\n          \n            π\n          \n        \n        (\n        s\n        ,\n        a\n        )\n        =\n        \n          \n            E\n          \n        \n        ⁡\n        [\n        G\n        ∣\n        s\n        ,\n        a\n        ,\n        π\n        ]\n        ,\n        \n      \n    \n    {\\displaystyle Q^{\\pi }(s,a)=\\operatorname {\\mathbb {E} } [G\\mid s,a,\\pi ],\\,}\n  where \n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n   now stands for the random discounted return associated with first taking action \n  \n    \n      \n        a\n      \n    \n    {\\displaystyle a}\n   in state \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n   and following \n  \n    \n      \n        π\n      \n    \n    {\\displaystyle \\pi }\n  , thereafter.\nThe theory of Markov decision processes states that if \n  \n    \n      \n        \n          π\n          \n            ∗\n          \n        \n      \n    \n    {\\displaystyle \\pi ^{*}}\n   is an optimal policy, we act optimally (take the optimal action) by choosing the action from \n  \n    \n      \n        \n          Q\n          \n            \n              π\n              \n                ∗\n              \n            \n          \n        \n        (\n        s\n        ,\n        ⋅\n        )\n      \n    \n    {\\displaystyle Q^{\\pi ^{*}}(s,\\cdot )}\n   with the highest action-value at each state, \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n  . The action-value function of such an optimal policy (\n  \n    \n      \n        \n          Q\n          \n            \n              π\n              \n                ∗\n              \n            \n          \n        \n      \n    \n    {\\displaystyle Q^{\\pi ^{*}}}\n  ) is called the optimal action-value function and is commonly denoted by \n  \n    \n      \n        \n          Q\n          \n            ∗\n          \n        \n      \n    \n    {\\displaystyle Q^{*}}\n  . In summary, the knowledge of the optimal action-value function alone suffices to know how to act optimally.\nAssuming full knowledge of the Markov decision process, the two basic approaches to compute the optimal action-value function are value iteration and policy iteration. Both algorithms compute a sequence of functions \n  \n    \n      \n        \n          Q\n          \n            k\n          \n        \n      \n    \n    {\\displaystyle Q_{k}}\n   (\n  \n    \n      \n        k\n        =\n        0\n        ,\n        1\n        ,\n        2\n        ,\n        …\n      \n    \n    {\\displaystyle k=0,1,2,\\ldots }\n  ) that converge to \n  \n    \n      \n        \n          Q\n          \n            ∗\n          \n        \n      \n    \n    {\\displaystyle Q^{*}}\n  . Computing these functions involves computing expectations over the whole state-space, which is impractical for all but the smallest (finite) Markov decision processes. In reinforcement learning methods, expectations are approximated by averaging over samples and using function approximation techniques to cope with the need to represent value functions over large state-action spaces.\n\nMonte Carlo methods\nMonte Carlo methods can be used in an algorithm that mimics policy iteration. Policy iteration consists of two steps: policy evaluation and policy improvement.\nMonte Carlo is used in the policy evaluation step. In this step, given a stationary, deterministic policy \n  \n    \n      \n        π\n      \n    \n    {\\displaystyle \\pi }\n  , the goal is to compute the function values \n  \n    \n      \n        \n          Q\n          \n            π\n          \n        \n        (\n        s\n        ,\n        a\n        )\n      \n    \n    {\\displaystyle Q^{\\pi }(s,a)}\n   (or a good approximation to them) for all state-action pairs \n  \n    \n      \n        (\n        s\n        ,\n        a\n        )\n      \n    \n    {\\displaystyle (s,a)}\n  . Assume (for simplicity) that the Markov decision process is finite, that sufficient memory is available to accommodate the action-values and that the problem is episodic and after each episode a new one starts from some random initial state. Then, the estimate of the value of a given state-action pair \n  \n    \n      \n        (\n        s\n        ,\n        a\n        )\n      \n    \n    {\\displaystyle (s,a)}\n   can be computed by averaging the sampled returns that originated from \n  \n    \n      \n        (\n        s\n        ,\n        a\n        )\n      \n    \n    {\\displaystyle (s,a)}\n   over time.  Given sufficient time, this procedure can thus construct a precise estimate \n  \n    \n      \n        Q\n      \n    \n    {\\displaystyle Q}\n   of the action-value function \n  \n    \n      \n        \n          Q\n          \n            π\n          \n        \n      \n    \n    {\\displaystyle Q^{\\pi }}\n  . This finishes the description of the policy evaluation step.\nIn the policy improvement step, the next policy is obtained by computing a greedy policy with respect to \n  \n    \n      \n        Q\n      \n    \n    {\\displaystyle Q}\n  : Given a state \n  \n    \n      \n        s\n      \n    \n    {\\displaystyle s}\n  , this new policy returns an action that maximizes \n  \n    \n      \n        Q\n        (\n        s\n        ,\n        ⋅\n        )\n      \n    \n    {\\displaystyle Q(s,\\cdot )}\n  . In practice lazy evaluation can defer the computation of the maximizing actions to when they are needed.\nProblems with this procedure include:\n\nThe procedure may spend too much time evaluating a suboptimal policy.\nIt uses samples inefficiently in that a long trajectory improves the estimate only of the single state-action pair that started the trajectory.\nWhen the returns along the trajectories have high variance, convergence is slow.\nIt works in episodic problems only.\nIt works in small, finite Markov decision processes only.\n\nTemporal difference methods\nThe first problem is corrected by allowing the procedure to change the policy (at some or all states) before the values settle. This too may be problematic as it might prevent convergence. Most current algorithms do this, giving rise to the class of generalized policy iteration algorithms. Many actor-critic methods belong to this category.\nThe second issue can be corrected by allowing trajectories to contribute to any state-action pair in them. This may also help to some extent with the third problem, although a better solution when returns have high variance is Sutton's temporal difference (TD) methods that are based on the recursive Bellman equation. The computation in TD methods can be incremental (when after each transition the memory is changed and the transition is thrown away), or batch (when the transitions are batched and the estimates are computed once based on the batch). Batch methods, such as the least-squares temporal difference method, may use the information in the samples better, while incremental methods are the only choice when batch methods are infeasible due to their high computational or memory complexity. Some methods try to combine the two approaches. Methods based on temporal differences also overcome the fourth issue.\nAnother problem specific to TD comes from their reliance on the recursive Bellman equation. Most TD methods have a so-called \n  \n    \n      \n        λ\n      \n    \n    {\\displaystyle \\lambda }\n   parameter \n  \n    \n      \n        (\n        0\n        ≤\n        λ\n        ≤\n        1\n        )\n      \n    \n    {\\displaystyle (0\\leq \\lambda \\leq 1)}\n   that can continuously interpolate between Monte Carlo methods that do not rely on the Bellman equations and the basic TD methods that rely entirely on the Bellman equations. This can be effective in palliating this issue.\n\nFunction approximation methods\nIn order to address the fifth issue, function approximation methods are used. Linear function approximation starts with a mapping \n  \n    \n      \n        ϕ\n      \n    \n    {\\displaystyle \\phi }\n   that assigns a finite-dimensional vector to each state-action pair. Then, the action values of a state-action pair \n  \n    \n      \n        (\n        s\n        ,\n        a\n        )\n      \n    \n    {\\displaystyle (s,a)}\n   are obtained by linearly combining the components of \n  \n    \n      \n        ϕ\n        (\n        s\n        ,\n        a\n        )\n      \n    \n    {\\displaystyle \\phi (s,a)}\n   with some weights \n  \n    \n      \n        θ\n      \n    \n    {\\displaystyle \\theta }\n  :\n\n  \n    \n      \n        Q\n        (\n        s\n        ,\n        a\n        )\n        =\n        \n          ∑\n          \n            i\n            =\n            1\n          \n          \n            d\n          \n        \n        \n          θ\n          \n            i\n          \n        \n        \n          ϕ\n          \n            i\n          \n        \n        (\n        s\n        ,\n        a\n        )\n        .\n      \n    \n    {\\displaystyle Q(s,a)=\\sum _{i=1}^{d}\\theta _{i}\\phi _{i}(s,a).}\n  The algorithms then adjust the weights, instead of adjusting the values associated with the individual state-action pairs. Methods based on ideas from nonparametric statistics (which can be seen to construct their own features) have been explored.\nValue iteration can also be used as a starting point, giving rise to the Q-learning algorithm and its many variants. Including Deep Q-learning methods when a neural network is used to represent Q, with various applications in stochastic search problems.The problem with using action-values is that they may need highly precise estimates of the competing action values that can be hard to obtain when the returns are noisy, though this problem is mitigated to some extent by temporal difference methods. Using the so-called compatible function approximation method compromises generality and efficiency.\n\nDirect policy search\nAn alternative method is to search directly in (some subset of) the policy space, in which case the problem becomes a case of stochastic optimization. The two approaches available are gradient-based and gradient-free methods.\nGradient-based methods (policy gradient methods) start with a mapping from a finite-dimensional (parameter) space to the space of policies: given the parameter vector \n  \n    \n      \n        θ\n      \n    \n    {\\displaystyle \\theta }\n  , let \n  \n    \n      \n        \n          π\n          \n            θ\n          \n        \n      \n    \n    {\\displaystyle \\pi _{\\theta }}\n   denote the policy associated to \n  \n    \n      \n        θ\n      \n    \n    {\\displaystyle \\theta }\n  . Defining the performance function by \n  \n    \n      \n        ρ\n        (\n        θ\n        )\n        =\n        \n          ρ\n          \n            \n              π\n              \n                θ\n              \n            \n          \n        \n      \n    \n    {\\displaystyle \\rho (\\theta )=\\rho ^{\\pi _{\\theta }}}\n   under mild conditions this function will be differentiable as a function of the parameter vector \n  \n    \n      \n        θ\n      \n    \n    {\\displaystyle \\theta }\n  . If the gradient of \n  \n    \n      \n        ρ\n      \n    \n    {\\displaystyle \\rho }\n   was known, one could use gradient ascent. Since an analytic expression for the gradient is not available, only a noisy estimate is available. Such an estimate can be constructed in many ways, giving rise to algorithms such as Williams' REINFORCE method (which is known as the likelihood ratio method in the simulation-based optimization literature).A large class of methods avoids relying on gradient information. These include simulated annealing, cross-entropy search or methods of evolutionary computation. Many gradient-free methods can achieve (in theory and in the limit) a global optimum.\nPolicy search methods may converge slowly given noisy data. For example, this happens in episodic problems when the trajectories are long and the variance of the returns is large. Value-function based methods that rely on temporal differences might help in this case. In recent years, actor–critic methods have been proposed and performed well on various problems.Policy search methods have been used in the robotics context. Many policy search methods may get stuck in local optima (as they are based on local search).\n\nModel-based algorithms\nFinally, all of the above methods can be combined with algorithms that first learn a model of the Markov Decision Process, the probability of each next state given an action taken from an existing state. For instance, the Dyna algorithm learns a model from experience, and uses that to provide more modelled transitions for a value function, in addition to the real transitions.  Such methods can sometimes be extended to use of non-parametric models, such as when the transitions are simply stored and 'replayed' to the learning algorithm.\nModel-based methods can be more computationally intensive than model-free approaches, and their utility can be limited by the extent to which the Markov Decision Process can be learnt.There are other ways to use models than to update a value function. For instance, in model predictive control the model is used to update the behavior directly.\n\nTheory\nBoth the asymptotic and finite-sample behaviors of most algorithms are well understood. Algorithms with provably good online performance (addressing the exploration issue) are known.\nEfficient exploration of Markov decision processes is given in  Burnetas and Katehakis (1997). Finite-time performance bounds have also appeared for many algorithms, but these bounds are expected to be rather loose and thus more work is needed to better understand the relative advantages and limitations.\nFor incremental algorithms, asymptotic convergence issues have been settled. Temporal-difference-based algorithms converge under a wider set of conditions than was previously possible (for example, when used with arbitrary, smooth function approximation).\n\nResearch\nResearch topics include:\n\nactor-critic architecture\nactor-critic-scenery architecture \nadaptive methods that work with fewer (or no) parameters under a large number of conditions\nbug detection in software projects\ncontinuous learning\ncombinations with logic-based frameworks\nexploration in large Markov decision processes\nhuman feedback\ninteraction between implicit and explicit learning in skill acquisition\nintrinsic motivation which differentiates information-seeking, curiosity-type behaviours from task-dependent goal-directed behaviours large-scale empirical evaluations\nlarge (or continuous) action spaces\nmodular and hierarchical reinforcement learning\nmultiagent/distributed reinforcement learning is a topic of interest. Applications are expanding.\noccupant-centric control\noptimization of computing resources\npartial information (e.g., using predictive state representation)\nreward function based on maximising novel information\nsample-based planning (e.g., based on Monte Carlo tree search).\nsecurities trading\ntransfer learning\nTD learning modeling dopamine-based learning in the brain. Dopaminergic projections from the substantia nigra to the basal ganglia function are the prediction error.\nvalue-function and policy search methods\n\nComparison of key algorithms\nAssociative reinforcement learning\nAssociative reinforcement learning tasks combine facets of stochastic learning automata tasks and supervised learning pattern classification tasks. In associative reinforcement learning tasks, the learning system interacts in a closed loop with its environment.\n\nDeep reinforcement learning\nThis approach extends reinforcement learning by using a deep neural network and without explicitly designing the state space. The work on learning ATARI games by Google DeepMind increased attention to deep reinforcement learning or end-to-end reinforcement learning.\n\nAdversarial deep reinforcement learning\nAdversarial deep reinforcement learning is an active area of research in reinforcement learning focusing on vulnerabilities of learned policies. In this research area some studies initially showed that reinforcement learning policies are susceptible to imperceptible adversarial manipulations. While some methods have been proposed to overcome these susceptibilities, in the most recent studies it has been shown that these proposed solutions are far from providing an accurate representation of current vulnerabilities of deep reinforcement learning policies.\n\nFuzzy reinforcement learning\nBy introducing fuzzy inference in reinforcement learning, approximating the state-action value function with fuzzy rules in continuous space becomes possible. The IF - THEN form of fuzzy rules make this approach suitable for expressing the results in a form close to natural language. Extending FRL with Fuzzy Rule Interpolation  allows the use of reduced size sparse fuzzy rule-bases to emphasize cardinal rules (most important state-action values).\n\nInverse reinforcement learning\nIn inverse reinforcement learning (IRL), no reward function is given. Instead, the reward function is inferred given an observed behavior from an expert. The idea is to mimic observed behavior, which is often optimal or close to optimal.\n\nSafe reinforcement learning\nSafe reinforcement learning (SRL) can be defined as the process of learning policies that maximize the expectation of the return in problems in which it is important to ensure reasonable system performance and/or respect safety constraints during the learning and/or deployment processes.\n\nSee also\nReferences\nSources\nSutton, Richard S.; Barto, Andrew G. (2018) [1998]. Reinforcement Learning: An Introduction (2nd ed.). MIT Press. ISBN 978-0-262-03924-6.\nLi, Shengbo Eben (2023). Reinforcement Learning for Sequential Decision and Optimal Control (1st ed.). Springer Verlag, Singapore. doi:10.1007/978-981-19-7784-8. ISBN 978-9-811-97783-1.\nBertsekas, Dimitri P. (2023) [2019]. REINFORCEMENT LEARNING AND OPTIMAL CONTROL (1st ed.). Athena Scientific. ISBN 978-1-886-52939-7.\n\nFurther reading\nAnnaswamy, Anuradha M. (3 May 2023). \"Adaptive Control and Intersections with Reinforcement Learning\". Annual Review of Control, Robotics, and Autonomous Systems. 6 (1): 65–93. doi:10.1146/annurev-control-062922-090153. ISSN 2573-5144. S2CID 255702873.\nAuer, Peter; Jaksch, Thomas; Ortner, Ronald (2010). \"Near-optimal regret bounds for reinforcement learning\". Journal of Machine Learning Research. 11: 1563–1600.\nBusoniu, Lucian; Babuska, Robert; De Schutter, Bart; Ernst, Damien (2010). Reinforcement Learning and Dynamic Programming using Function Approximators. Taylor & Francis CRC Press. ISBN 978-1-4398-2108-4.\nFrançois-Lavet, Vincent; Henderson, Peter; Islam, Riashat; Bellemare, Marc G.; Pineau, Joelle (2018). \"An Introduction to Deep Reinforcement Learning\". Foundations and Trends in Machine Learning. 11 (3–4): 219–354. arXiv:1811.12560. Bibcode:2018arXiv181112560F. doi:10.1561/2200000071. S2CID 54434537.\nPowell, Warren (2011). Approximate dynamic programming: solving the curses of dimensionality. Wiley-Interscience. Archived from the original on 2016-07-31. Retrieved 2010-09-08.\nSutton, Richard S. (1988). \"Learning to predict by the method of temporal differences\". Machine Learning. 3: 9–44. doi:10.1007/BF00115009.\nSzita, Istvan; Szepesvari, Csaba (2010). \"Model-based Reinforcement Learning with Nearly Tight Exploration Complexity Bounds\" (PDF). ICML 2010. Omnipress. pp. 1031–1038. Archived from the original (PDF) on 2010-07-14.\n\nExternal links\nReinforcement Learning Repository\nReinforcement Learning and Artificial Intelligence (RLAI, Rich Sutton's lab at the University of Alberta)\nAutonomous Learning Laboratory (ALL, Andrew Barto's lab at the University of Massachusetts Amherst)\nReal-world reinforcement learning experiments Archived 2018-10-08 at the Wayback Machine at Delft University of Technology\nStanford University Andrew Ng Lecture on Reinforcement Learning\nDissecting Reinforcement Learning Series of blog post on reinforcement learning with Python code\nA (Long) Peek into Reinforcement Learning",
    "Natural Language Processing": "Natural language processing (NLP) is an interdisciplinary subfield of computer science and linguistics. It is primarily concerned with giving computers the ability to support and manipulate human language. It involves processing natural language datasets, such as text corpora or speech corpora, using either rule-based or probabilistic (i.e. statistical and, most recently, neural network-based) machine learning approaches. The goal is a computer capable of \"understanding\" the contents of documents, including the contextual nuances of the language within them. The technology can then accurately extract information and insights contained in the documents as well as categorize and organize the documents themselves.\nChallenges in natural language processing frequently involve speech recognition, natural-language understanding, and natural-language generation.\n\nHistory\nNatural language processing has its roots in the 1950s. Already in 1950, Alan Turing published an article titled \"Computing Machinery and Intelligence\" which proposed what is now called the Turing test as a criterion of intelligence, though at the time that was not articulated as a problem separate from artificial intelligence. The proposed test includes a task that involves the automated interpretation and generation of natural language.\n\nSymbolic NLP (1950s – early 1990s)\nThe premise of symbolic NLP is well-summarized by John Searle's Chinese room experiment: Given a collection of rules (e.g., a Chinese phrasebook, with questions and matching answers), the computer emulates natural language understanding (or other NLP tasks) by applying those rules to the data it confronts.\n\n1950s: The Georgetown experiment in 1954 involved fully automatic translation of more than sixty Russian sentences into English. The authors claimed that within three or five years, machine translation would be a solved problem.  However, real progress was much slower, and after the ALPAC report in 1966, which found that ten-year-long research had failed to fulfill the expectations, funding for machine translation was dramatically reduced. Little further research in machine translation was conducted in America (though some research continued elsewhere, such as Japan and Europe) until the late 1980s when the first statistical machine translation systems were developed.\n1960s: Some notably successful natural language processing systems developed in the 1960s were SHRDLU, a natural language system working in restricted \"blocks worlds\" with restricted vocabularies, and ELIZA, a simulation of a Rogerian psychotherapist, written by Joseph Weizenbaum between 1964 and 1966. Using almost no information about human thought or emotion, ELIZA sometimes provided a startlingly human-like interaction. When the \"patient\" exceeded the very small knowledge base, ELIZA might provide a generic response, for example, responding to \"My head hurts\" with \"Why do you say your head hurts?\". Ross Quillian's successful work on natural language was demonstrated with a vocabulary of only twenty words, because that was all that would fit in a computer  memory at the time.1970s: During the 1970s, many programmers began to write \"conceptual ontologies\", which structured real-world information into computer-understandable data.  Examples are MARGIE (Schank, 1975), SAM (Cullingford, 1978), PAM (Wilensky, 1978), TaleSpin (Meehan, 1976), QUALM (Lehnert, 1977), Politics (Carbonell, 1979), and Plot Units (Lehnert 1981).  During this time, the first chatterbots were written (e.g., PARRY).\n1980s: The 1980s and early 1990s mark the heyday of symbolic methods in NLP. Focus areas of the time included research on rule-based parsing (e.g., the development of HPSG as a computational operationalization of generative grammar), morphology (e.g., two-level morphology), semantics (e.g., Lesk algorithm), reference (e.g., within Centering Theory) and other areas of natural language understanding (e.g., in the Rhetorical Structure Theory). Other lines of research were continued, e.g., the development of chatterbots with Racter and Jabberwacky. An important development (that eventually led to the statistical turn in the 1990s) was the rising importance of quantitative evaluation in this period.\n\nStatistical NLP (1990s–2010s)\nUp until the 1980s, most natural language processing systems were based on complex sets of hand-written rules.  Starting in the late 1980s, however, there was a revolution in natural language processing with the introduction of machine learning algorithms for language processing.  This was due to both the steady increase in computational power (see Moore's law) and the gradual lessening of the dominance of Chomskyan theories of linguistics (e.g. transformational grammar), whose theoretical underpinnings discouraged the sort of corpus linguistics that underlies the machine-learning approach to language processing.\n1990s: Many of the notable early successes on statistical methods in NLP occurred in the field of machine translation, due especially to work at IBM Research, such as IBM alignment models.  These systems were able to take advantage of existing multilingual textual corpora that had been produced by the Parliament of Canada and the European Union as a result of laws calling for the translation of all governmental proceedings into all official languages of the corresponding systems of government.  However, most other systems depended on corpora specifically developed for the tasks implemented by these systems, which was (and often continues to be) a major limitation in the success of these systems. As a result, a great deal of research has gone into methods of more effectively learning from limited amounts of data.\n2000s: With the growth of the web, increasing amounts of raw (unannotated) language data has become available since the mid-1990s. Research has thus increasingly focused on unsupervised and semi-supervised learning algorithms.  Such algorithms can learn from data that has not been hand-annotated with the desired answers or using a combination of annotated and non-annotated data.  Generally, this task is much more difficult than supervised learning, and typically produces less accurate results for a given amount of input data.  However, there is an enormous amount of non-annotated data available (including, among other things, the entire content of the World Wide Web), which can often make up for the inferior results if the algorithm used has a low enough time complexity to be practical.\n\nNeural NLP (present)\nIn 2003, word n-gram model, at the time the best statistical algorithm, was overperformed by a multi-layer perceptron (with a single hidden layer and context length of several words trained on up to 14 million of words with a CPU cluster in language modelling) by Yoshua Bengio with co-authors.In 2010, Tomáš Mikolov (then a PhD student at Brno University of Technology) with co-authors applied a simple recurrent neural network with a single hidden layer to language modelling, and in the following years he went on to develop Word2vec. In the 2010s, representation learning and deep neural network-style (featuring many hidden layers) machine learning methods became widespread in natural language processing. That popularity was due partly to a flurry of results showing that such techniques can achieve state-of-the-art results in many natural language tasks, e.g., in language modeling and parsing. This is increasingly important in medicine and healthcare, where NLP helps analyze notes and text in electronic health records that would otherwise be inaccessible for study when seeking to improve care or protect patient privacy.In 2023, Gautam Siwach (a PhD student at University of New Haven) with co-author Dr. Cheryl Li introduce an inventive approach to augment Human-Cobot Interaction (HCI) through the incorporation of Natural Language Processing (NLP). The research integrates the CoboVox voice recognition system into the UR3e cobot interface, enabling seamless voice-activated engagement for efficient communication. The methodology involves constructing a comprehensive vocabulary, scrutinizing NLP models, and selecting the most fitting one for practical implementation. The resulting HCI framework facilitates the interpretation of voice commands, empowering even non-expert robot operators to effortlessly program and control cobots. This study signifies a notable advancement in the field, emphasizing the transformative role of NLP in bridging the communication gap between humans and collaborative robots.\n\nApproaches: Symbolic, statistical, neural networks\nSymbolic approach, i.e., the hand-coding of a set of rules for manipulating symbols, coupled with a dictionary lookup, was historically the first approach used both by AI in general and by NLP in particular: such as by writing grammars or devising heuristic rules for stemming.\nMachine learning approaches, which include both statistical and neural networks, on the other hand, have many advantages over the symbolic approach: \n\nboth statistical and neural networks methods can focus more on the most common cases extracted from a corpus of texts, whereas the rule-based approach needs to provide rules for both rare cases and common ones equally.language models, produced by either statistical or neural networks methods, are more robust to both unfamiliar (e.g. containing words or structures that have not been seen before) and erroneous input (e.g. with misspelled words or words accidentally omitted) in comparison to the rule-based systems, which are also more costly to produce.the larger such a (probabilistic) language model is, the more accurate it becomes, in contrast to rule-based systems that can gain accuracy only by increasing the amount and complexity of the rules leading to intractability problems.Although rule-based systems for manipulating symbols were still in use in 2020, they have become mostly obsolete with the advance of LLMs in 2023. \nBefore that they were commonly used:\n\nwhen the amount of training data is insufficient to successfully apply machine learning methods, e.g., for the machine translation of low-resource languages such as provided by the Apertium system,\nfor preprocessing in NLP pipelines, e.g., tokenization, or\nfor postprocessing and transforming the output of NLP pipelines, e.g., for knowledge extraction from syntactic parses.\n\nStatistical approach\nIn the late 1980s and mid-1990s, the statistical approach ended a period of AI winter, which was caused by the inefficiencies of the rule-based approaches.The earliest decision trees, producing systems of hard if–then rules, were still very similar to the old rule-based approaches.\nOnly the introduction of hidden Markov models, applied to part-of-speech tagging, announced the end of the old rule-based approach.\n\nNeural networks\nA major drawback of statistical methods is that they require elaborate feature engineering. Since 2015, the statistical approach was replaced by the neural networks approach, using word embeddings to capture semantic properties of words. \nIntermediate tasks (e.g., part-of-speech tagging and dependency parsing) have not been needed anymore. \nNeural machine translation, based on then-newly-invented sequence-to-sequence transformations, made obsolete the intermediate steps, such as word alignment, previously necessary for statistical machine translation.\n\nCommon NLP tasks\nThe following is a list of some of the most commonly researched tasks in natural language processing. Some of these tasks have direct real-world applications, while others more commonly serve as subtasks that are used to aid in solving larger tasks.\nThough natural language processing tasks are closely intertwined, they can be subdivided into categories for convenience. A coarse division is given below.\n\nText and speech processing\nOptical character recognition (OCR)\nGiven an image representing printed text, determine the corresponding text.Speech recognition\nGiven a sound clip of a person or people speaking, determine the textual representation of the speech.  This is the opposite of text to speech and is one of the extremely difficult problems colloquially termed \"AI-complete\" (see above).  In natural speech there are hardly any pauses between successive words, and thus speech segmentation is a necessary subtask of speech recognition (see below). In most spoken languages, the sounds representing successive letters blend into each other in a process termed coarticulation, so the conversion of the analog signal to discrete characters can be a very difficult process. Also, given that words in the same language are spoken by people with different accents, the speech recognition software must be able to recognize the wide variety of input as being identical to each other in terms of its textual equivalent.\nSpeech segmentation\nGiven a sound clip of a person or people speaking, separate it into words.  A subtask of speech recognition and typically grouped with it.Text-to-speech\nGiven a text, transform those units and produce a spoken representation. Text-to-speech can be used to aid the visually impaired.Word segmentation (Tokenization)\nSeparate a chunk of continuous text into separate words. For a language like English, this is fairly trivial, since words are usually separated by spaces. However, some written languages like Chinese, Japanese and Thai do not mark word boundaries in such a fashion, and in those languages text segmentation is a significant task requiring knowledge of the vocabulary and morphology of words in the language. Sometimes this process is also used in cases like bag of words (BOW) creation in data mining.\n\nMorphological analysis\nLemmatization\nThe task of removing inflectional endings only and to return the base dictionary form of a word which is also known as a lemma. Lemmatization is another technique for reducing words to their normalized form. But in this case, the transformation actually uses a dictionary to map words to their actual form.\nMorphological segmentation\nSeparate words into individual morphemes and identify the class of the morphemes. The difficulty of this task depends greatly on the complexity of the morphology (i.e., the structure of words) of the language being considered. English has fairly simple morphology, especially inflectional morphology, and thus it is often possible to ignore this task entirely and simply model all possible forms of a word (e.g., \"open, opens, opened, opening\") as separate words. In languages such as Turkish or Meitei, a highly agglutinated Indian language, however, such an approach is not possible, as each dictionary entry has thousands of possible word forms.\nPart-of-speech tagging\nGiven a sentence, determine the part of speech (POS) for each word. Many words, especially common ones, can serve as multiple parts of speech. For example, \"book\" can be a noun (\"the book on the table\") or verb (\"to book a flight\"); \"set\" can be a noun, verb or adjective; and \"out\" can be any of at least five different parts of speech.Stemming\nThe process of reducing inflected (or sometimes derived) words to a base form (e.g., \"close\" will be the root for \"closed\", \"closing\", \"close\", \"closer\" etc.). Stemming yields similar results as lemmatization, but does so on grounds of rules, not a dictionary.\n\nSyntactic analysis\nGrammar induction\nGenerate a formal grammar that describes a language's syntax.\nSentence breaking (also known as \"sentence boundary disambiguation\")\nGiven a chunk of text, find the sentence boundaries. Sentence boundaries are often marked by periods or other punctuation marks, but these same characters can serve other purposes (e.g., marking abbreviations).\nParsing\nDetermine the parse tree (grammatical analysis) of a given sentence. The grammar for natural languages is ambiguous and typical sentences have multiple possible analyses: perhaps surprisingly, for a typical sentence there may be thousands of potential parses (most of which will seem completely nonsensical to a human). There are two primary types of parsing: dependency parsing and constituency parsing. Dependency parsing focuses on the relationships between words in a sentence (marking things like primary objects and predicates), whereas constituency parsing focuses on building out the parse tree using a probabilistic context-free grammar (PCFG) (see also stochastic grammar).\n\nLexical semantics (of individual words in context)\nLexical semantics\nWhat is the computational meaning of individual words in context?\nDistributional semantics\nHow can we learn semantic representations from data?\nNamed entity recognition (NER)\nGiven a stream of text, determine which items in the text map to proper names, such as people or places, and what the type of each such name is (e.g. person, location, organization). Although capitalization can aid in recognizing named entities in languages such as English, this information cannot aid in determining the type of named entity, and in any case, is often inaccurate or insufficient.  For example, the first letter of a sentence is also capitalized, and named entities often span several words, only some of which are capitalized.  Furthermore, many other languages in non-Western scripts (e.g. Chinese or Arabic) do not have any capitalization at all, and even languages with capitalization may not consistently use it to distinguish names. For example, German capitalizes all nouns, regardless of whether they are names, and French and Spanish do not capitalize names that serve as adjectives. Another name for this task is token classification.Sentiment analysis (see also Multimodal sentiment analysis)\nExtract subjective information usually from a set of documents, often using online reviews to determine \"polarity\" about specific objects. It is especially useful for identifying trends of public opinion in social media, for marketing.\nTerminology extraction\nThe goal of terminology extraction is to automatically extract relevant terms from a given corpus.\nWord-sense disambiguation (WSD)\nMany words have more than one meaning; we have to select the meaning which makes the most sense in context.  For this problem, we are typically given a list of words and associated word senses, e.g. from a dictionary or an online resource such as WordNet.\nEntity linking\nMany words—typically proper names—refer to named entities; here we have to select the entity (a famous individual, a location, a company, etc.) which is referred to in context.\n\nRelational semantics (semantics of individual sentences)\nRelationship extraction\nGiven a chunk of text, identify the relationships among named entities (e.g. who is married to whom).\nSemantic parsing\nGiven a piece of text (typically a sentence), produce a formal representation of its semantics, either as a graph (e.g., in AMR parsing) or in accordance with a logical formalism (e.g., in DRT parsing). This challenge typically includes aspects of several more elementary NLP tasks from semantics (e.g., semantic role labelling, word-sense disambiguation) and can be extended to include full-fledged discourse analysis (e.g., discourse analysis, coreference; see Natural language understanding below).\nSemantic role labelling (see also implicit semantic role labelling below)\nGiven a single sentence, identify and disambiguate semantic predicates (e.g., verbal frames), then identify and classify the frame elements (semantic roles).\n\nDiscourse (semantics beyond individual sentences)\nCoreference resolution\nGiven a sentence or larger chunk of text, determine which words (\"mentions\") refer to the same objects (\"entities\"). Anaphora resolution is a specific example of this task, and is specifically concerned with matching up pronouns with the nouns or names to which they refer. The more general task of coreference resolution also includes identifying so-called \"bridging relationships\" involving referring expressions. For example, in a sentence such as \"He entered John's house through the front door\", \"the front door\" is a referring expression and the bridging relationship to be identified is the fact that the door being referred to is the front door of John's house (rather than of some other structure that might also be referred to).\nDiscourse analysis\nThis rubric includes several related tasks.  One task is discourse parsing, i.e., identifying the discourse structure of a connected text, i.e. the nature of the discourse relationships between sentences (e.g. elaboration, explanation, contrast).  Another possible task is recognizing and classifying the speech acts in a chunk of text (e.g. yes–no question, content question, statement, assertion, etc.).Implicit semantic role labelling\nGiven a single sentence, identify and disambiguate semantic predicates (e.g., verbal frames) and their explicit semantic roles in the current sentence (see Semantic role labelling above). Then, identify semantic roles that are not explicitly realized in the current sentence, classify them into arguments that are explicitly realized elsewhere in the text and those that are not specified, and resolve the former against the local text. A closely related task is zero anaphora resolution, i.e., the extension of coreference resolution to pro-drop languages.Recognizing textual entailment\nGiven two text fragments, determine if one being true entails the other, entails the other's negation, or allows the other to be either true or false.Topic segmentation and recognition\nGiven a chunk of text, separate it into segments each of which is devoted to a topic, and identify the topic of the segment.Argument mining\nThe goal of argument mining is the automatic extraction and identification of argumentative structures from natural language text with the aid of computer programs. Such argumentative structures include the premise, conclusions, the argument scheme and the relationship between the main and subsidiary argument, or the main and counter-argument within discourse.\n\nHigher-level NLP applications\nAutomatic summarization (text summarization)\nProduce a readable summary of a chunk of text.  Often used to provide summaries of the text of a known type, such as research papers, articles in the financial section of a newspaper.\nGrammatical error correction\nGrammatical error detection and correction involves a great band-width of problems on all levels of linguistic analysis (phonology/orthography, morphology, syntax, semantics, pragmatics). Grammatical error correction is impactful since it affects hundreds of millions of people that use or acquire English as a second language. It has thus been subject to a number of shared tasks since 2011. As far as orthography, morphology, syntax and certain aspects of semantics are concerned, and due to the development of powerful neural language models such as GPT-2, this can now (2019) be considered a largely solved problem and is being marketed in various commercial applications.\nMachine translation (MT)\nAutomatically translate text from one human language to another.  This is one of the most difficult problems, and is a member of a class of problems colloquially termed \"AI-complete\", i.e. requiring all of the different types of knowledge that humans possess (grammar, semantics, facts about the real world, etc.) to solve properly.\nNatural-language understanding (NLU)\nConvert chunks of text into more formal representations such as first-order logic structures that are easier for computer programs to manipulate. Natural language understanding involves the identification of the intended semantic from the multiple possible semantics which can be derived from a natural language expression which usually takes the form of organized notations of natural language concepts. Introduction and creation of language metamodel and ontology are efficient however empirical solutions. An explicit formalization of natural language semantics without confusions with implicit assumptions such as closed-world assumption (CWA) vs. open-world assumption, or subjective Yes/No vs. objective True/False is expected for the construction of a basis of semantics formalization.\nNatural-language generation (NLG):\nConvert information from computer databases or semantic intents into readable human language.\nBook generation\nNot an NLP task proper but an extension of natural language generation and other NLP tasks is the creation of full-fledged books. The first machine-generated book was created by a rule-based system in 1984 (Racter, The policeman's beard is half-constructed). The first published work by a neural network was published in 2018, 1 the Road, marketed as a novel, contains sixty million words. Both these systems are basically elaborate but non-sensical (semantics-free) language models. The first machine-generated science book was published in 2019 (Beta Writer, Lithium-Ion Batteries, Springer, Cham). Unlike Racter and 1 the Road, this is grounded on factual knowledge and based on text summarization.\nDocument AI\nA Document AI platform sits on top of the NLP technology enabling users with no prior experience of artificial intelligence, machine learning or NLP to quickly train a computer to extract the specific data they need from different document types. NLP-powered Document AI enables non-technical teams to quickly access information hidden in documents, for example, lawyers, business analysts and accountants.\nDialogue management\nComputer systems intended to converse with a human.\nQuestion answering\nGiven a human-language question, determine its answer. Typical questions have a specific right answer (such as \"What is the capital of Canada?\"), but sometimes open-ended questions are also considered (such as \"What is the meaning of life?\").\nText-to-image generation\nGiven a description of an image, generate an image that matches the description.\nText-to-scene generation\nGiven a description of a scene, generate a 3D model of the scene.\nText-to-video\nGiven a description of a video, generate a video that matches the description.\n\nGeneral tendencies and (possible) future directions\nBased on long-standing trends in the field, it is possible to extrapolate future directions of NLP. As of 2020, three trends among the topics of the long-standing series of CoNLL Shared Tasks can be observed:\nInterest on increasingly abstract, \"cognitive\" aspects of natural language (1999–2001: shallow parsing, 2002–03: named entity recognition, 2006–09/2017–18: dependency syntax, 2004–05/2008–09 semantic role labelling, 2011–12 coreference, 2015–16: discourse parsing, 2019: semantic parsing).\nIncreasing interest in multilinguality, and, potentially, multimodality (English since 1999; Spanish, Dutch since 2002; German since 2003; Bulgarian, Danish, Japanese, Portuguese, Slovenian, Swedish, Turkish since 2006; Basque, Catalan, Chinese, Greek, Hungarian, Italian, Turkish since 2007; Czech since 2009; Arabic since 2012; 2017: 40+ languages; 2018: 60+/100+ languages)\nElimination of symbolic representations (rule-based over supervised towards weakly supervised methods, representation learning and end-to-end systems)\n\nCognition\nMost higher-level NLP applications involve aspects that emulate intelligent behaviour and apparent comprehension of natural language. More broadly speaking, the technical operationalization of increasingly advanced aspects of cognitive behaviour represents one of the developmental trajectories of NLP (see trends among CoNLL shared tasks above).\nCognition refers to \"the mental action or process of acquiring knowledge and understanding through thought, experience, and the senses.\" Cognitive science is the interdisciplinary, scientific study of the mind and its processes. Cognitive linguistics is an interdisciplinary branch of linguistics, combining knowledge and research from both psychology and linguistics. Especially during the age of symbolic NLP, the area of computational linguistics maintained strong ties with cognitive studies.\nAs an example, George Lakoff offers a methodology to build natural language processing (NLP) algorithms through the perspective of cognitive science, along with the findings of cognitive linguistics, with two defining aspects:\n\nApply the theory of conceptual metaphor, explained by Lakoff as \"the understanding of one idea, in terms of another\" which provides an idea of the intent of the author. For example, consider the English word big. When used in a comparison (\"That is a big tree\"), the author's intent is to imply that the tree is physically large relative to other trees or the authors experience.  When used metaphorically (\"Tomorrow is a big day\"), the author's intent to imply importance.  The intent behind other usages, like in \"She is a big person\", will remain somewhat ambiguous to a person and a cognitive NLP algorithm alike without additional information.\nAssign relative measures of meaning to a word, phrase, sentence or piece of text based on the information presented before and after the piece of text being analyzed, e.g., by means of a probabilistic context-free grammar (PCFG). The mathematical equation for such algorithms is presented in  US Patent 9269353:\n  \n    \n      \n        \n          R\n          M\n          M\n          (\n          t\n          o\n          k\n          e\n          \n            n\n            \n              N\n            \n          \n          )\n        \n        =\n        \n          P\n          M\n          M\n          (\n          t\n          o\n          k\n          e\n          \n            n\n            \n              N\n            \n          \n          )\n        \n        ×\n        \n          \n            1\n            \n              2\n              d\n            \n          \n        \n        \n          (\n          \n            \n              ∑\n              \n                i\n                =\n                −\n                d\n              \n              \n                d\n              \n            \n            \n              (\n              (\n              P\n              M\n              M\n              (\n              t\n              o\n              k\n              e\n              \n                n\n                \n                  N\n                  −\n                  1\n                \n              \n              )\n            \n            ×\n            \n              P\n              F\n              (\n              t\n              o\n              k\n              e\n              \n                n\n                \n                  N\n                \n              \n              ,\n              t\n              o\n              k\n              e\n              \n                n\n                \n                  N\n                  −\n                  1\n                \n              \n              )\n              \n                )\n                \n                  i\n                \n              \n            \n          \n          )\n        \n      \n    \n    {\\displaystyle {RMM(token_{N})}={PMM(token_{N})}\\times {\\frac {1}{2d}}\\left(\\sum _{i=-d}^{d}{((PMM(token_{N-1})}\\times {PF(token_{N},token_{N-1}))_{i}}\\right)}\n  Where\nRMM is the relative measure of meaning\ntoken is any block of text, sentence, phrase or word\nN is the number of tokens being analyzed\nPMM is the probable measure of meaning based on a corpora\nd is the location of the token along the sequence of N-1 tokens\nPF is the probability function specific to a languageTies with cognitive linguistics are part of the historical heritage of NLP, but they have been less frequently addressed since the statistical turn during the 1990s. Nevertheless, approaches to develop cognitive models towards technically operationalizable frameworks have been pursued in the context of various frameworks, e.g., of cognitive grammar, functional grammar, construction grammar, computational psycholinguistics and cognitive neuroscience (e.g., ACT-R), however, with limited uptake in mainstream NLP (as measured by presence on major conferences of the ACL). More recently, ideas of cognitive NLP have been revived as an approach to achieve explainability, e.g., under the notion of \"cognitive AI\". Likewise, ideas of cognitive NLP are inherent to neural models multimodal NLP (although rarely made explicit) and developments in artificial intelligence, specifically tools and technologies using large language model approaches and new directions in artificial general intelligence based on the free energy principle by British neuroscientist and theoretician at University College London Karl J. Friston.\n\nSee also\nReferences\nFurther reading\nExternal links\n Media related to Natural language processing at Wikimedia Commons",
    "Computer Vision": "Computer vision tasks include methods for acquiring, processing, analyzing and understanding digital images, and extraction of high-dimensional data from the real world in order to produce numerical or symbolic information, e.g. in the forms of decisions. Understanding in this context means the transformation of visual images (the input to the retina in the human analog) into descriptions of the world that make sense to thought processes and can elicit appropriate action. This image understanding can be seen as the disentangling of symbolic information from image data using models constructed with the aid of geometry, physics, statistics, and learning theory.\nThe scientific discipline of computer vision is concerned with the theory behind artificial systems that extract information from images. The image data can take many forms, such as video sequences, views from multiple cameras, multi-dimensional data from a 3D scanner, 3D point clouds from LiDaR sensors, or medical scanning devices. The technological discipline of computer vision seeks to apply its theories and models to the construction of computer vision systems.\nSub-domains of computer vision include scene reconstruction, object detection, event detection, activity recognition, video tracking, object recognition, 3D pose estimation, learning, indexing, motion estimation, visual servoing, 3D scene modeling, and image restoration.\nAdopting computer vision technology might be painstaking for organizations as there is no single point solution for it. There are very few companies that provide a unified and distributed platform or an Operating System where computer vision applications can be easily deployed and managed.\n\nDefinition\nComputer vision is an interdisciplinary field that deals with how computers can be made to gain high-level understanding from digital images or videos. From the perspective of engineering, it seeks to automate tasks that the human visual system can do. \"Computer vision is concerned with the automatic extraction, analysis and understanding of useful information from a single image or a sequence of images. It involves the development of a theoretical and algorithmic basis to achieve automatic visual understanding.\" As a scientific discipline, computer vision is concerned with the theory behind artificial systems that extract information from images. The image data can take many forms, such as video sequences, views from multiple cameras, or multi-dimensional data from a medical scanner. As a technological discipline, computer vision seeks to apply its theories and models for the construction of computer vision systems. Machine vision refers to a systems engineering discipline, especially in the context of factory automation, In more recent times the terms computer vision and machine vision have converged to a greater degree.: 13\n\nHistory\nIn the late 1960s, computer vision began at universities that were pioneering artificial intelligence. It was meant to mimic the human visual system, as a stepping stone to endowing robots with intelligent behavior. In 1966, it was believed that this could be achieved through an undergraduate summer project, by attaching a camera to a computer and having it \"describe what it saw\".What distinguished computer vision from the prevalent field of digital image processing at that time was a desire to extract three-dimensional structure from images with the goal of achieving full scene understanding. Studies in the 1970s formed the early foundations for many of the computer vision algorithms that exist today, including extraction of edges from images, labeling of lines, non-polyhedral and polyhedral modeling, representation of objects as interconnections of smaller structures, optical flow, and motion estimation.The next decade saw studies based on more rigorous mathematical analysis and quantitative aspects of computer vision. These include the concept of scale-space, the inference of shape from various cues such as shading, texture and focus, and contour models known as snakes. Researchers also realized that many of these mathematical concepts could be treated within the same optimization framework as regularization and Markov random fields.\nBy the 1990s, some of the previous research topics became more active than others. Research in projective 3-D reconstructions led to better understanding of camera calibration. With the advent of optimization methods for camera calibration, it was realized that a lot of the ideas were already explored in bundle adjustment theory from the field of photogrammetry. This led to methods for sparse 3-D reconstructions of scenes from multiple images. Progress was made on the dense stereo correspondence problem and further multi-view stereo techniques. At the same time, variations of graph cut were used to solve image segmentation. This decade also marked the first time statistical learning techniques were used in practice to recognize faces in images (see Eigenface). Toward the end of the 1990s, a significant change came about with the increased interaction between the fields of computer graphics and computer vision. This included image-based rendering, image morphing, view interpolation, panoramic image stitching and early light-field rendering.Recent work has seen the resurgence of feature-based methods, used in conjunction with machine learning techniques and complex optimization frameworks. \nThe advancement of Deep Learning techniques has brought further life to the field of computer vision. The accuracy of deep learning algorithms on several benchmark computer vision data sets for tasks ranging from classification, segmentation and optical flow has surpassed prior methods.\n\nRelated fields\nSolid-state physics\nSolid-state physics is another field that is closely related to computer vision. Most computer vision systems rely on image sensors, which detect electromagnetic radiation, which is typically in the form of either visible or infrared light. The sensors are designed using quantum physics. The process by which light interacts with surfaces is explained using physics. Physics explains the behavior of optics which are a core part of most imaging systems. Sophisticated image sensors even require quantum mechanics to provide a complete understanding of the image formation process. Also, various measurement problems in physics can be addressed using computer vision, for example, motion in fluids.\n\nNeurobiology\nNeurobiology has greatly influenced the development of computer vision algorithms. Over the last century, there has been an extensive study of eyes, neurons, and brain structures devoted to the processing visual stimuli in both humans and various animals. This has led to a coarse, yet convoluted, description of how natural vision systems operate in order to solve certain vision-related tasks. These results have led to a sub-field within computer vision where artificial systems are designed to mimic the processing and behavior of biological systems at different levels of complexity. Also, some of the learning-based methods developed within computer vision (e.g. neural net and deep learning based image and feature analysis and classification) have their background in neurobiology.  The Neocognitron, a neural network developed in the 1970s by Kunihiko Fukushima, is an early example of computer vision taking direct inspiration from neurobiology, specifically the primary visual cortex.\nSome strands of computer vision research are closely related to the study of biological vision—indeed, just as many strands of AI research are closely tied with research into human intelligence, and the use of stored knowledge to interpret, integrate and utilize visual information. The field of biological vision studies and models the physiological processes behind visual perception in humans and other animals. Computer vision, on the other hand, develops and describes the algorithms implemented in software and hardware behind artificial vision systems. An interdisciplinary exchange between biological and computer vision has proven fruitful for both fields.\n\nSignal processing\nYet another field related to computer vision is signal processing. Many methods for processing of one-variable signals, typically temporal signals, can be extended in a natural way to the processing of two-variable signals or multi-variable signals in computer vision. However, because of the specific nature of images, there are many methods developed within computer vision that have no counterpart in the processing of one-variable signals. Together with the multi-dimensionality of the signal, this defines a subfield in signal processing as a part of computer vision.\n\nRobotic navigation\nRobot navigation sometimes deals with autonomous path planning or deliberation for robotic systems to navigate through an environment. A detailed understanding of these environments is required to navigate through them. Information about the environment could be provided by a computer vision system, acting as a vision sensor and providing high-level information about the environment and the robot.\n\nOther fields\nBesides the above-mentioned views on computer vision, many of the related research topics can also be studied from a purely mathematical point of view. For example, many methods in computer vision are based on statistics, optimization or geometry. Finally, a significant part of the field is devoted to the implementation aspect of computer vision; how existing methods can be realized in various combinations of software and hardware, or how these methods can be modified in order to gain processing speed without losing too much performance. Computer vision is also used in fashion eCommerce, inventory management, patent search, furniture, and the beauty industry.\n\nDistinctions\nThe fields most closely related to computer vision are image processing, image analysis and machine vision. There is a significant overlap in the range of techniques and applications that these cover. This implies that the basic techniques that are used and developed in these fields are similar, something which can be interpreted as there is only one field with different names. On the other hand, it appears to be necessary for research groups, scientific journals, conferences, and companies to present or market themselves as belonging specifically to one of these fields and, hence, various characterizations which distinguish each of the fields from the others have been presented. In image processing, the input is an image and the output is an image as well, whereas in computer vision, an image or a video is taken as an input and the output could be an enhanced image, an understanding of the content of an image or even behavior of a computer system based on such understanding.\nComputer graphics produces image data from 3D models, and computer vision often produces 3D models from image data. There is also a trend towards a combination of the two disciplines, e.g., as explored in augmented reality.\nThe following characterizations appear relevant but should not be taken as universally accepted:\n\nImage processing and image analysis tend to focus on 2D images, how to transform one image to another, e.g., by pixel-wise operations such as contrast enhancement, local operations such as edge extraction or noise removal, or geometrical transformations such as rotating the image. This characterization implies that image processing/analysis neither requires assumptions nor produces interpretations about the image content.\nComputer vision includes 3D analysis from 2D images. This analyzes the 3D scene projected onto one or several images, e.g., how to reconstruct structure or other information about the 3D scene from one or several images. Computer vision often relies on more or less complex assumptions about the scene depicted in an image.\nMachine vision is the process of applying a range of technologies and methods to provide imaging-based automatic inspection, process control, and robot guidance in industrial applications. Machine vision tends to focus on applications, mainly in manufacturing, e.g., vision-based robots and systems for vision-based inspection, measurement, or picking (such as bin picking). This implies that image sensor technologies and control theory often are integrated with the processing of image data to control a robot and that real-time processing is emphasized by means of efficient implementations in hardware and software. It also implies that external conditions such as lighting can be and are often more controlled in machine vision than they are in general computer vision, which can enable the use of different algorithms.\nThere is also a field called imaging which primarily focuses on the process of producing images, but sometimes also deals with the processing and analysis of images. For example, medical imaging includes substantial work on the analysis of image data in medical applications.\nFinally, pattern recognition is a field that uses various methods to extract information from signals in general, mainly based on statistical approaches and artificial neural networks. A significant part of this field is devoted to applying these methods to image data.Photogrammetry also overlaps with computer vision, e.g., stereophotogrammetry vs. computer stereo vision.\n\nApplications\nApplications range from tasks such as industrial machine vision systems which, say, inspect bottles speeding by on a production line, to research into artificial intelligence and computers or robots that can comprehend the world around them. The computer vision and machine vision fields have significant overlap. Computer vision covers the core technology of automated image analysis which is used in many fields. Machine vision usually refers to a process of combining automated image analysis with other methods and technologies to provide automated inspection and robot guidance in industrial applications. In many computer-vision applications, computers are pre-programmed to solve a particular task, but methods based on learning are now becoming increasingly common. Examples of applications of computer vision include systems for:\n\nAutomatic inspection, e.g., in manufacturing applications;\nAssisting humans in identification tasks, e.g., a species identification system;\nControlling processes, e.g., an industrial robot;\nDetecting events, e.g., for visual surveillance or people counting, e.g., in the restaurant industry;\nInteraction, e.g., as the input to a device for computer-human interaction;\nModeling objects or environments, e.g., medical image analysis or topographical modeling;\nNavigation, e.g., by an autonomous vehicle or mobile robot;\nOrganizing information, e.g., for indexing databases of images and image sequences.\nTracking surfaces or planes in 3D coordinates for allowing Augmented Reality experiences.\n\nMedicine\nOne of the most prominent application fields is medical computer vision, or medical image processing, characterized by the extraction of information from image data to diagnose a patient. An example of this is the detection of tumours, arteriosclerosis or other malign changes, and a variety of dental pathologies; measurements of organ dimensions, blood flow, etc. are another example. It also supports medical research by providing new information: e.g., about the structure of the brain, or the quality of medical treatments. Applications of computer vision in the medical area also include enhancement of images interpreted by humans—ultrasonic images or X-ray images, for example—to reduce the influence of noise.\n\nMachine vision\nA second application area in computer vision is in industry, sometimes called machine vision, where information is extracted for the purpose of supporting a production process. One example is quality control where details or final products are being automatically inspected in order to find defects. One of the most prevalent fields for such inspection is the Wafer industry in which every single Wafer is being measured and inspected for inaccuracies or defects to prevent a computer chip from coming to market in an unusable manner. Another example is a measurement of the position and orientation of details to be picked up by a robot arm. Machine vision is also heavily used in the agricultural processes to remove undesirable food stuff from bulk material, a process called optical sorting.\n\nMilitary\nMilitary applications are probably one of the largest areas of computer vision. The obvious examples are the detection of enemy soldiers or vehicles and missile guidance. More advanced systems for missile guidance send the missile to an area rather than a specific target, and target selection is made when the missile reaches the area based on locally acquired image data. Modern military concepts, such as \"battlefield awareness\", imply that various sensors, including image sensors, provide a rich set of information about a combat scene that can be used to support strategic decisions. In this case, automatic processing of the data is used to reduce complexity and to fuse information from multiple sensors to increase reliability.\n\nAutonomous vehicles\nOne of the newer application areas is autonomous vehicles, which include submersibles, land-based vehicles (small robots with wheels, cars, or trucks), aerial vehicles, and unmanned aerial vehicles (UAV). The level of autonomy ranges from fully autonomous (unmanned) vehicles to vehicles where computer-vision-based systems support a driver or a pilot in various situations. Fully autonomous vehicles typically use computer vision for navigation, e.g., for knowing where they are or mapping their environment (SLAM), for detecting obstacles. It can also be used for detecting certain task-specific events, e.g., a UAV looking for forest fires. Examples of supporting systems are obstacle warning systems in cars, cameras and LiDAR sensors in vehicles, and systems for autonomous landing of aircraft. Several car manufacturers have demonstrated systems for autonomous driving of cars. There are ample examples of military autonomous vehicles ranging from advanced missiles to UAVs for recon missions or missile guidance. Space exploration is already being made with autonomous vehicles using computer vision, e.g., NASA's Curiosity and CNSA's Yutu-2 rover.\n\nTactile feedback\nMaterials such as rubber and silicon are being used to create sensors that allow for applications such as detecting micro undulations and calibrating robotic hands. Rubber can be used in order to create a mold that can be placed over a finger, inside of this mold would be multiple strain gauges. The finger mold and sensors could then be placed on top of a small sheet of rubber containing an array of rubber pins. A user can then wear the finger mold and trace a surface. A computer can then read the data from the strain gauges and measure if one or more of the pins is being pushed upward. If a pin is being pushed upward then the computer can recognize this as an imperfection in the surface. This sort of technology is useful in order to receive accurate data on imperfections on a very large surface. Another variation of this finger mold sensor are sensors that contain a camera suspended in silicon. The silicon forms a dome around the outside of the camera and embedded in the silicon are point markers that are equally spaced. These cameras can then be placed on devices such as robotic hands in order to allow the computer to receive highly accurate tactile data.Other application areas include:\n\nSupport of visual effects creation for cinema and broadcast, e.g., camera tracking (match moving).\nSurveillance.\nDriver drowsiness detection\nTracking and counting organisms in the biological sciences\n\nTypical tasks\nEach of the application areas described above employ a range of computer vision tasks; more or less well-defined measurement problems or processing problems, which can be solved using a variety of methods. Some examples of typical computer vision tasks are presented below.\nComputer vision tasks include methods for acquiring, processing, analyzing and understanding digital images, and extraction of high-dimensional data from the real world in order to produce numerical or symbolic information, e.g., in the forms of decisions. Understanding in this context means the transformation of visual images (the input of the retina) into descriptions of the world that can interface with other thought processes and elicit appropriate action. This image understanding can be seen as the disentangling of symbolic information from image data using models constructed with the aid of geometry, physics, statistics, and learning theory.\n\nRecognition\nThe classical problem in computer vision, image processing, and machine vision is that of determining whether or not the image data contains some specific object, feature, or activity. Different varieties of recognition problem are described in the literature.\nObject recognition (also called object classification) – one or several pre-specified or learned objects or object classes can be recognized, usually together with their 2D positions in the image or 3D poses in the scene. Blippar, Google Goggles, and LikeThat provide stand-alone programs that illustrate this functionality.\nIdentification – an individual instance of an object is recognized. Examples include identification of a specific person's face or fingerprint, identification of handwritten digits, or identification of a specific vehicle.\nDetection – the image data are scanned for a specific objects along with their locations. Examples include the detection of an obstacle in the car's field of view and possible abnormal cells or tissues in medical images or the detection of a vehicle in an automatic road toll system. Detection based on relatively simple and fast computations is sometimes used for finding smaller regions of interesting image data which can be further analyzed by more computationally demanding techniques to produce a correct interpretation.Currently, the best algorithms for such tasks are based on convolutional neural networks. An illustration of their capabilities is given by the ImageNet Large Scale Visual Recognition Challenge; this is a benchmark in object classification and detection, with millions of images and 1000 object classes used in the competition. Performance of convolutional neural networks on the ImageNet tests is now close to that of humans. The best algorithms still struggle with objects that are small or thin, such as a small ant on a stem of a flower or a person holding a quill in their hand. They also have trouble with images that have been distorted with filters (an increasingly common phenomenon with modern digital cameras). By contrast, those kinds of images rarely trouble humans. Humans, however, tend to have trouble with other issues. For example, they are not good at classifying objects into fine-grained classes, such as the particular breed of dog or species of bird, whereas convolutional neural networks handle this with ease.Several specialized tasks based on recognition exist, such as:\n\nContent-based image retrieval – finding all images in a larger set of images which have a specific content. The content can be specified in different ways, for example in terms of similarity relative to a target image (give me all images similar to image X) by utilizing reverse image search techniques, or in terms of high-level search criteria given as text input (give me all images which contain many houses, are taken during winter and have no cars in them).Pose estimation – estimating the position or orientation of a specific object relative to the camera. An example application for this technique would be assisting a robot arm in retrieving objects from a conveyor belt in an assembly line situation or picking parts from a bin.\nOptical character recognition (OCR) – identifying characters in images of printed or handwritten text, usually with a view to encoding the text in a format more amenable to editing or indexing (e.g. ASCII). A related task is reading of 2D codes such as data matrix and QR codes.\nFacial recognition –  a technology that enables the matching of faces in digital images or video frames to a face database, which is now widely used for mobile phone facelock, smart door locking, etc.\nEmotion recognition – a subset of facial recognition, emotion recognition refers to the process of classifying human emotions. Psychologists caution, however, that internal emotions cannot be reliably detected from faces.\nShape Recognition Technology (SRT) in people counter systems differentiating human beings (head and shoulder patterns) from objects.\nHuman activity recognition - deals with recognizing the activity from a series of video frames, such as, if the person is picking up an object or walking.\n\nMotion analysis\nSeveral tasks relate to motion estimation where an image sequence is processed to produce an estimate of the velocity either at each points in the image or in the 3D scene or even of the camera that produces the images. Examples of such tasks are:\n\nEgomotion – determining the 3D rigid motion (rotation and translation) of the camera from an image sequence produced by the camera.\nTracking – following the movements of a (usually) smaller set of interest points or objects (e.g., vehicles, objects, humans or other organisms) in the image sequence. This has vast industry applications as most of high-running machinery can be monitored in this way.\nOptical flow – to determine, for each point in the image, how that point is moving relative to the image plane, i.e., its apparent motion. This motion is a result both of how the corresponding 3D point is moving in the scene and how the camera is moving relative to the scene.\n\nScene reconstruction\nGiven one or (typically) more images of a scene, or a video, scene reconstruction aims at computing a 3D model of the scene. In the simplest case, the model can be a set of 3D points. More sophisticated methods produce a complete 3D surface model. The advent of 3D imaging not requiring motion or scanning, and related processing algorithms is enabling rapid advances in this field. Grid-based 3D sensing can be used to acquire 3D images from multiple angles. Algorithms are now available to stitch multiple 3D images together into point clouds and 3D models.\n\nImage restoration\nImage restoration comes into picture when the original image is degraded or damaged due to some external factors like lens wrong positioning, transmission interference, low lighting or motion blurs etc. which is referred to as noise. When the images are degraded or damaged the information to be extracted from that also gets damaged. Therefore we need to recover or restore the image as it was intended to be. The aim of image restoration is the removal of noise (sensor noise, motion blur, etc.) from images. The simplest possible approach for noise removal is various types of filters such as low-pass filters or median filters. More sophisticated methods assume a model of how the local image structures look, to distinguish them from noise. By first analyzing the image data in terms of the local image structures, such as lines or edges, and then controlling the filtering based on local information from the analysis step, a better level of noise removal is usually obtained compared to the simpler approaches.\nAn example in this field is inpainting.\n\nSystem methods\nThe organization of a computer vision system is highly application-dependent. Some systems are stand-alone applications that solve a specific measurement or detection problem, while others constitute a sub-system of a larger design which, for example, also contains sub-systems for control of mechanical actuators, planning, information databases, man-machine interfaces, etc. The specific implementation of a computer vision system also depends on whether its functionality is pre-specified or if some part of it can be learned or modified during operation. Many functions are unique to the application. There are, however, typical functions that are found in many computer vision systems.\n\nImage acquisition – A digital image is produced by one or several image sensors, which, besides various types of light-sensitive cameras, include range sensors, tomography devices, radar, ultra-sonic cameras, etc. Depending on the type of sensor, the resulting image data is an ordinary 2D image, a 3D volume, or an image sequence. The pixel values typically correspond to light intensity in one or several spectral bands (gray images or colour images), but can also be related to various physical measures, such as depth, absorption or reflectance of sonic or electromagnetic waves, or nuclear magnetic resonance.\nPre-processing – Before a computer vision method can be applied to image data in order to extract some specific piece of information, it is usually necessary to process the data in order to assure that it satisfies certain assumptions implied by the method. Examples are:\nRe-sampling to assure that the image coordinate system is correct.\nNoise reduction to assure that sensor noise does not introduce false information.\nContrast enhancement to assure that relevant information can be detected.\nScale space representation to enhance image structures at locally appropriate scales.\nFeature extraction – Image features at various levels of complexity are extracted from the image data. Typical examples of such features are:\nLines, edges and ridges.\nLocalized interest points such as corners, blobs or points.More complex features may be related to texture, shape or motion.Detection/segmentation – At some point in the processing a decision is made about which image points or regions of the image are relevant for further processing. Examples are:\nSelection of a specific set of interest points.\nSegmentation of one or multiple image regions that contain a specific object of interest.\nSegmentation of image into nested scene architecture comprising foreground, object groups, single objects or salient object parts (also referred to as spatial-taxon scene hierarchy), while the visual salience is often implemented as spatial and temporal attention.\nSegmentation or co-segmentation of one or multiple videos into a series of per-frame foreground masks, while maintaining its temporal semantic continuity.\nHigh-level processing – At this step the input is typically a small set of data, for example a set of points or an image region which is assumed to contain a specific object. The remaining processing deals with, for example:\nVerification that the data satisfy model-based and application-specific assumptions.\nEstimation of application-specific parameters, such as object pose or object size.\nImage recognition – classifying a detected object into different categories.\nImage registration – comparing and combining two different views of the same object.\nDecision making Making the final decision required for the application, for example:\nPass/fail on automatic inspection applications.\nMatch/no-match in recognition applications.\nFlag for further human review in medical, military, security and recognition applications.\n\nImage-understanding systems\nImage-understanding systems (IUS) include three levels of abstraction as follows: low level includes image primitives such as edges, texture elements, or regions; intermediate level includes boundaries, surfaces and volumes; and high level includes objects, scenes, or events. Many of these requirements are entirely topics for further research.\nThe representational requirements in the designing of IUS for these levels are: representation of prototypical concepts, concept organization, spatial knowledge, temporal knowledge, scaling, and description by comparison and differentiation.\nWhile inference refers to the process of deriving new, not explicitly represented facts from currently known facts, control refers to the process that selects which of the many inference, search, and matching techniques should be applied at a particular stage of processing. Inference and control requirements for IUS are: search and hypothesis activation, matching and hypothesis testing, generation and use of expectations, change and focus of attention, certainty and strength of belief, inference and goal satisfaction.\n\nHardware\nThere are many kinds of computer vision systems; however, all of them contain these basic elements: a power source, at least one image acquisition device (camera, ccd, etc.), a processor, and control and communication cables or some kind of wireless interconnection mechanism. In addition, a practical vision system contains software, as well as a display in order to monitor the system. Vision systems for inner spaces, as most industrial ones, contain an illumination system and may be placed in a controlled environment. Furthermore, a completed system includes many accessories such as camera supports, cables and connectors.\nMost computer vision systems use visible-light cameras passively viewing a scene at frame rates of at most 60 frames per second (usually far slower).\nA few computer vision systems use image-acquisition hardware with active illumination or something other than visible light or both, such as structured-light 3D scanners, thermographic cameras, hyperspectral imagers, radar imaging, lidar scanners, magnetic resonance images, side-scan sonar, synthetic aperture sonar, etc. Such hardware captures \"images\" that are then processed often using the same computer vision algorithms used to process visible-light images.\nWhile traditional broadcast and consumer video systems operate at a rate of 30 frames per second, advances in digital signal processing and consumer graphics hardware has made high-speed image acquisition, processing, and display possible for real-time systems on the order of hundreds to thousands of frames per second. For applications in robotics, fast, real-time video systems are critically important and often can simplify the processing needed for certain algorithms. When combined with a high-speed projector, fast image acquisition allows 3D measurement and feature tracking to be realized.Egocentric vision systems are composed of a wearable camera that automatically take pictures from a first-person perspective.\nAs of 2016, vision processing units are emerging as a new class of processor, to complement CPUs and graphics processing units (GPUs) in this role.\n\nSee also\nLists\nOutline of computer vision\nList of emerging technologies\nOutline of artificial intelligence\n\nReferences\nFurther reading\nJames E. Dobson (2023). The Birth of Computer Vision. University of Minnesota Press. ISBN 978-1-5179-1421-9.\nDavid Marr (1982). Vision. W. H. Freeman and Company. ISBN 978-0-7167-1284-8.\nAzriel Rosenfeld; Avinash Kak (1982). Digital Picture Processing. Academic Press. ISBN 978-0-12-597301-4.\nBarghout, Lauren; Lawrence W. Lee (2003). Perceptual information processing system. U.S. Patent Application 10/618,543. ISBN 978-0-262-08159-7.\nBerthold K.P. Horn (1986). Robot Vision. MIT Press. ISBN 978-0-262-08159-7.\nMichael C. Fairhurst (1988). Computer Vision for robotic systems. Prentice Hall. ISBN 978-0-13-166919-2.\nOlivier Faugeras (1993). Three-Dimensional Computer Vision, A Geometric Viewpoint. MIT Press. ISBN 978-0-262-06158-2.\nTony Lindeberg (1994). Scale-Space Theory in Computer Vision. Springer. ISBN 978-0-7923-9418-1.\nJames L. Crowley and Henrik I. Christensen (Eds.) (1995). Vision as Process. Springer-Verlag. ISBN 978-3-540-58143-7.\nGösta H. Granlund; Hans Knutsson (1995). Signal Processing for Computer Vision. Kluwer Academic Publisher. ISBN 978-0-7923-9530-0.\nReinhard Klette; Karsten Schluens; Andreas Koschan (1998). Computer Vision – Three-Dimensional Data from Images. Springer, Singapore. ISBN 978-981-3083-71-4.\nEmanuele Trucco; Alessandro Verri (1998). Introductory Techniques for 3-D Computer Vision. Prentice Hall. ISBN 978-0-13-261108-4.\nBernd Jähne (2002). Digital Image Processing. Springer. ISBN 978-3-540-67754-3.\nRichard Hartley and Andrew Zisserman (2003). Multiple View Geometry in Computer Vision. Cambridge University Press. ISBN 978-0-521-54051-3.\nGérard Medioni; Sing Bing Kang (2004). Emerging Topics in Computer Vision. Prentice Hall. ISBN 978-0-13-101366-7.\nR. Fisher; K Dawson-Howe; A. Fitzgibbon; C. Robertson; E. Trucco (2005). Dictionary of Computer Vision and Image Processing. John Wiley. ISBN 978-0-470-01526-1.\nNikos Paragios and Yunmei Chen and Olivier Faugeras (2005). Handbook of Mathematical Models in Computer Vision. Springer. ISBN 978-0-387-26371-7.\nWilhelm Burger; Mark J. Burge (2007). Digital Image Processing: An Algorithmic Approach Using Java. Springer. ISBN 978-1-84628-379-6. Archived from the original on 2014-05-17. Retrieved 2007-06-13.\nPedram Azad; Tilo Gockel; Rüdiger Dillmann (2008). Computer Vision – Principles and Practice. Elektor International Media BV. ISBN 978-0-905705-71-2.\nRichard Szeliski (2010). Computer Vision: Algorithms and Applications. Springer-Verlag. ISBN 978-1848829343.\nJ. R. Parker (2011). Algorithms for Image Processing and Computer Vision (2nd ed.). Wiley. ISBN 978-0470643853.\nRichard J. Radke (2013). Computer Vision for Visual Effects. Cambridge University Press. ISBN 978-0-521-76687-6.\nNixon, Mark; Aguado, Alberto (2019). Feature Extraction and Image Processing for Computer Vision (4th ed.). Academic Press. ISBN 978-0128149768.\n\nExternal links\nUSC Iris computer vision conference list\nComputer vision papers on the web – a complete list of papers of the most relevant computer vision conferences.\nComputer Vision Online Archived 2011-11-30 at the Wayback Machine – news, source code, datasets and job offers related to computer vision\nCVonline – Bob Fisher's Compendium of Computer Vision.\nBritish Machine Vision Association – supporting computer vision research within the UK via the BMVC and MIUA conferences, Annals of the BMVA (open-source journal), BMVA Summer School and one-day meetings\nComputer Vision Container, Joe Hoeller GitHub: Widely adopted open-source container for GPU accelerated computer vision applications. Used by researchers, universities, private companies as well as the U.S. Gov't.",
    "Speech Recognition": "Speech recognition is an interdisciplinary subfield of computer science and computational linguistics that develops methodologies and technologies that enable the recognition and translation of spoken language into text by computers. It is also known as automatic speech recognition (ASR), computer speech recognition or speech to text (STT). It incorporates knowledge and research in the computer science, linguistics and computer engineering fields. The reverse process is speech synthesis.\nSome speech recognition systems require \"training\" (also called \"enrollment\") where an individual speaker reads text or isolated vocabulary into the system. The system analyzes the person's specific voice and uses it to fine-tune the recognition of that person's speech, resulting in increased accuracy. Systems that do not use training are called \"speaker-independent\" systems. Systems that use training are called \"speaker dependent\".\nSpeech recognition applications include voice user interfaces such as voice dialing (e.g. \"call home\"), call routing (e.g. \"I would like to make a collect call\"), domotic appliance control, search key words (e.g. find a podcast where particular words were spoken), simple data entry (e.g., entering a credit card number), preparation of structured documents (e.g. a radiology report), determining speaker characteristics, speech-to-text processing (e.g., word processors or emails), and aircraft (usually termed direct voice input).\nThe term voice recognition or speaker identification refers to identifying the speaker, rather than what they are saying. Recognizing the speaker can simplify the task of translating speech in systems that have been trained on a specific person's voice or it can be used to authenticate or verify the identity of a speaker as part of a security process.\nFrom the technology perspective, speech recognition has a long history with several waves of major innovations. Most recently, the field has benefited from advances in deep learning and big data. The advances are evidenced not only by the surge of academic papers published in the field, but more importantly by the worldwide industry adoption of a variety of deep learning methods in designing and deploying speech recognition systems.\n\nHistory\nThe key areas of growth were: vocabulary size, speaker independence, and processing speed.\n\nPre-1970\n1952 – Three Bell Labs researchers, Stephen Balashek, R. Biddulph, and K. H. Davis built a system called \"Audrey\" for single-speaker digit recognition. Their system located the formants in the power spectrum of each utterance.\n1960 – Gunnar Fant developed and published the source-filter model of speech production.\n1962 – IBM demonstrated its 16-word \"Shoebox\" machine's speech recognition capability at the 1962 World's Fair.\n1966 – Linear predictive coding (LPC), a speech coding method, was first proposed by Fumitada Itakura of Nagoya University and Shuzo Saito of Nippon Telegraph and Telephone (NTT), while working on speech recognition.\n1969 – Funding at Bell Labs dried up for several years when, in 1969, the influential John Pierce wrote an open letter that was critical of and defunded speech recognition research. This defunding lasted until Pierce retired and James L. Flanagan took over.Raj Reddy was the first person to take on continuous speech recognition as a graduate student at Stanford University in the late 1960s. Previous systems required users to pause after each word. Reddy's system issued spoken commands for playing chess.\nAround this time Soviet researchers invented the dynamic time warping (DTW) algorithm and used it to create a recognizer capable of operating on a 200-word vocabulary. DTW processed speech by dividing it into short frames, e.g. 10ms segments, and processing each frame as a single unit. Although DTW would be superseded by later algorithms, the technique carried on. Achieving speaker independence remained unsolved at this time period.\n\n1970–1990\n1971 – DARPA funded five years for Speech Understanding Research, speech recognition research seeking a minimum vocabulary size of 1,000 words. They thought speech understanding would be key to making progress in speech recognition, but this later proved untrue. BBN, IBM, Carnegie Mellon and Stanford Research Institute all participated in the program. This revived speech recognition research post John Pierce's letter.1972 – The IEEE Acoustics, Speech, and Signal Processing group held a conference in Newton, Massachusetts.\n1976 – The first ICASSP was held in Philadelphia, which since then has been a major venue for the publication of research on speech recognition.During the late 1960s Leonard Baum developed the mathematics of Markov chains at the Institute for Defense Analysis. A decade later, at CMU, Raj Reddy's students James Baker and Janet M. Baker began using the Hidden Markov Model (HMM) for speech recognition. James Baker had learned about HMMs from a summer job at the Institute of Defense Analysis during his undergraduate education. The use of HMMs allowed researchers to combine different sources of knowledge, such as acoustics, language, and syntax, in a unified probabilistic model.\n\nBy the mid-1980s IBM's Fred Jelinek's team created a voice activated typewriter called Tangora, which could handle a 20,000-word vocabulary Jelinek's statistical approach put less emphasis on emulating the way the human brain processes and understands speech in favor of using statistical modeling techniques like HMMs. (Jelinek's group independently discovered the application of HMMs to speech.) This was controversial with linguists since HMMs are too simplistic to account for many common features of human languages. However, the HMM proved to be a highly useful way for modeling speech and replaced dynamic time warping to become the dominant speech recognition algorithm in the 1980s.1982 – Dragon Systems, founded by James and Janet M. Baker, was one of IBM's few competitors.\n\nPractical speech recognition\nThe 1980s also saw the introduction of the n-gram language model.\n\n1987 – The back-off model allowed language models to use multiple length n-grams, and CSELT used HMM to recognize languages (both in software and in hardware specialized processors, e.g. RIPAC).Much of the progress in the field is owed to the rapidly increasing capabilities of computers. At the end of the DARPA program in 1976, the best computer available to researchers was the PDP-10 with 4 MB ram. It could take up to 100 minutes to decode just 30 seconds of speech.Two practical products were:\n\n1984 – was released the Apricot Portable with up to 4096 words support, of which only 64 could be held in RAM at a time.\n1987 – a recognizer from Kurzweil Applied Intelligence\n1990 – Dragon Dictate, a consumer product released in 1990 AT&T deployed the Voice Recognition Call Processing service in 1992 to route telephone calls without the use of a human operator. The technology was developed by Lawrence Rabiner and others at Bell Labs.By this point, the vocabulary of the typical commercial speech recognition system was larger than the average human vocabulary. Raj Reddy's former student, Xuedong Huang, developed the Sphinx-II system at CMU. The Sphinx-II system was the first to do speaker-independent, large vocabulary, continuous speech recognition and it had the best performance in DARPA's 1992 evaluation. Handling continuous speech with a large vocabulary was a major milestone in the history of speech recognition. Huang went on to found the speech recognition group at Microsoft in 1993. Raj Reddy's student Kai-Fu Lee joined Apple where, in 1992, he helped develop a speech interface prototype for the Apple computer known as Casper.\nLernout & Hauspie, a Belgium-based speech recognition company, acquired several other companies, including Kurzweil Applied Intelligence in 1997 and Dragon Systems in 2000. The L&H speech technology was used in the Windows XP operating system. L&H was an industry leader until an accounting scandal brought an end to the company in 2001. The speech technology from L&H was bought by ScanSoft which became Nuance in 2005. Apple originally licensed software from Nuance to provide speech recognition capability to its digital assistant Siri.\n\n2000s\nIn the 2000s DARPA sponsored two speech recognition programs: Effective Affordable Reusable Speech-to-Text (EARS) in 2002 and Global Autonomous Language Exploitation (GALE). Four teams participated in the EARS program: IBM, a team led by BBN with LIMSI and Univ. of Pittsburgh, Cambridge University, and a team composed of ICSI, SRI and University of Washington. EARS funded the collection of the Switchboard telephone speech corpus containing 260 hours of recorded conversations from over 500 speakers. The GALE program focused on Arabic and Mandarin broadcast news speech. Google's first effort at speech recognition came in 2007 after hiring some researchers from Nuance. The first product was GOOG-411, a telephone based directory service. The recordings from GOOG-411 produced valuable data that helped Google improve their recognition systems. Google Voice Search is now supported in over 30 languages.\nIn the United States, the National Security Agency has made use of a type of speech recognition for keyword spotting since at least 2006. This technology allows analysts to search through large volumes of recorded conversations and isolate mentions of keywords. Recordings can be indexed and analysts can run queries over the database to find conversations of interest. Some government research programs focused on intelligence applications of speech recognition, e.g. DARPA's EARS's program and IARPA's Babel program.\nIn the early 2000s, speech recognition was still dominated by traditional approaches such as Hidden Markov Models combined with feedforward artificial neural networks.\nToday, however, many aspects of speech recognition have been taken over by a deep learning method called Long short-term memory (LSTM), a recurrent neural network published by Sepp Hochreiter & Jürgen Schmidhuber in 1997. LSTM RNNs avoid the vanishing gradient problem and can learn \"Very Deep Learning\" tasks that require memories of events that happened thousands of discrete time steps ago, which is important for speech.\nAround 2007, LSTM trained by Connectionist Temporal Classification (CTC) started to outperform traditional speech recognition in certain applications. In 2015, Google's speech recognition reportedly experienced a dramatic performance jump of 49% through CTC-trained LSTM, which is now available through Google Voice to all smartphone users. Transformers, a type of neural network based on solely on attention, have been widely adopted in computer vision and language modeling, sparking the interest of adapting such models to new domains, including speech recognition. Some recent papers reported superior performance levels using transformer models for speech recognition, but these models usually require large scale training datasets to reach high performance levels.\nThe use of deep feedforward (non-recurrent) networks for acoustic modeling was introduced during the later part of 2009 by Geoffrey Hinton and his students at the University of Toronto and by Li Deng and colleagues at Microsoft Research, initially in the collaborative work between Microsoft and the University of Toronto which was subsequently expanded to include IBM and Google (hence \"The shared views of four research groups\" subtitle in their 2012 review paper). A Microsoft research executive called this innovation \"the most dramatic change in accuracy since 1979\". In contrast to the steady incremental improvements of the past few decades, the application of deep learning decreased word error rate by 30%. This innovation was quickly adopted across the field. Researchers have begun to use deep learning techniques for language modeling as well.\nIn the long history of speech recognition, both shallow form and deep form (e.g. recurrent nets) of artificial neural networks had been explored for many years during 1980s, 1990s and a few years into the 2000s.\nBut these methods never won over the non-uniform internal-handcrafting Gaussian mixture model/Hidden Markov model (GMM-HMM) technology based on generative models of speech trained discriminatively. A number of key difficulties had been methodologically analyzed in the 1990s, including gradient diminishing and weak temporal correlation structure in the neural predictive models. All these difficulties were in addition to the lack of big training data and big computing power in these early days. Most speech recognition researchers who understood such barriers hence subsequently moved away from neural nets to pursue generative modeling approaches until the recent resurgence of deep learning starting around 2009–2010 that had overcome all these difficulties. Hinton et al. and Deng et al. reviewed part of this recent history about how their collaboration with each other and then with colleagues across four groups (University of Toronto, Microsoft, Google, and IBM) ignited a renaissance of applications of deep feedforward neural networks to speech recognition.\n\n2010s\nBy early 2010s speech recognition, also called voice recognition was clearly differentiated from speaker recognition, and speaker independence was considered a major breakthrough. Until then, systems required a \"training\" period.  A 1987 ad for a doll had carried the tagline \"Finally, the doll that understands you.\" – despite the fact that it was described as \"which children could train to respond to their voice\".In 2017, Microsoft researchers reached a historical human parity milestone of transcribing conversational telephony speech on the widely benchmarked Switchboard task. Multiple deep learning models were used to optimize speech recognition accuracy. The speech recognition word error rate was reported to be as low as 4 professional human transcribers working together on the same benchmark, which was funded by IBM Watson speech team on the same task.\n\nModels, methods, and algorithms\nBoth acoustic modeling and language modeling are important parts of modern statistically based speech recognition algorithms. Hidden Markov models (HMMs) are widely used in many systems. Language modeling is also used in many other natural language processing applications such as document classification or statistical machine translation.\n\nHidden Markov models\nModern general-purpose speech recognition systems are based on hidden Markov models. These are statistical models that output a sequence of symbols or quantities. HMMs are used in speech recognition because a speech signal can be viewed as a piecewise stationary signal or a short-time stationary signal. In a short time scale (e.g., 10 milliseconds), speech can be approximated as a stationary process. Speech can be thought of as a Markov model for many stochastic purposes.\nAnother reason why HMMs are popular is that they can be trained automatically and are simple and computationally feasible to use. In speech recognition, the hidden Markov model would output a sequence of n-dimensional real-valued vectors (with n being a small integer, such as 10), outputting one of these every 10 milliseconds. The vectors would consist of cepstral coefficients, which are obtained by taking a Fourier transform of a short time window of speech and decorrelating the spectrum using a cosine transform, then taking the first (most significant) coefficients. The hidden Markov model will tend to have in each state a statistical distribution that is a mixture of diagonal covariance Gaussians, which will give a likelihood for each observed vector. Each word, or (for more general speech recognition systems), each phoneme, will have a different output distribution; a hidden Markov model for a sequence of words or phonemes is made by concatenating the individual trained hidden Markov models for the separate words and phonemes.\nDescribed above are the core elements of the most common, HMM-based approach to speech recognition. Modern speech recognition systems use various combinations of a number of standard techniques in order to improve results over the basic approach described above. A typical large-vocabulary system would need context dependency for the phonemes (so phonemes with different left and right context have different realizations as HMM states); it would use cepstral normalization to normalize for a different speaker and recording conditions; for further speaker normalization, it might use vocal tract length normalization (VTLN) for male-female normalization and maximum likelihood linear regression (MLLR) for more general speaker adaptation. The features would have so-called delta and delta-delta coefficients to capture speech dynamics and in addition, might use heteroscedastic linear discriminant analysis (HLDA); or might skip the delta and delta-delta coefficients and use splicing and an LDA-based projection followed perhaps by heteroscedastic linear discriminant analysis or a global semi-tied co variance transform (also known as maximum likelihood linear transform, or MLLT). Many systems use so-called discriminative training techniques that dispense with a purely statistical approach to HMM parameter estimation and instead optimize some classification-related measure of the training data. Examples are maximum mutual information (MMI), minimum classification error (MCE), and minimum phone error (MPE).\nDecoding of the speech (the term for what happens when the system is presented with a new utterance and must compute the most likely source sentence) would probably use the Viterbi algorithm to find the best path, and here there is a choice between dynamically creating a combination hidden Markov model, which includes both the acoustic and language model information and combining it statically beforehand (the finite state transducer, or FST, approach).\nA possible improvement to decoding is to keep a set of good candidates instead of just keeping the best candidate, and to use a better scoring function (re scoring) to rate these good candidates so that we may pick the best one according to this refined score. The set of candidates can be kept either as a list (the N-best list approach) or as a subset of the models (a lattice). Re scoring is usually done by trying to minimize the Bayes risk (or an approximation thereof): Instead of taking the source sentence with maximal probability, we try to take the sentence that minimizes the expectancy of a given loss function with regards to all possible transcriptions (i.e., we take the sentence that minimizes the average distance to other possible sentences weighted by their estimated probability). The loss function is usually the Levenshtein distance, though it can be different distances for specific tasks; the set of possible transcriptions is, of course, pruned to maintain tractability. Efficient algorithms have been devised to re score lattices represented as weighted finite state transducers with edit distances represented themselves as a finite state transducer verifying certain assumptions.\n\nDynamic time warping (DTW)-based speech recognition\nDynamic time warping is an approach that was historically used for speech recognition but has now largely been displaced by the more successful HMM-based approach.\nDynamic time warping is an algorithm for measuring similarity between two sequences that may vary in time or speed. For instance, similarities in walking patterns would be detected, even if in one video the person was walking slowly and if in another he or she were walking more quickly, or even if there were accelerations and deceleration during the course of one observation. DTW has been applied to video, audio, and graphics – indeed, any data that can be turned into a linear representation can be analyzed with DTW.\nA well-known application has been automatic speech recognition, to cope with different speaking speeds. In general, it is a method that allows a computer to find an optimal match between two given sequences (e.g., time series) with certain restrictions. That is, the sequences are \"warped\" non-linearly to match each other. This sequence alignment method is often used in the context of hidden Markov models.\n\nNeural networks\nNeural networks emerged as an attractive acoustic modeling approach in ASR in the late 1980s. Since then, neural networks have been used in many aspects of speech recognition such as phoneme classification, phoneme classification through multi-objective evolutionary algorithms, isolated word recognition, audiovisual speech recognition, audiovisual speaker recognition and speaker adaptation.\nNeural networks make fewer explicit assumptions about feature statistical properties than HMMs and have several qualities making them attractive recognition models for speech recognition. When used to estimate the probabilities of a speech feature segment, neural networks allow discriminative training in a natural and efficient manner. However, in spite of their effectiveness in classifying short-time units such as individual phonemes and isolated words, early neural networks were rarely successful for continuous recognition tasks because of their limited ability to model temporal dependencies.\nOne approach to this limitation was to use neural networks as a pre-processing, feature transformation or dimensionality reduction, step prior to HMM based recognition. However, more recently, LSTM and related recurrent neural networks (RNNs), Time Delay Neural Networks(TDNN's), and transformers have demonstrated improved performance in this area.\n\nDeep feedforward and recurrent neural networks\nDeep Neural Networks and Denoising Autoencoders are also under investigation. A deep feedforward neural network (DNN) is an artificial neural network with multiple hidden layers of units between the input and output layers. Similar to shallow neural networks, DNNs can model complex non-linear relationships. DNN architectures generate compositional models, where extra layers enable composition of features from lower layers, giving a huge learning capacity and thus the potential of modeling complex patterns of speech data.A success of DNNs in large vocabulary speech recognition occurred in 2010 by industrial researchers, in collaboration with academic researchers, where large output layers of the DNN based on context dependent HMM states constructed by decision trees were adopted. See comprehensive reviews of this development and of the state of the art as of October 2014 in the recent Springer book from Microsoft Research. See also the related background of automatic speech recognition and the impact of various machine learning paradigms, notably including deep learning, in\nrecent overview articles.One fundamental principle of deep learning is to do away with hand-crafted feature engineering and to use raw features. This principle was first explored successfully in the architecture of deep autoencoder on the \"raw\" spectrogram or linear filter-bank features, showing its superiority over the Mel-Cepstral features which contain a few stages of fixed transformation from spectrograms.\nThe true \"raw\" features of speech, waveforms, have more recently been shown to produce excellent larger-scale speech recognition results.\n\nEnd-to-end automatic speech recognition\nSince 2014, there has been much research interest in \"end-to-end\" ASR. Traditional phonetic-based (i.e., all HMM-based model) approaches required separate components and training for the pronunciation, acoustic, and language model. End-to-end models jointly learn all the components of the speech recognizer. This is valuable since it simplifies the training process and deployment process. For example, a n-gram language model is required for all HMM-based systems, and a typical n-gram language model often takes several gigabytes in memory making them impractical to deploy on mobile devices. Consequently, modern commercial ASR systems from Google and Apple (as of 2017) are deployed on the cloud and require a network connection as opposed to the device locally.\nThe first attempt at end-to-end ASR was with Connectionist Temporal Classification (CTC)-based systems introduced by Alex Graves of Google DeepMind and Navdeep Jaitly of the University of Toronto in 2014. The model consisted of recurrent neural networks and a CTC layer. Jointly, the RNN-CTC model learns the pronunciation and acoustic model together, however it is incapable of learning the language due to conditional independence assumptions similar to a HMM. Consequently, CTC models can directly learn to map speech acoustics to English characters, but the models make many common spelling mistakes and must rely on a separate language model to clean up the transcripts. Later, Baidu expanded on the work with extremely large datasets and demonstrated some commercial success in Chinese Mandarin and English. In 2016, University of Oxford presented LipNet, the first end-to-end sentence-level lipreading model, using spatiotemporal convolutions coupled with an RNN-CTC architecture, surpassing human-level performance in a restricted grammar dataset. A large-scale CNN-RNN-CTC architecture was presented in 2018 by Google DeepMind achieving 6 times better performance than human experts.An alternative approach to CTC-based models are attention-based models. Attention-based ASR models were introduced simultaneously by Chan et al. of Carnegie Mellon University and Google Brain and Bahdanau et al. of the University of Montreal in 2016. The model named \"Listen, Attend and Spell\" (LAS), literally \"listens\" to the acoustic signal, pays \"attention\" to different parts of the signal and \"spells\" out the transcript one character at a time. Unlike CTC-based models, attention-based models do not have conditional-independence assumptions and can learn all the components of a speech recognizer including the pronunciation, acoustic and language model directly. This means, during deployment, there is no need to carry around a language model making it very practical for applications with limited memory. By the end of 2016, the attention-based models have seen considerable success including outperforming the CTC models (with or without an external language model). Various extensions have been proposed since the original LAS model. Latent Sequence Decompositions (LSD) was proposed by Carnegie Mellon University, MIT and Google Brain to directly emit sub-word units which are more natural than English characters; University of Oxford and Google DeepMind extended LAS to \"Watch, Listen, Attend and Spell\" (WLAS) to handle lip reading surpassing human-level performance.\n\nApplications\nIn-car systems\nTypically a manual control input, for example by means of a finger control on the steering-wheel, enables the speech recognition system and this is signaled to the driver by an audio prompt. Following the audio prompt, the system has a \"listening window\" during which it may accept a speech input for recognition.Simple voice commands may be used to initiate phone calls, select radio stations or play music from a compatible smartphone, MP3 player or music-loaded flash drive. Voice recognition capabilities vary between car make and model. Some of the most recent car models offer natural-language speech recognition in place of a fixed set of commands, allowing the driver to use full sentences and common phrases. With such systems there is, therefore, no need for the user to memorize a set of fixed command words.\n\nHealth care\nMedical documentation\nIn the health care sector, speech recognition can be implemented in front-end or back-end of the medical documentation process. Front-end speech recognition is where the provider dictates into a speech-recognition engine, the recognized words are displayed as they are spoken, and the dictator is responsible for editing and signing off on the document. Back-end or deferred speech recognition is where the provider dictates into a digital dictation system, the voice is routed through a speech-recognition machine and the recognized draft document is routed along with the original voice file to the editor, where the draft is edited and report finalized. Deferred speech recognition is widely used in the industry currently.\nOne of the major issues relating to the use of speech recognition in healthcare is that the American Recovery and Reinvestment Act of 2009 (ARRA) provides for substantial financial benefits to physicians who utilize an EMR according to \"Meaningful Use\" standards. These standards require that a substantial amount of data be maintained by the EMR (now more commonly referred to as an Electronic Health Record or EHR). The use of speech recognition is more naturally suited to the generation of narrative text, as part of a radiology/pathology interpretation, progress note or discharge summary: the ergonomic gains of using speech recognition to enter structured discrete data (e.g., numeric values or codes from a list or a controlled vocabulary) are relatively minimal for people who are sighted and who can operate a keyboard and mouse.\nA more significant issue is that most EHRs have not been expressly tailored to take advantage of voice-recognition capabilities. A large part of the clinician's interaction with the EHR involves navigation through the user interface using menus, and tab/button clicks, and is heavily dependent on keyboard and mouse: voice-based navigation provides only modest ergonomic benefits. By contrast, many highly customized systems for radiology or pathology dictation implement voice \"macros\", where the use of certain phrases – e.g., \"normal report\", will automatically fill in a large number of default values and/or generate boilerplate, which will vary with the type of the exam – e.g., a chest X-ray vs. a gastrointestinal contrast series for a radiology system.\n\nTherapeutic use\nProlonged use of speech recognition software in conjunction with word processors has shown benefits to short-term-memory restrengthening in brain AVM patients who have been treated with resection. Further research needs to be conducted to determine cognitive benefits for individuals whose AVMs have been treated using radiologic techniques.\n\nMilitary\nHigh-performance fighter aircraft\nSubstantial efforts have been devoted in the last decade to the test and evaluation of speech recognition in fighter aircraft. Of particular note have been the US program in speech recognition for the Advanced Fighter Technology Integration (AFTI)/F-16 aircraft (F-16 VISTA), the program in France for Mirage aircraft, and other programs in the UK dealing with a variety of aircraft platforms. In these programs, speech recognizers have been operated successfully in fighter aircraft, with applications including setting radio frequencies, commanding an autopilot system, setting steer-point coordinates and weapons release parameters, and controlling flight display.\nWorking with Swedish pilots flying in the JAS-39 Gripen cockpit, Englund (2004) found recognition deteriorated with increasing g-loads. The report also concluded that adaptation greatly improved the results in all cases and that the introduction of models for breathing was shown to improve recognition scores significantly. Contrary to what might have been expected, no effects of the broken English of the speakers were found. It was evident that spontaneous speech caused problems for the recognizer, as might have been expected. A restricted vocabulary, and above all, a proper syntax, could thus be expected to improve recognition accuracy substantially.The Eurofighter Typhoon, currently in service with the UK RAF, employs a speaker-dependent system, requiring each pilot to create a template. The system is not used for any safety-critical or weapon-critical tasks, such as weapon release or lowering of the undercarriage, but is used for a wide range of other cockpit functions. Voice commands are confirmed by visual and/or aural feedback. The system is seen as a major design feature in the reduction of pilot workload, and even allows the pilot to assign targets to his aircraft with two simple voice commands or to any of his wingmen with only five commands.Speaker-independent systems are also being developed and are under test for the F35 Lightning II (JSF) and the Alenia Aermacchi M-346 Master lead-in fighter trainer. These systems have produced word accuracy scores in excess of 98%.\n\nHelicopters\nThe problems of achieving high recognition accuracy under stress and noise are particularly relevant in the helicopter environment as well as in the jet fighter environment. The acoustic noise problem is actually more severe in the helicopter environment, not only because of the high noise levels but also because the helicopter pilot, in general, does not wear a facemask, which would reduce acoustic noise in the microphone. Substantial test and evaluation programs have been carried out in the past decade in speech recognition systems applications in helicopters, notably by the U.S. Army Avionics Research and Development Activity (AVRADA) and by the Royal Aerospace Establishment (RAE) in the UK. Work in France has included speech recognition in the Puma helicopter. There has also been much useful work in Canada. Results have been encouraging, and voice applications have included: control of communication radios, setting of navigation systems, and control of an automated target handover system.\nAs in fighter applications, the overriding issue for voice in helicopters is the impact on pilot effectiveness. Encouraging results are reported for the AVRADA tests, although these represent only a feasibility demonstration in a test environment. Much remains to be done both in speech recognition and in overall speech technology in order to consistently achieve performance improvements in operational settings.\n\nTraining air traffic controllers\nTraining for air traffic controllers (ATC) represents an excellent application for speech recognition systems. Many ATC training systems currently require a person to act as a \"pseudo-pilot\", engaging in a voice dialog with the trainee controller, which simulates the dialog that the controller would have to conduct with pilots in a real ATC situation. Speech recognition and synthesis techniques offer the potential to eliminate the need for a person to act as a pseudo-pilot, thus reducing training and support personnel. In theory, Air controller tasks are also characterized by highly structured speech as the primary output of the controller, hence reducing the difficulty of the speech recognition task should be possible. In practice, this is rarely the case. The FAA document 7110.65 details the phrases that should be used by air traffic controllers. While this document gives less than 150 examples of such phrases, the number of phrases supported by one of the simulation vendors speech recognition systems is in excess of 500,000.\nThe USAF, USMC, US Army, US Navy, and FAA as well as a number of international ATC training organizations such as the Royal Australian Air Force and Civil Aviation Authorities in Italy, Brazil, and Canada are currently using ATC simulators with speech recognition from a number of different vendors.\n\nTelephony and other domains\nASR is now commonplace in the field of telephony and is becoming more widespread in the field of computer gaming and simulation. In telephony systems, ASR is now being predominantly used in contact centers by integrating it with IVR systems. Despite the high level of integration with word processing in general personal computing, in the field of document production, ASR has not seen the expected increases in use.\nThe improvement of mobile processor speeds has made speech recognition practical in smartphones. Speech is used mostly as a part of a user interface, for creating predefined or custom speech commands.\n\nUsage in education and daily life\nFor language learning, speech recognition can be useful for learning a second language. It can teach proper pronunciation, in addition to helping a person develop fluency with their speaking skills.Students who are blind (see Blindness and education) or have very low vision can benefit from using the technology to convey words and then hear the computer recite them, as well as use a computer by commanding with their voice, instead of having to look at the screen and keyboard.Students who are physically disabled , have a Repetitive strain injury/other injuries to the upper extremities can be relieved from having to worry about handwriting, typing, or working with scribe on school assignments by using speech-to-text programs. They can also utilize speech recognition technology to enjoy searching the Internet or using a computer at home without having to physically operate a mouse and keyboard.Speech recognition can allow students with learning disabilities to become better writers. By saying the words aloud, they can increase the fluidity of their writing, and be alleviated of concerns regarding spelling, punctuation, and other mechanics of writing. Also, see Learning disability.\nThe use of voice recognition software, in conjunction with a digital audio recorder and a personal computer running word-processing software has proven to be positive for restoring damaged short-term memory capacity, in stroke and craniotomy individuals.\n\nPeople with disabilities\nPeople with disabilities can benefit from speech recognition programs. For individuals that are Deaf or Hard of Hearing, speech recognition software is used to automatically generate a closed-captioning of conversations such as discussions in conference rooms, classroom lectures, and/or religious services.Speech recognition is also very useful for people who have difficulty using their hands, ranging from mild repetitive stress injuries to involve disabilities that preclude using conventional computer input devices. In fact, people who used the keyboard a lot and developed RSI became an urgent early market for speech recognition. Speech recognition is used in deaf telephony, such as voicemail to text, relay services, and captioned telephone. Individuals with learning disabilities who have problems with thought-to-paper communication (essentially they think of an idea but it is processed incorrectly causing it to end up differently on paper) can possibly benefit from the software but the technology is not bug proof. Also the whole idea of speak to text can be hard for intellectually disabled person's due to the fact that it is rare that anyone tries to learn the technology to teach the person with the disability.This type of technology can help those with dyslexia but other disabilities are still in question. The effectiveness of the product is the problem that is hindering it from being effective. Although a kid may be able to say a word depending on how clear they say it the technology may think they are saying another word and input the wrong one. Giving them more work to fix, causing them to have to take more time with fixing the wrong word.\n\nFurther applications\nAerospace (e.g. space exploration, spacecraft, etc.) NASA's Mars Polar Lander used speech recognition technology from Sensory, Inc. in the Mars Microphone on the Lander\nAutomatic subtitling with speech recognition\nAutomatic emotion recognition\nAutomatic shot listing in audiovisual production\nAutomatic translation\neDiscovery (Legal discovery)\nHands-free computing: Speech recognition computer user interface\nHome automation\nInteractive voice response\nMobile telephony, including mobile email\nMultimodal interaction\nPronunciation evaluation in computer-aided language learning applications\nReal Time Captioning\nRobotics\nSecurity, including usage with other biometric scanners for multi-factor authentication\nSpeech to text (transcription of speech into text, real time video captioning, Court reporting )\nTelematics (e.g. vehicle Navigation Systems)\nTranscription (digital speech-to-text)\nVideo games, with Tom Clancy's EndWar and Lifeline as working examples\nVirtual assistant (e.g. Apple's Siri)\n\nPerformance\nThe performance of speech recognition systems is usually evaluated in terms of accuracy and speed. Accuracy is usually rated with word error rate (WER), whereas speed is measured with the real time factor. Other measures of accuracy include Single Word Error Rate (SWER) and Command Success Rate (CSR).\nSpeech recognition by machine is a very complex problem, however. Vocalizations vary in terms of accent, pronunciation, articulation, roughness, nasality, pitch, volume, and speed. Speech is distorted by a background noise and echoes, electrical characteristics. Accuracy of speech recognition may vary with the following:\nVocabulary size and confusability\nSpeaker dependence versus independence\nIsolated, discontinuous or continuous speech\nTask and language constraints\nRead versus spontaneous speech\nAdverse conditions\n\nAccuracy\nAs mentioned earlier in this article, the accuracy of speech recognition may vary depending on the following factors:\n\nError rates increase as the vocabulary size grows:e.g. the 10 digits \"zero\" to \"nine\" can be recognized essentially perfectly, but vocabulary sizes of 200, 5000 or 100000 may have error rates of 3%, 7%, or 45% respectively.Vocabulary is hard to recognize if it contains confusing letters:e.g. the 26 letters of the English alphabet are difficult to discriminate because they are confusing words (most notoriously, the E-set: \"B, C, D, E, G, P, T, V, Z — when \"Z\" is pronounced \"zee\" rather than \"zed\" depending on the English region); an 8% error rate is considered good for this vocabulary.Speaker dependence vs. independence:A speaker-dependent system is intended for use by a single speaker.\nA speaker-independent system is intended for use by any speaker (more difficult).Isolated, Discontinuous or continuous speechWith isolated speech, single words are used, therefore it becomes easier to recognize the speech.With discontinuous speech full sentences separated by silence are used, therefore it becomes easier to recognize the speech as well as with isolated speech. \nWith continuous speech naturally spoken sentences are used, therefore it becomes harder to recognize the speech, different from both isolated and discontinuous speech.\n\nTask and language constraints\ne.g. Querying application may dismiss the hypothesis \"The apple is red.\"\ne.g. Constraints may be semantic; rejecting \"The apple is angry.\"\ne.g. Syntactic; rejecting \"Red is apple the.\"Constraints are often represented by grammar. \n\nRead vs. Spontaneous Speech – When a person reads it's usually in a context that has been previously prepared, but when a person uses spontaneous speech, it is difficult to recognize the speech because of the disfluencies (like \"uh\" and \"um\", false starts, incomplete sentences, stuttering, coughing, and laughter) and limited vocabulary.\nAdverse conditions – Environmental noise (e.g. Noise in a car or a factory). Acoustical distortions (e.g. echoes, room acoustics)Speech recognition is a multi-leveled pattern recognition task.\n\nAcoustical signals are structured into a hierarchy of units, e.g. Phonemes, Words, Phrases, and Sentences;\nEach level provides additional constraints;e.g. Known word pronunciations or legal word sequences, which can compensate for errors or uncertainties at a lower level;\n\nThis hierarchy of constraints is exploited. By combining decisions probabilistically at all lower levels, and making more deterministic decisions only at the highest level, speech recognition by a machine is a process broken into several phases. Computationally, it is a problem in which a sound pattern has to be recognized or classified into a category that represents a meaning to a human. Every acoustic signal can be broken into smaller more basic sub-signals. As the more complex sound signal is broken into the smaller sub-sounds, different levels are created, where at the top level we have complex sounds, which are made of simpler sounds on the lower level, and going to lower levels, even more, we create more basic and shorter and simpler sounds. At the lowest level, where the sounds are the most fundamental, a machine would check for simple and more probabilistic rules of what sound should represent. Once these sounds are put together into more complex sounds on upper level, a new set of more deterministic rules should predict what the new complex sound should represent. The most upper level of a deterministic rule should figure out the meaning of complex expressions. In order to expand our knowledge about speech recognition, we need to take into consideration neural networks. There are four steps of neural network approaches:\nDigitize the speech that we want to recognizeFor telephone speech the sampling rate is 8000 samples per second; \n\nCompute features of spectral-domain of the speech (with Fourier transform);computed every 10 ms, with one 10 ms section called a frame;\nAnalysis of four-step neural network approaches can be explained by further information. Sound is produced by air (or some other medium) vibration, which we register by ears, but machines by receivers. Basic sound creates a wave which has two descriptions: amplitude (how strong is it), and frequency (how often it vibrates per second).\nAccuracy can be computed with the help of word error rate (WER). Word error rate can be calculated by aligning the recognized word and referenced word using dynamic string alignment. The problem may occur while computing the word error rate due to the difference between the sequence lengths of the recognized word and referenced word.\nThe formula to compute the word error rate (WER) is:\n\n  \n    \n      \n        W\n        E\n        R\n        =\n        \n          \n            \n              (\n              s\n              +\n              d\n              +\n              i\n              )\n            \n            n\n          \n        \n      \n    \n    {\\displaystyle WER={(s+d+i) \\over n}}\n  \nwhere s is the number of substitutions, d is the number of deletions, i is the number of insertions, and n is the number of word references.\nWhile computing, the word recognition rate (WRR) is used. The formula is:\n\n  \n    \n      \n        W\n        R\n        R\n        =\n        1\n        −\n        W\n        E\n        R\n        =\n        \n          \n            \n              (\n              n\n              −\n              s\n              −\n              d\n              −\n              i\n              )\n            \n            n\n          \n        \n        =\n        \n          \n            \n              h\n              −\n              i\n            \n            n\n          \n        \n      \n    \n    {\\displaystyle WRR=1-WER={(n-s-d-i) \\over n}={h-i \\over n}}\n  \nwhere h is the number of correctly recognized words:\n\n  \n    \n      \n        h\n        =\n        n\n        −\n        (\n        s\n        +\n        d\n        )\n      \n    \n    {\\displaystyle h=n-(s+d)}\n  .\n\nSecurity concerns\nSpeech recognition can become a means of attack, theft, or accidental operation. For example, activation words like \"Alexa\" spoken in an audio or video broadcast can cause devices in homes and offices to start listening for input inappropriately, or possibly take an unwanted action. Voice-controlled devices are also accessible to visitors to the building, or even those outside the building if they can be heard inside. Attackers may be able to gain access to personal information, like calendar, address book contents, private messages, and documents. They may also be able to impersonate the user to send messages or make online purchases.\nTwo attacks have been demonstrated that use artificial sounds. One transmits ultrasound and attempt to send commands without nearby people noticing. The other adds small, inaudible distortions to other speech or music that are specially crafted to confuse the specific speech recognition system into recognizing music as speech, or to make what sounds like one command to a human sound like a different command to the system.\n\nFurther information\nConferences and journals\nPopular speech recognition conferences held each year or two include SpeechTEK and SpeechTEK Europe, ICASSP, Interspeech/Eurospeech, and the IEEE ASRU. Conferences in the field of natural language processing, such as ACL, NAACL, EMNLP, and HLT, are beginning to include papers on speech processing. Important journals include the IEEE Transactions on Speech and Audio Processing (later renamed IEEE Transactions on Audio, Speech and Language Processing and since Sept 2014 renamed IEEE/ACM Transactions on Audio, Speech and Language Processing—after merging with an ACM publication), Computer Speech and Language, and Speech Communication.\n\nBooks\nBooks like \"Fundamentals of Speech Recognition\" by Lawrence Rabiner can be useful to acquire basic knowledge but may not be fully up to date (1993). Another good source can be \"Statistical Methods for Speech Recognition\" by Frederick Jelinek and \"Spoken Language Processing (2001)\" by Xuedong Huang etc., \"Computer Speech\", by Manfred R. Schroeder, second edition published in 2004, and \"Speech Processing: A Dynamic and Optimization-Oriented Approach\" published in 2003 by Li Deng and Doug O'Shaughnessey. The updated textbook Speech and Language Processing (2008) by Jurafsky and Martin presents the basics and the state of the art for ASR. Speaker recognition also uses the same features, most of the same front-end processing, and classification techniques as is done in speech recognition. A comprehensive textbook, \"Fundamentals of Speaker Recognition\" is an in depth source for up to date details on the theory and practice. A good insight into the techniques used in the best modern systems can be gained by paying attention to government sponsored evaluations such as those organised by DARPA (the largest speech recognition-related project ongoing as of 2007 is the GALE project, which involves both speech recognition and translation components).\nA good and accessible introduction to speech recognition technology and its history is provided by the general audience book \"The Voice in the Machine. Building Computers That Understand Speech\" by Roberto Pieraccini (2012).\nThe most recent book on speech recognition is Automatic Speech Recognition: A Deep Learning Approach (Publisher: Springer) written by Microsoft researchers D. Yu and L. Deng and published near the end of 2014, with highly mathematically oriented technical detail on how deep learning methods are derived and implemented in modern speech recognition systems based on DNNs and related deep learning methods. A related book, published earlier in 2014, \"Deep Learning: Methods and Applications\" by L. Deng and D. Yu provides a less technical but more methodology-focused overview of DNN-based speech recognition during 2009–2014, placed within the more general context of deep learning applications including not only speech recognition but also image recognition, natural language processing, information retrieval, multimodal processing, and multitask learning.\n\nSoftware\nIn terms of freely available resources, Carnegie Mellon University's Sphinx toolkit is one place to start to both learn about speech recognition and to start experimenting. Another resource (free but copyrighted) is the HTK book (and the accompanying HTK toolkit). For more recent and state-of-the-art techniques, Kaldi toolkit can be used. In 2017 Mozilla launched the open source project called Common Voice to gather big database of voices that would help build free speech recognition project DeepSpeech (available free at GitHub), using Google's open source platform TensorFlow. When Mozilla redirected funding away from the project in 2020, it was forked by its original developers as Coqui STT using the same open-source license.Google Gboard supports speech recognition on all Android applications. It can be activated through the microphone icon.The commercial cloud based speech recognition APIs are broadly available.\nFor more software resources, see List of speech recognition software.\n\nSee also\nReferences\nFurther reading\nCole, Ronald; Mariani, Joseph; Uszkoreit, Hans; Varile, Giovanni Battista; Zaenen, Annie; Zampolli; Zue, Victor, eds. (1997). Survey of the state of the art in human language technology. Cambridge Studies in Natural Language Processing. Vol. XII–XIII. Cambridge University Press. ISBN 978-0-521-59277-2.\nJunqua, J.-C.; Haton, J.-P. (1995). Robustness in Automatic Speech Recognition: Fundamentals and Applications. Kluwer Academic Publishers. ISBN 978-0-7923-9646-8.\nKarat, Clare-Marie; Vergo, John; Nahamoo, David (2007). \"Conversational Interface Technologies\". In Sears, Andrew; Jacko, Julie A. (eds.). The Human-Computer Interaction Handbook: Fundamentals, Evolving Technologies, and Emerging Applications (Human Factors and Ergonomics). Lawrence Erlbaum Associates Inc. ISBN 978-0-8058-5870-9.\nPieraccini, Roberto (2012). The Voice in the Machine. Building Computers That Understand Speech. The MIT Press. ISBN 978-0262016858.\nPirani, Giancarlo, ed. (2013). Advanced algorithms and architectures for speech understanding. Springer Science & Business Media. ISBN 978-3-642-84341-9.\nSigner, Beat and Hoste, Lode: SpeeG2: A Speech- and Gesture-based Interface for Efficient Controller-free Text Entry, In Proceedings of ICMI 2013, 15th International Conference on Multimodal Interaction, Sydney, Australia, December 2013\nWoelfel, Matthias; McDonough, John (26 May 2009). Distant Speech Recognition. Wiley. ISBN 978-0470517048.\n\nExternal links\nSpeech Technology at Curlie",
    "Genetic Algorithms": "In computer science and operations research, a genetic algorithm (GA) is a metaheuristic inspired by the process of natural selection that belongs to the larger class of evolutionary algorithms (EA). Genetic algorithms are commonly used to generate high-quality solutions to optimization and search problems by relying on biologically inspired operators such as mutation, crossover and selection. Some examples of GA applications include optimizing decision trees for better performance, solving sudoku puzzles, hyperparameter optimization, causal inference, etc.\n\nMethodology\nOptimization problems\nIn a genetic algorithm, a population of candidate solutions (called individuals, creatures, organisms, or phenotypes) to an optimization problem is evolved toward better solutions. Each candidate solution has a set of properties (its chromosomes or genotype) which can be mutated and altered; traditionally, solutions are represented in binary as strings of 0s and 1s, but other encodings are also possible.The evolution usually starts from a population of randomly generated individuals, and is an iterative process, with the population in each iteration called a generation. In each generation, the fitness of every individual in the population is evaluated; the fitness is usually the value of the objective function in the optimization problem being solved. The more fit individuals are stochastically selected from the current population, and each individual's genome is modified (recombined and possibly randomly mutated) to form a new generation. The new generation of candidate solutions is then used in the next iteration of the algorithm. Commonly, the algorithm terminates when either a maximum number of generations has been produced, or a satisfactory fitness level has been reached for the population.\nA typical genetic algorithm requires:\n\na genetic representation of the solution domain,\na fitness function to evaluate the solution domain.A standard representation of each candidate solution is as an array of bits (also called bit set or bit string). Arrays of other types and structures can be used in essentially the same way. The main property that makes these genetic representations convenient is that their parts are easily aligned due to their fixed size, which facilitates simple crossover operations. Variable length representations may also be used, but crossover implementation is more complex in this case. Tree-like representations are explored in genetic programming and graph-form representations are explored in evolutionary programming; a mix of both linear chromosomes and trees is explored in gene expression programming.\nOnce the genetic representation and the fitness function are defined, a GA proceeds to initialize a population of solutions and then to improve it through repetitive application of the mutation, crossover, inversion and selection operators.\n\nInitialization\nThe population size depends on the nature of the problem, but typically contains several hundreds or thousands of possible solutions. Often, the initial population is generated randomly, allowing the entire range of possible solutions (the search space). Occasionally, the solutions may be \"seeded\" in areas where optimal solutions are likely to be found or the distribution of the sampling probability tuned to focus in those areas of greater interest.\n\nSelection\nDuring each successive generation, a portion of the existing population is selected to reproduce for a new generation. Individual solutions are selected through a fitness-based process, where fitter solutions (as measured by a fitness function) are typically more likely to be selected. Certain selection methods rate the fitness of each solution and preferentially select the best solutions. Other methods rate only a random sample of the population, as the former process may be very time-consuming.\nThe fitness function is defined over the genetic representation and measures the quality of the represented solution. The fitness function is always problem-dependent. For instance, in the knapsack problem one wants to maximize the total value of objects that can be put in a knapsack of some fixed capacity. A representation of a solution might be an array of bits, where each bit represents a different object, and the value of the bit (0 or 1) represents whether or not the object is in the knapsack. Not every such representation is valid, as the size of objects may exceed the capacity of the knapsack. The fitness of the solution is the sum of values of all objects in the knapsack if the representation is valid, or 0 otherwise.\nIn some problems, it is hard or even impossible to define the fitness expression; in these cases, a simulation may be used to determine the fitness function value of a phenotype (e.g. computational fluid dynamics is used to determine the air resistance of a vehicle whose shape is encoded as the phenotype), or even interactive genetic algorithms are used.\n\nGenetic operators\nThe next step is to generate a second generation population of solutions from those selected, through a combination of genetic operators: crossover (also called recombination), and mutation.\nFor each new solution to be produced, a pair of \"parent\" solutions is selected for breeding from the pool selected previously. By producing a \"child\" solution using the above methods of crossover and mutation, a new solution is created which typically shares many of the characteristics of its \"parents\". New parents are selected for each new child, and the process continues until a new population of solutions of appropriate size is generated.\nAlthough reproduction methods that are based on the use of two parents are more \"biology inspired\", some research suggests that more than two \"parents\" generate higher quality chromosomes.\nThese processes ultimately result in the next generation population of chromosomes that is different from the initial generation. Generally, the average fitness will have increased by this procedure for the population, since only the best organisms from the first generation are selected for breeding, along with a small proportion of less fit solutions. These less fit solutions ensure genetic diversity within the genetic pool of the parents and therefore ensure the genetic diversity of the subsequent generation of children.\nOpinion is divided over the importance of crossover versus mutation. There are many references in Fogel (2006) that support the importance of mutation-based search.\nAlthough crossover and mutation are known as the main genetic operators, it is possible to use other operators such as regrouping, colonization-extinction, or migration in genetic algorithms.It is worth tuning parameters such as the mutation probability, crossover probability and population size to find reasonable settings for the problem class being worked on. A very small mutation rate may lead to genetic drift (which is non-ergodic in nature). A recombination rate that is too high may lead to premature convergence of the genetic algorithm. A mutation rate that is too high may lead to loss of good solutions, unless elitist selection is employed. An adequate population size ensures sufficient genetic diversity for the problem at hand, but can lead to a waste of computational resources if set to a value larger than required.\n\nHeuristics\nIn addition to the main operators above, other heuristics may be employed to make the calculation faster or more robust. The speciation heuristic penalizes crossover between candidate solutions that are too similar; this encourages population diversity and helps prevent premature convergence to a less optimal solution.\n\nTermination\nThis generational process is repeated until a termination condition has been reached. Common terminating conditions are:\n\nA solution is found that satisfies minimum criteria\nFixed number of generations reached\nAllocated budget (computation time/money) reached\nThe highest ranking solution's fitness is reaching or has reached a plateau such that successive iterations no longer produce better results\nManual inspection\nCombinations of the above\n\nThe building block hypothesis\nGenetic algorithms are simple to implement, but their behavior is difficult to understand. In particular, it is difficult to understand why these algorithms frequently succeed at generating solutions of high fitness when applied to practical problems. The building block hypothesis (BBH) consists of:\n\nA description of a heuristic that performs adaptation by identifying and recombining \"building blocks\", i.e. low order, low defining-length schemata with above average fitness.\nA hypothesis that a genetic algorithm performs adaptation by implicitly and efficiently implementing this heuristic.Goldberg describes the heuristic as follows:\n\n\"Short, low order, and highly fit schemata are sampled, recombined [crossed over], and resampled to form strings of potentially higher fitness. In a way, by working with these particular schemata [the building blocks], we have reduced the complexity of our problem; instead of building high-performance strings by trying every conceivable combination, we construct better and better strings from the best partial solutions of past samplings.\"Because highly fit schemata of low defining length and low order play such an important role in the action of genetic algorithms, we have already given them a special name: building blocks. Just as a child creates magnificent fortresses through the arrangement of simple blocks of wood, so does a genetic algorithm seek near optimal performance through the juxtaposition of short, low-order, high-performance schemata, or building blocks.\"Despite the lack of consensus regarding the validity of the building-block hypothesis, it has been consistently evaluated and used as reference throughout the years. Many estimation of distribution algorithms, for example, have been proposed in an attempt to provide an environment in which the hypothesis would hold. Although good results have been reported for some classes of problems, skepticism concerning the generality and/or practicality of the building-block hypothesis as an explanation for GAs' efficiency still remains. Indeed, there is a reasonable amount of work that attempts to understand its limitations from the perspective of estimation of distribution algorithms.\n\nLimitations\nThere are limitations of the use of a genetic algorithm compared to alternative optimization algorithms:\n\nRepeated fitness function evaluation for complex problems is often the most prohibitive and limiting segment of artificial evolutionary algorithms. Finding the optimal solution to complex high-dimensional, multimodal problems often requires very expensive fitness function evaluations. In real world problems such as structural optimization problems, a single function evaluation may require several hours to several days of complete simulation. Typical optimization methods cannot deal with such types of problem. In this case, it may be necessary to forgo an exact evaluation and use an approximated fitness that is computationally efficient. It is apparent that amalgamation of approximate models may be one of the most promising approaches to convincingly use GA to solve complex real life problems.\nGenetic algorithms do not scale well with complexity. That is, where the number of elements which are exposed to mutation is large there is often an exponential increase in search space size. This makes it extremely difficult to use the technique on problems such as designing an engine, a house or a plane. In order to make such problems tractable to evolutionary search, they must be broken down into the simplest representation possible. Hence we typically see evolutionary algorithms encoding designs for fan blades instead of engines, building shapes instead of detailed construction plans, and airfoils instead of whole aircraft designs. The second problem of complexity is the issue of how to protect parts that have evolved to represent good solutions from further destructive mutation, particularly when their fitness assessment requires them to combine well with other parts.\nThe \"better\" solution is only in comparison to other solutions. As a result, the stopping criterion is not clear in every problem.\nIn many problems, GAs have a tendency to converge towards local optima or even arbitrary points rather than the global optimum of the problem. This means that it does not \"know how\" to sacrifice short-term fitness to gain longer-term fitness. The likelihood of this occurring depends on the shape of the fitness landscape: certain problems may provide an easy ascent towards a global optimum, others may make it easier for the function to find the local optima. This problem may be alleviated by using a different fitness function, increasing the rate of mutation, or by using selection techniques that maintain a diverse population of solutions, although the No Free Lunch theorem proves that there is no general solution to this problem. A common technique to maintain diversity is to impose a \"niche penalty\", wherein, any group of individuals of sufficient similarity (niche radius) have a penalty added, which will reduce the representation of that group in subsequent generations, permitting other (less similar) individuals to be maintained in the population. This trick, however, may not be effective, depending on the landscape of the problem. Another possible technique would be to simply replace part of the population with randomly generated individuals, when most of the population is too similar to each other. Diversity is important in genetic algorithms (and genetic programming) because crossing over a homogeneous population does not yield new solutions. In evolution strategies and evolutionary programming, diversity is not essential because of a greater reliance on mutation.\nOperating on dynamic data sets is difficult, as genomes begin to converge early on towards solutions which may no longer be valid for later data. Several methods have been proposed to remedy this by increasing genetic diversity somehow and preventing early convergence, either by increasing the probability of mutation when the solution quality drops (called triggered hypermutation), or by occasionally introducing entirely new, randomly generated elements into the gene pool (called random immigrants). Again, evolution strategies and evolutionary programming can be implemented with a so-called \"comma strategy\" in which parents are not maintained and new parents are selected only from offspring. This can be more effective on dynamic problems.\nGAs cannot effectively solve problems in which the only fitness measure is a binary pass/fail outcome (like decision problems), as there is no way to converge on the solution (no hill to climb). In these cases, a random search may find a solution as quickly as a GA. However, if the situation allows the success/failure trial to be repeated giving (possibly) different results, then the ratio of successes to failures provides a suitable fitness measure.\nFor specific optimization problems and problem instances, other optimization algorithms may be more efficient than genetic algorithms in terms of speed of convergence. Alternative and complementary algorithms include evolution strategies, evolutionary programming, simulated annealing, Gaussian adaptation, hill climbing, and swarm intelligence (e.g.: ant colony optimization, particle swarm optimization) and methods based on integer linear programming. The suitability of genetic algorithms is dependent on the amount of knowledge of the problem; well known problems often have better, more specialized approaches.\n\nVariants\nChromosome representation\nThe simplest algorithm represents each chromosome as a bit string. Typically, numeric parameters can be represented by integers, though it is possible to use floating point representations. The floating point representation is natural to evolution strategies and evolutionary programming. The notion of real-valued genetic algorithms has been offered but is really a misnomer because it does not really represent the building block theory that was proposed by John Henry Holland in the 1970s. This theory is not without support though, based on theoretical and experimental results (see below). The basic algorithm performs crossover and mutation at the bit level. Other variants treat the chromosome as a list of numbers which are indexes into an instruction table, nodes in a linked list, hashes, objects, or any other imaginable data structure. Crossover and mutation are performed so as to respect data element boundaries. For most data types, specific variation operators can be designed. Different chromosomal data types seem to work better or worse for different specific problem domains.\nWhen bit-string representations of integers are used, Gray coding is often employed. In this way, small changes in the integer can be readily affected through mutations or crossovers. This has been found to help prevent premature convergence at so-called Hamming walls, in which too many simultaneous mutations (or crossover events) must occur in order to change the chromosome to a better solution.\nOther approaches involve using arrays of real-valued numbers instead of bit strings to represent chromosomes. Results from the theory of schemata suggest that in general the smaller the alphabet, the better the performance, but it was initially surprising to researchers that good results were obtained from using real-valued chromosomes. This was explained as the set of real values in a finite population of chromosomes as forming a virtual alphabet (when selection and recombination are dominant) with a much lower cardinality than would be expected from a floating point representation.An expansion of the Genetic Algorithm accessible problem domain can be obtained through more complex encoding of the solution pools by concatenating several types of heterogenously encoded genes into one chromosome. This particular approach allows for solving optimization problems that require vastly disparate definition domains for the problem parameters. For instance, in problems of cascaded controller tuning, the internal loop controller structure can belong to a conventional regulator of three parameters, whereas the external loop could implement a linguistic controller (such as a fuzzy system) which has an inherently different description. This particular form of encoding requires a specialized crossover mechanism that recombines the chromosome by section, and it is a useful tool for the modelling and simulation of complex adaptive systems, especially evolution processes.\n\nElitism\nA practical variant of the general process of constructing a new population is to allow the best organism(s) from the current generation to carry over to the next, unaltered. This strategy is known as elitist selection and guarantees that the solution quality obtained by the GA will not decrease from one generation to the next.\n\nParallel implementations\nParallel implementations of genetic algorithms come in two flavors. Coarse-grained parallel genetic algorithms assume a population on each of the computer nodes and migration of individuals among the nodes. Fine-grained parallel genetic algorithms assume an individual on each processor node which acts with neighboring individuals for selection and reproduction.\nOther variants, like genetic algorithms for online optimization problems, introduce time-dependence or noise in the fitness function.\n\nAdaptive GAs\nGenetic algorithms with adaptive parameters (adaptive genetic algorithms, AGAs) is another significant and promising variant of genetic algorithms. The probabilities of crossover (pc) and mutation (pm) greatly determine the degree of solution accuracy and the convergence speed that genetic algorithms can obtain. Researchers have analyzed GA convergence analytically.Instead of using fixed values of pc and pm, AGAs utilize the population information in each generation and adaptively adjust the pc and pm in order to maintain the population diversity as well as to sustain the convergence capacity. In AGA (adaptive genetic algorithm), the adjustment of pc and pm depends on the fitness values of the solutions. There are more examples of AGA variants: Successive zooming method is an early example of improving convergence. In CAGA (clustering-based adaptive genetic algorithm), through the use of clustering analysis to judge the optimization states of the population, the adjustment of pc and pm depends on these optimization states. Recent approaches use more abstract variables for deciding pc and pm. Examples are dominance & co-dominance principles and LIGA (levelized interpolative genetic algorithm), which combines a flexible GA with modified A* search to tackle search space anisotropicity.It can be quite effective to combine GA with other optimization methods. A GA tends to be quite good at finding generally good global solutions, but quite inefficient at finding the last few mutations to find the absolute optimum. Other techniques (such as simple hill climbing) are quite efficient at finding absolute optimum in a limited region. Alternating GA and hill climbing can improve the efficiency of GA while overcoming the lack of robustness of hill climbing.\nThis means that the rules of genetic variation may have a different meaning in the natural case. For instance – provided that steps are stored in consecutive order – crossing over may sum a number of steps from maternal DNA adding a number of steps from paternal DNA and so on. This is like adding vectors that more probably may follow a ridge in the phenotypic landscape. Thus, the efficiency of the process may be increased by many orders of magnitude. Moreover, the inversion operator has the opportunity to place steps in consecutive order or any other suitable order in favour of survival or efficiency.A variation, where the population as a whole is evolved rather than its individual members, is known as gene pool recombination.\nA number of variations have been developed to attempt to improve performance of GAs on problems with a high degree of fitness epistasis, i.e. where the fitness of a solution consists of interacting subsets of its variables. Such algorithms aim to learn (before exploiting) these beneficial phenotypic interactions. As such, they are aligned with the Building Block Hypothesis in adaptively reducing disruptive recombination. Prominent examples of this approach include the mGA, GEMGA and LLGA.\n\nProblem domains\nProblems which appear to be particularly appropriate for solution by genetic algorithms include timetabling and scheduling problems, and many scheduling software packages are based on GAs. GAs have also been applied to engineering. Genetic algorithms are often applied as an approach to solve global optimization problems.\nAs a general rule of thumb genetic algorithms might be useful in problem domains that have a complex fitness landscape as mixing, i.e., mutation in combination with crossover, is designed to move the population away from local optima that a traditional hill climbing algorithm might get stuck in. Observe that commonly used crossover operators cannot change any uniform population. Mutation alone can provide ergodicity of the overall genetic algorithm process (seen as a Markov chain).\nExamples of problems solved by genetic algorithms include: mirrors designed to funnel sunlight to a solar collector, antennae designed to pick up radio signals in space, walking methods for computer figures, optimal design of aerodynamic bodies in complex flowfieldsIn his Algorithm Design Manual, Skiena advises against genetic algorithms for any task:\n\n[I]t is quite unnatural to model applications in terms of genetic operators like mutation and crossover on bit strings. The pseudobiology adds another level of complexity between you and your problem. Second, genetic algorithms take a very long time on nontrivial problems. [...] [T]he analogy with evolution—where significant progress require [sic] millions of years—can be quite appropriate.\n[...]\n\nI have never encountered any problem where genetic algorithms seemed to me the right way to attack it. Further, I have never seen any computational results reported using genetic algorithms that have favorably impressed me. Stick to simulated annealing for your heuristic search voodoo needs.\n\nHistory\nIn 1950, Alan Turing proposed a \"learning machine\" which would parallel the principles of evolution. Computer simulation of evolution started as early as in 1954 with the work of Nils Aall Barricelli, who was using the computer at the Institute for Advanced Study in Princeton, New Jersey. His 1954 publication was not widely noticed. Starting in 1957, the Australian quantitative geneticist Alex Fraser published a series of papers on simulation of artificial selection of organisms with multiple loci controlling a measurable trait. From these beginnings, computer simulation of evolution by biologists became more common in the early 1960s, and the methods were described in books by Fraser and Burnell (1970) and Crosby (1973). Fraser's simulations included all of the essential elements of modern genetic algorithms. In addition, Hans-Joachim Bremermann published a series of papers in the 1960s that also adopted a population of solution to optimization problems, undergoing recombination, mutation, and selection. Bremermann's research also included the elements of modern genetic algorithms. Other noteworthy early pioneers include Richard Friedberg, George Friedman, and Michael Conrad. Many early papers are reprinted by Fogel (1998).Although Barricelli, in work he reported in 1963, had simulated the evolution of ability to play a simple game, artificial evolution only became a widely recognized optimization method as a result of the work of Ingo Rechenberg and Hans-Paul Schwefel in the 1960s and early 1970s – Rechenberg's group was able to solve complex engineering problems through evolution strategies. Another approach was the evolutionary programming technique of Lawrence J. Fogel, which was proposed for generating artificial intelligence. Evolutionary programming originally used finite state machines for predicting environments, and used variation and selection to optimize the predictive logics. Genetic algorithms in particular became popular through the work of John Holland in the early 1970s, and particularly his book Adaptation in Natural and Artificial Systems (1975). His work originated with studies of cellular automata, conducted by Holland and his students at the University of Michigan. Holland introduced a formalized framework for predicting the quality of the next generation, known as Holland's Schema Theorem. Research in GAs remained largely theoretical until the mid-1980s, when The First International Conference on Genetic Algorithms was held in Pittsburgh, Pennsylvania.\n\nCommercial products\nIn the late 1980s, General Electric started selling the world's first genetic algorithm product, a mainframe-based toolkit designed for industrial processes. \nIn 1989, Axcelis, Inc. released Evolver, the world's first commercial GA product for desktop computers. The New York Times technology writer John Markoff wrote about Evolver in 1990, and it remained the only interactive commercial genetic algorithm until 1995. Evolver was sold to Palisade in 1997, translated into several languages, and is currently in its 6th version. Since the 1990s, MATLAB has built in three derivative-free optimization heuristic algorithms (simulated annealing, particle swarm optimization, genetic algorithm) and two direct search algorithms (simplex search, pattern search).\n\nRelated techniques\nParent fields\nGenetic algorithms are a sub-field:\n\nEvolutionary algorithms\nEvolutionary computing\nMetaheuristics\nStochastic optimization\nOptimization\n\nRelated fields\nEvolutionary algorithms\nEvolutionary algorithms is a sub-field of evolutionary computing.\n\nEvolution strategies (ES, see Rechenberg, 1994) evolve individuals by means of mutation and intermediate or discrete recombination. ES algorithms are designed particularly to solve problems in the real-value domain. They use self-adaptation to adjust control parameters of the search. De-randomization of self-adaptation has led to the contemporary Covariance Matrix Adaptation Evolution Strategy (CMA-ES).\nEvolutionary programming (EP) involves populations of solutions with primarily mutation and selection and arbitrary representations. They use self-adaptation to adjust parameters, and can include other variation operations such as combining information from multiple parents.\nEstimation of Distribution Algorithm (EDA) substitutes traditional reproduction operators by model-guided operators. Such models are learned from the population by employing machine learning techniques and represented as Probabilistic Graphical Models, from which new solutions can be sampled or generated from guided-crossover.\nGenetic programming (GP) is a related technique popularized by John Koza in which computer programs, rather than function parameters, are optimized. Genetic programming often uses tree-based internal data structures to represent the computer programs for adaptation instead of the list structures typical of genetic algorithms. There are many variants of Genetic Programming, including Cartesian genetic programming, Gene expression programming, grammatical evolution, Linear genetic programming, Multi expression programming etc.\nGrouping genetic algorithm (GGA) is an evolution of the GA where the focus is shifted from individual items, like in classical GAs, to groups or subset of items. The idea behind this GA evolution proposed by Emanuel Falkenauer is that solving some complex problems, a.k.a. clustering or partitioning problems where a set of items must be split into disjoint group of items in an optimal way, would better be achieved by making characteristics of the groups of items equivalent to genes. These kind of problems include bin packing, line balancing, clustering with respect to a distance measure, equal piles, etc., on which classic GAs proved to perform poorly. Making genes equivalent to groups implies chromosomes that are in general of variable length, and special genetic operators that manipulate whole groups of items. For bin packing in particular, a GGA hybridized with the Dominance Criterion of Martello and Toth, is arguably the best technique to date.\nInteractive evolutionary algorithms are evolutionary algorithms that use human evaluation. They are usually applied to domains where it is hard to design a computational fitness function, for example, evolving images, music, artistic designs and forms to fit users' aesthetic preference.\n\nSwarm intelligence\nSwarm intelligence is a sub-field of evolutionary computing.\n\nAnt colony optimization (ACO) uses many ants (or agents) equipped with a pheromone model to traverse the solution space and find locally productive areas.\nAlthough considered an Estimation of distribution algorithm, Particle swarm optimization (PSO) is a computational method for multi-parameter optimization which also uses population-based approach. A population (swarm) of candidate solutions (particles) moves in the search space, and the movement of the particles is influenced both by their own best known position and swarm's global best known position. Like genetic algorithms, the PSO method depends on information sharing among population members. In some problems the PSO is often more computationally efficient than the GAs, especially in unconstrained problems with continuous variables.\n\nOther evolutionary computing algorithms\nEvolutionary computation is a sub-field of the metaheuristic methods.\n\nMemetic algorithm (MA), often called hybrid genetic algorithm among others, is a population-based method in which solutions are also subject to local improvement phases. The idea of memetic algorithms comes from memes, which unlike genes, can adapt themselves. In some problem areas they are shown to be more efficient than traditional evolutionary algorithms.\nBacteriologic algorithms (BA) inspired by evolutionary ecology and, more particularly, bacteriologic adaptation. Evolutionary ecology is the study of living organisms in the context of their environment, with the aim of discovering how they adapt. Its basic concept is that in a heterogeneous environment, there is not one individual that fits the whole environment. So, one needs to reason at the population level. It is also believed BAs could be successfully applied to complex positioning problems (antennas for cell phones, urban planning, and so on) or data mining.\nCultural algorithm (CA) consists of the population component almost identical to that of the genetic algorithm and, in addition, a knowledge component called the belief space.\nDifferential evolution (DE) inspired by migration of superorganisms.\nGaussian adaptation (normal or natural adaptation, abbreviated NA to avoid confusion with GA) is intended for the maximisation of manufacturing yield of signal processing systems. It may also be used for ordinary parametric optimisation. It relies on a certain theorem valid for all regions of acceptability and all Gaussian distributions. The efficiency of NA relies on information theory and a certain theorem of efficiency. Its efficiency is defined as information divided by the work needed to get the information. Because NA maximises mean fitness rather than the fitness of the individual, the landscape is smoothed such that valleys between peaks may disappear. Therefore it has a certain \"ambition\" to avoid local peaks in the fitness landscape. NA is also good at climbing sharp crests by adaptation of the moment matrix, because NA may maximise the disorder (average information) of the Gaussian simultaneously keeping the mean fitness constant.\n\nOther metaheuristic methods\nMetaheuristic methods broadly fall within stochastic optimisation methods.\n\nSimulated annealing (SA) is a related global optimization technique that traverses the search space by testing random mutations on an individual solution. A mutation that increases fitness is always accepted. A mutation that lowers fitness is accepted probabilistically based on the difference in fitness and a decreasing temperature parameter. In SA parlance, one speaks of seeking the lowest energy instead of the maximum fitness. SA can also be used within a standard GA algorithm by starting with a relatively high rate of mutation and decreasing it over time along a given schedule.\nTabu search (TS) is similar to simulated annealing in that both traverse the solution space by testing mutations of an individual solution. While simulated annealing generates only one mutated solution, tabu search generates many mutated solutions and moves to the solution with the lowest energy of those generated. In order to prevent cycling and encourage greater movement through the solution space, a tabu list is maintained of partial or complete solutions. It is forbidden to move to a solution that contains elements of the tabu list, which is updated as the solution traverses the solution space.\nExtremal optimization (EO) Unlike GAs, which work with a population of candidate solutions, EO evolves a single solution and makes local modifications to the worst components. This requires that a suitable representation be selected which permits individual solution components to be assigned a quality measure (\"fitness\"). The governing principle behind this algorithm is that of emergent improvement through selectively removing low-quality components and replacing them with a randomly selected component. This is decidedly at odds with a GA that selects good solutions in an attempt to make better solutions.\n\nOther stochastic optimisation methods\nThe cross-entropy (CE) method generates candidate solutions via a parameterized probability distribution. The parameters are updated via cross-entropy minimization, so as to generate better samples in the next iteration.\nReactive search optimization (RSO) advocates the integration of sub-symbolic machine learning techniques into search heuristics for solving complex optimization problems. The word reactive hints at a ready response to events during the search through an internal online feedback loop for the self-tuning of critical parameters. Methodologies of interest for Reactive Search include machine learning and statistics, in particular reinforcement learning, active or query learning, neural networks, and metaheuristics.\n\nSee also\nGenetic programming\nList of genetic algorithm applications\nGenetic algorithms in signal processing (a.k.a. particle filters)\nPropagation of schema\nUniversal Darwinism\nMetaheuristics\nLearning classifier system\nRule-based machine learning\n\nReferences\nBibliography\nExternal links\nResources\n[1] Provides a list of resources in the genetic algorithms field\nAn Overview of the History and Flavors of Evolutionary Algorithms\n\nTutorials\nGenetic Algorithms - Computer programs that \"evolve\" in ways that resemble natural selection can solve complex problems even their creators do not fully understand An excellent introduction to GA by John Holland and with an application to the Prisoner's Dilemma\nAn online interactive Genetic Algorithm tutorial for a reader to practise or learn how a GA works: Learn step by step or watch global convergence in batch, change the population size, crossover rates/bounds, mutation rates/bounds and selection mechanisms, and add constraints.\nA Genetic Algorithm Tutorial by Darrell Whitley Computer Science Department Colorado State University An excellent tutorial with much theory\n\"Essentials of Metaheuristics\", 2009 (225 p). Free open text by Sean Luke.\nGlobal Optimization Algorithms – Theory and Application\nGenetic Algorithms in Python Tutorial with the intuition behind GAs and Python implementation.\nGenetic Algorithms evolves to solve the prisoner's dilemma. Written by Robert Axelrod.",
    "Support Vector Machines": "In machine learning, support vector machines (SVMs, also support vector networks) are supervised max-margin models with associated learning algorithms that analyze data for classification and regression analysis. Developed at AT&T Bell Laboratories by Vladimir Vapnik with colleagues (Boser et al., 1992, Guyon et al., 1993, Cortes and Vapnik, 1995, Vapnik et al., 1997) SVMs are one of the most studied models, being based on statistical learning frameworks or VC theory proposed by Vapnik (1982, 1995) and Chervonenkis (1974). \nIn addition to performing linear classification, SVMs can efficiently perform a non-linear classification using what is called the kernel trick, implicitly mapping their inputs into high-dimensional feature spaces. SVMs can also be used for regression tasks, where the objective becomes \n  \n    \n      \n        ϵ\n        −\n      \n    \n    {\\displaystyle \\epsilon -}\n  sensitive.\nThe support vector clustering algorithm, created by Hava Siegelmann and Vladimir Vapnik, applies the statistics of support vectors, developed in the support vector machines algorithm, to categorize unlabeled data. These data sets require unsupervised learning approaches, which attempt to find natural clustering of the data to groups and, then, to map new data according to these clusters. \nThe popularity of SVMs is likely due to their amenability to theoretical analysis, their flexibility in being applied to a wide variety of tasks, including structured prediction problems. It is not clear that SVMs have better predictive performance than other linear models, such as logistic regression and linear regression.\n\nMotivation\nClassifying data is a common task in machine learning.\nSuppose some given data points each belong to one of two classes, and the goal is to decide which class a new data point will be in. In the case of support vector machines, a data point is viewed as a \n  \n    \n      \n        p\n      \n    \n    {\\displaystyle p}\n  -dimensional vector (a list of \n  \n    \n      \n        p\n      \n    \n    {\\displaystyle p}\n   numbers), and we want to know whether we can separate such points with a \n  \n    \n      \n        (\n        p\n        −\n        1\n        )\n      \n    \n    {\\displaystyle (p-1)}\n  -dimensional hyperplane. This is called a linear classifier. There are many hyperplanes that might classify the data. One reasonable choice as the best hyperplane is the one that represents the largest separation, or margin, between the two classes. So we choose the hyperplane so that the distance from it to the nearest data point on each side is maximized. If such a hyperplane exists, it is known as the maximum-margin hyperplane and the linear classifier it defines is known as a maximum-margin classifier; or equivalently, the perceptron of optimal stability.More formally, a support vector machine constructs a hyperplane or set of hyperplanes in a high or infinite-dimensional space, which can be used for classification, regression, or other tasks like outliers detection. Intuitively, a good separation is achieved by the hyperplane that has the largest distance to the nearest training-data point of any class (so-called functional margin), since in general the larger the margin, the lower the generalization error of the classifier. A lower generalization error means that the implementer is less likely to experience overfitting.\n\nWhereas the original problem may be stated in a finite-dimensional space, it often happens that the sets to discriminate are not linearly separable in that space. For this reason, it was proposed that the original finite-dimensional space be mapped into a much higher-dimensional space, presumably making the separation easier in that space. To keep the computational load reasonable, the mappings used by SVM schemes are designed to ensure that dot products of pairs of input data vectors may be computed easily in terms of the variables in the original space, by defining them in terms of a kernel function \n  \n    \n      \n        k\n        (\n        x\n        ,\n        y\n        )\n      \n    \n    {\\displaystyle k(x,y)}\n   selected to suit the problem. The hyperplanes in the higher-dimensional space are defined as the set of points whose dot product with a vector in that space is constant, where such a set of vectors is an orthogonal (and thus minimal) set of vectors that defines a hyperplane. The vectors defining the hyperplanes can be chosen to be linear combinations with parameters \n  \n    \n      \n        \n          α\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\alpha _{i}}\n   of images of feature vectors \n  \n    \n      \n        \n          x\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle x_{i}}\n   that occur in the data base. With this choice of a hyperplane, the points \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n   in the feature space that are mapped into the hyperplane are defined by the relation \n  \n    \n      \n        \n          \n            ∑\n            \n              i\n            \n          \n          \n            α\n            \n              i\n            \n          \n          k\n          (\n          \n            x\n            \n              i\n            \n          \n          ,\n          x\n          )\n          =\n          \n            constant\n          \n          .\n        \n      \n    \n    {\\displaystyle \\textstyle \\sum _{i}\\alpha _{i}k(x_{i},x)={\\text{constant}}.}\n    Note that if \n  \n    \n      \n        k\n        (\n        x\n        ,\n        y\n        )\n      \n    \n    {\\displaystyle k(x,y)}\n   becomes small as \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n   grows further away from \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n  , each term in the sum measures the degree of closeness of the test point \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n   to the corresponding data base point \n  \n    \n      \n        \n          x\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle x_{i}}\n  . In this way, the sum of kernels above can be used to measure the relative nearness of each test point to the data points originating in one or the other of the sets to be discriminated. Note the fact that the set of points \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n   mapped into any hyperplane can be quite convoluted as a result, allowing much more complex discrimination between sets that are not convex at all in the original space.\n\nApplications\nSVMs can be used to solve various real-world problems:\n\nSVMs are helpful in text and hypertext categorization, as their application can significantly reduce the need for labeled training instances in both the standard inductive and transductive settings. Some methods for shallow semantic parsing are based on support vector machines.\nClassification of images can also be performed using SVMs. Experimental results show that SVMs achieve significantly higher search accuracy than traditional query refinement schemes after just three to four rounds of relevance feedback. This is also true for image segmentation systems, including those using a modified version SVM that uses the privileged approach as suggested by Vapnik.\nClassification of satellite data like SAR data using supervised SVM.\nHand-written characters can be recognized using SVM.\nThe SVM algorithm has been widely applied in the biological and other sciences.  They have been used to classify proteins with up to 90% of the compounds classified correctly. Permutation tests based on SVM weights have been suggested as a mechanism for interpretation of SVM models. Support vector machine weights have also been used to interpret SVM models in the past. Posthoc interpretation of support vector machine models in order to identify features used by the model to make predictions is a relatively new area of research with special significance in the biological sciences.\n\nHistory\nThe original SVM algorithm was invented by Vladimir N. Vapnik and Alexey Ya. Chervonenkis in 1964. In 1992, Bernhard Boser, Isabelle Guyon and Vladimir Vapnik suggested a way to create nonlinear classifiers by applying the kernel trick to maximum-margin hyperplanes. The \"soft margin\" incarnation, as is commonly used in software packages, was proposed by Corinna Cortes and Vapnik in 1993 and published in 1995.\n\nLinear SVM\nComment:  Plot as shown is incorrect!!  Please rotate all content in the graph by 90 degrees clockwise, and flip w to then point inward.\nWe are given a training dataset of \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n   points of the form\n\nwhere the \n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle y_{i}}\n   are either 1 or −1, each indicating the class to which the point \n  \n    \n      \n        \n          \n            x\n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{i}}\n   belongs. Each \n  \n    \n      \n        \n          \n            x\n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{i}}\n   is a \n  \n    \n      \n        p\n      \n    \n    {\\displaystyle p}\n  -dimensional real vector. We want to find the \"maximum-margin hyperplane\" that divides the group of points \n  \n    \n      \n        \n          \n            x\n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{i}}\n   for which \n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n        =\n        1\n      \n    \n    {\\displaystyle y_{i}=1}\n   from the group of points for which \n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n        =\n        −\n        1\n      \n    \n    {\\displaystyle y_{i}=-1}\n  , which is defined so that the distance between the hyperplane and the nearest point \n  \n    \n      \n        \n          \n            x\n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{i}}\n   from either group is maximized.\nAny hyperplane can be written as the set of points \n  \n    \n      \n        \n          x\n        \n      \n    \n    {\\displaystyle \\mathbf {x} }\n   satisfying\n\nwhere \n  \n    \n      \n        \n          w\n        \n      \n    \n    {\\displaystyle \\mathbf {w} }\n   is the (not necessarily normalized) normal vector to the hyperplane. This is much like Hesse normal form, except that \n  \n    \n      \n        \n          w\n        \n      \n    \n    {\\displaystyle \\mathbf {w} }\n   is not necessarily a unit vector. The parameter \n  \n    \n      \n        \n          \n            \n              b\n              \n                ‖\n                \n                  w\n                \n                ‖\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\tfrac {b}{\\|\\mathbf {w} \\|}}}\n   determines the offset of the hyperplane from the origin along the normal vector \n  \n    \n      \n        \n          w\n        \n      \n    \n    {\\displaystyle \\mathbf {w} }\n  .\n\nHard-margin\nIf the training data are linearly separable, we can select two parallel hyperplanes that separate the two classes of data, so that the distance between them is as large as possible. The region bounded by these two hyperplanes is called the \"margin\", and the maximum-margin hyperplane is the hyperplane that lies halfway between them. With a normalized or standardized dataset, these hyperplanes can be described by the equations\n\n  \n    \n      \n        \n          \n            w\n          \n          \n            \n              T\n            \n          \n        \n        \n          x\n        \n        −\n        b\n        =\n        1\n      \n    \n    {\\displaystyle \\mathbf {w} ^{\\mathsf {T}}\\mathbf {x} -b=1}\n   (anything on or above this boundary is of one class, with label 1)and\n\n  \n    \n      \n        \n          \n            w\n          \n          \n            \n              T\n            \n          \n        \n        \n          x\n        \n        −\n        b\n        =\n        −\n        1\n      \n    \n    {\\displaystyle \\mathbf {w} ^{\\mathsf {T}}\\mathbf {x} -b=-1}\n   (anything on or below this boundary is of the other class, with label −1).Geometrically, the distance between these two hyperplanes is \n  \n    \n      \n        \n          \n            \n              2\n              \n                ‖\n                \n                  w\n                \n                ‖\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\tfrac {2}{\\|\\mathbf {w} \\|}}}\n  , so to maximize the distance between the planes we want to minimize \n  \n    \n      \n        ‖\n        \n          w\n        \n        ‖\n      \n    \n    {\\displaystyle \\|\\mathbf {w} \\|}\n  . The distance is computed using the distance from a point to a plane equation. We also have to prevent data points from falling into the margin, we add the following constraint: for each \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n   either\n\nor\n\nThese constraints state that each data point must lie on the correct side of the margin.\nThis can be rewritten as\n\nWe can put this together to get the optimization problem:\n\n  \n    \n      \n        \n          \n            \n              \n              \n                \n                  \n                    minimize\n                    \n                      \n                        w\n                      \n                      ,\n                      \n                      b\n                    \n                  \n                \n              \n              \n              \n                \n                ‖\n                \n                  w\n                \n                \n                  ‖\n                  \n                    2\n                  \n                  \n                    2\n                  \n                \n              \n            \n            \n              \n              \n                \n                  subject to\n                \n              \n              \n              \n                \n                  y\n                  \n                    i\n                  \n                \n                (\n                \n                  \n                    w\n                  \n                  \n                    ⊤\n                  \n                \n                \n                  \n                    x\n                  \n                  \n                    i\n                  \n                \n                −\n                b\n                )\n                ≥\n                1\n                \n                ∀\n                i\n                ∈\n                {\n                1\n                ,\n                …\n                ,\n                n\n                }\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}&{\\underset {\\mathbf {w} ,\\;b}{\\operatorname {minimize} }}&&\\|\\mathbf {w} \\|_{2}^{2}\\\\&{\\text{subject to}}&&y_{i}(\\mathbf {w} ^{\\top }\\mathbf {x} _{i}-b)\\geq 1\\quad \\forall i\\in \\{1,\\dots ,n\\}\\end{aligned}}}\n  \nThe \n  \n    \n      \n        \n          w\n        \n      \n    \n    {\\displaystyle \\mathbf {w} }\n   and \n  \n    \n      \n        b\n      \n    \n    {\\displaystyle b}\n   that solve this problem determine our classifier, \n  \n    \n      \n        \n          x\n        \n        ↦\n        sgn\n        ⁡\n        (\n        \n          \n            w\n          \n          \n            \n              T\n            \n          \n        \n        \n          x\n        \n        −\n        b\n        )\n      \n    \n    {\\displaystyle \\mathbf {x} \\mapsto \\operatorname {sgn}(\\mathbf {w} ^{\\mathsf {T}}\\mathbf {x} -b)}\n   where \n  \n    \n      \n        sgn\n        ⁡\n        (\n        ⋅\n        )\n      \n    \n    {\\displaystyle \\operatorname {sgn}(\\cdot )}\n   is the sign function.\nAn important consequence of this geometric description is that the max-margin hyperplane is completely determined by those \n  \n    \n      \n        \n          \n            x\n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{i}}\n   that lie nearest to it. These \n  \n    \n      \n        \n          \n            x\n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{i}}\n   are called support vectors.\n\nSoft-margin\nTo extend SVM to cases in which the data are not linearly separable, the hinge loss function is helpful\n\nNote that \n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle y_{i}}\n   is the i-th target (i.e., in this case, 1 or −1), and \n  \n    \n      \n        \n          \n            w\n          \n          \n            \n              T\n            \n          \n        \n        \n          \n            x\n          \n          \n            i\n          \n        \n        −\n        b\n      \n    \n    {\\displaystyle \\mathbf {w} ^{\\mathsf {T}}\\mathbf {x} _{i}-b}\n   is the i-th output.\nThis function is zero if the constraint in (1) is satisfied, in other words, if \n  \n    \n      \n        \n          \n            x\n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{i}}\n   lies on the correct side of the margin. For data on the wrong side of the margin, the function's value is proportional to the distance from the margin.\nThe goal of the optimization then is to minimize\n\nwhere the parameter \n  \n    \n      \n        λ\n        >\n        0\n      \n    \n    {\\displaystyle \\lambda >0}\n   determines the trade-off between increasing the margin size and ensuring that the \n  \n    \n      \n        \n          \n            x\n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{i}}\n   lie on the correct side of the margin. By deconstructing the hinge loss, this optimization problem can be massaged into the following:\n\n  \n    \n      \n        \n          \n            \n              \n              \n                \n                  \n                    minimize\n                    \n                      \n                        w\n                      \n                      ,\n                      \n                      b\n                      ,\n                      \n                      \n                        ζ\n                      \n                    \n                  \n                \n              \n              \n              \n                \n                ‖\n                \n                  w\n                \n                \n                  ‖\n                  \n                    2\n                  \n                  \n                    2\n                  \n                \n                +\n                C\n                \n                  ∑\n                  \n                    i\n                    =\n                    1\n                  \n                  \n                    n\n                  \n                \n                \n                  ζ\n                  \n                    i\n                  \n                \n              \n            \n            \n              \n              \n                \n                  subject to\n                \n              \n              \n              \n                \n                  y\n                  \n                    i\n                  \n                \n                (\n                \n                  \n                    w\n                  \n                  \n                    ⊤\n                  \n                \n                \n                  \n                    x\n                  \n                  \n                    i\n                  \n                \n                −\n                b\n                )\n                ≥\n                1\n                −\n                \n                  ζ\n                  \n                    i\n                  \n                \n                ,\n                \n                \n                  ζ\n                  \n                    i\n                  \n                \n                ≥\n                0\n                \n                ∀\n                i\n                ∈\n                {\n                1\n                ,\n                …\n                ,\n                n\n                }\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}&{\\underset {\\mathbf {w} ,\\;b,\\;\\mathbf {\\zeta } }{\\operatorname {minimize} }}&&\\|\\mathbf {w} \\|_{2}^{2}+C\\sum _{i=1}^{n}\\zeta _{i}\\\\&{\\text{subject to}}&&y_{i}(\\mathbf {w} ^{\\top }\\mathbf {x} _{i}-b)\\geq 1-\\zeta _{i},\\quad \\zeta _{i}\\geq 0\\quad \\forall i\\in \\{1,\\dots ,n\\}\\end{aligned}}}\n  \nThus, for large values of \n  \n    \n      \n        C\n      \n    \n    {\\displaystyle C}\n  , it will behave similar to the hard-margin SVM, if the input data are linearly classifiable, but will still learn if a classification rule is viable or not. (\n  \n    \n      \n        λ\n      \n    \n    {\\displaystyle \\lambda }\n   is inversely related to \n  \n    \n      \n        C\n      \n    \n    {\\displaystyle C}\n  , e.g. in LIBSVM.)\n\nNonlinear Kernels\nThe original maximum-margin hyperplane algorithm proposed by Vapnik in 1963 constructed a linear classifier. However, in 1992, Bernhard Boser, Isabelle Guyon and Vladimir Vapnik suggested a way to create nonlinear classifiers by applying the kernel trick (originally proposed by Aizerman et al.) to maximum-margin hyperplanes. The resulting algorithm is formally similar, except that every dot product is replaced by a nonlinear kernel function. This allows the algorithm to fit the maximum-margin hyperplane in a transformed feature space. The transformation may be nonlinear and the transformed space high-dimensional; although the classifier is a hyperplane in the transformed feature space, it may be nonlinear in the original input space.\nIt is noteworthy that working in a higher-dimensional feature space increases the generalization error of support vector machines, although given enough samples the algorithm still performs well.Some common kernels include:\n\nPolynomial (homogeneous): \n  \n    \n      \n        k\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        ,\n        \n          \n            x\n          \n          \n            j\n          \n        \n        )\n        =\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        ⋅\n        \n          \n            x\n          \n          \n            j\n          \n        \n        \n          )\n          \n            d\n          \n        \n      \n    \n    {\\displaystyle k(\\mathbf {x} _{i},\\mathbf {x} _{j})=(\\mathbf {x} _{i}\\cdot \\mathbf {x} _{j})^{d}}\n  . Particularly, when \n  \n    \n      \n        d\n        =\n        1\n      \n    \n    {\\displaystyle d=1}\n  , this becomes the linear kernel.\nPolynomial (inhomogeneous): \n  \n    \n      \n        k\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        ,\n        \n          \n            x\n          \n          \n            j\n          \n        \n        )\n        =\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        ⋅\n        \n          \n            x\n          \n          \n            j\n          \n        \n        +\n        r\n        \n          )\n          \n            d\n          \n        \n      \n    \n    {\\displaystyle k(\\mathbf {x} _{i},\\mathbf {x} _{j})=(\\mathbf {x} _{i}\\cdot \\mathbf {x} _{j}+r)^{d}}\n  .\nGaussian radial basis function: \n  \n    \n      \n        k\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        ,\n        \n          \n            x\n          \n          \n            j\n          \n        \n        )\n        =\n        exp\n        ⁡\n        \n          (\n          \n            −\n            γ\n            \n              \n                ‖\n                \n                  \n                    \n                      x\n                    \n                    \n                      i\n                    \n                  \n                  −\n                  \n                    \n                      x\n                    \n                    \n                      j\n                    \n                  \n                \n                ‖\n              \n              \n                2\n              \n            \n          \n          )\n        \n      \n    \n    {\\displaystyle k(\\mathbf {x} _{i},\\mathbf {x} _{j})=\\exp \\left(-\\gamma \\left\\|\\mathbf {x} _{i}-\\mathbf {x} _{j}\\right\\|^{2}\\right)}\n   for \n  \n    \n      \n        γ\n        >\n        0\n      \n    \n    {\\displaystyle \\gamma >0}\n  . Sometimes parametrized using \n  \n    \n      \n        γ\n        =\n        1\n        \n          /\n        \n        (\n        2\n        \n          σ\n          \n            2\n          \n        \n        )\n      \n    \n    {\\displaystyle \\gamma =1/(2\\sigma ^{2})}\n  .\nSigmoid function (Hyperbolic tangent): \n  \n    \n      \n        k\n        (\n        \n          \n            x\n            \n              i\n            \n          \n        \n        ,\n        \n          \n            x\n            \n              j\n            \n          \n        \n        )\n        =\n        tanh\n        ⁡\n        (\n        κ\n        \n          \n            x\n          \n          \n            i\n          \n        \n        ⋅\n        \n          \n            x\n          \n          \n            j\n          \n        \n        +\n        c\n        )\n      \n    \n    {\\displaystyle k(\\mathbf {x_{i}} ,\\mathbf {x_{j}} )=\\tanh(\\kappa \\mathbf {x} _{i}\\cdot \\mathbf {x} _{j}+c)}\n   for some (not every) \n  \n    \n      \n        κ\n        >\n        0\n      \n    \n    {\\displaystyle \\kappa >0}\n   and \n  \n    \n      \n        c\n        <\n        0\n      \n    \n    {\\displaystyle c<0}\n  .The kernel is related to the transform \n  \n    \n      \n        φ\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        )\n      \n    \n    {\\displaystyle \\varphi (\\mathbf {x} _{i})}\n   by the equation \n  \n    \n      \n        k\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        ,\n        \n          \n            x\n          \n          \n            j\n          \n        \n        )\n        =\n        φ\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        )\n        ⋅\n        φ\n        (\n        \n          \n            x\n            \n              j\n            \n          \n        \n        )\n      \n    \n    {\\displaystyle k(\\mathbf {x} _{i},\\mathbf {x} _{j})=\\varphi (\\mathbf {x} _{i})\\cdot \\varphi (\\mathbf {x_{j}} )}\n  . The value w is also in the transformed space, with \n  \n    \n      \n        \n          w\n        \n        =\n        \n          ∑\n          \n            i\n          \n        \n        \n          α\n          \n            i\n          \n        \n        \n          y\n          \n            i\n          \n        \n        φ\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        )\n      \n    \n    {\\textstyle \\mathbf {w} =\\sum _{i}\\alpha _{i}y_{i}\\varphi (\\mathbf {x} _{i})}\n  . Dot products with w for classification can again be computed by the kernel trick, i.e. \n  \n    \n      \n        \n          w\n        \n        ⋅\n        φ\n        (\n        \n          x\n        \n        )\n        =\n        \n          ∑\n          \n            i\n          \n        \n        \n          α\n          \n            i\n          \n        \n        \n          y\n          \n            i\n          \n        \n        k\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        ,\n        \n          x\n        \n        )\n      \n    \n    {\\textstyle \\mathbf {w} \\cdot \\varphi (\\mathbf {x} )=\\sum _{i}\\alpha _{i}y_{i}k(\\mathbf {x} _{i},\\mathbf {x} )}\n  .\n\nComputing the SVM classifier\nComputing the (soft-margin) SVM classifier amounts to minimizing an expression of the form\n\nWe focus on the soft-margin classifier since, as noted above, choosing a sufficiently small value for \n  \n    \n      \n        λ\n      \n    \n    {\\displaystyle \\lambda }\n   yields the hard-margin classifier for linearly classifiable input data. The classical approach, which involves reducing (2) to a quadratic programming problem, is detailed below. Then, more recent approaches such as sub-gradient descent and coordinate descent will be discussed.\n\nPrimal\nMinimizing (2) can be rewritten as a constrained optimization problem with a differentiable objective function in the following way.\nFor each \n  \n    \n      \n        i\n        ∈\n        {\n        1\n        ,\n        \n        …\n        ,\n        \n        n\n        }\n      \n    \n    {\\displaystyle i\\in \\{1,\\,\\ldots ,\\,n\\}}\n   we introduce a variable \n  \n    \n      \n        \n          ζ\n          \n            i\n          \n        \n        =\n        max\n        \n          (\n          \n            0\n            ,\n            1\n            −\n            \n              y\n              \n                i\n              \n            \n            (\n            \n              \n                w\n              \n              \n                \n                  T\n                \n              \n            \n            \n              \n                x\n              \n              \n                i\n              \n            \n            −\n            b\n            )\n          \n          )\n        \n      \n    \n    {\\displaystyle \\zeta _{i}=\\max \\left(0,1-y_{i}(\\mathbf {w} ^{\\mathsf {T}}\\mathbf {x} _{i}-b)\\right)}\n  . Note that \n  \n    \n      \n        \n          ζ\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\zeta _{i}}\n   is the smallest nonnegative number satisfying \n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n        (\n        \n          \n            w\n          \n          \n            \n              T\n            \n          \n        \n        \n          \n            x\n          \n          \n            i\n          \n        \n        −\n        b\n        )\n        ≥\n        1\n        −\n        \n          ζ\n          \n            i\n          \n        \n        .\n      \n    \n    {\\displaystyle y_{i}(\\mathbf {w} ^{\\mathsf {T}}\\mathbf {x} _{i}-b)\\geq 1-\\zeta _{i}.}\n  \nThus we can rewrite the optimization problem as follows\n\nThis is called the primal problem.\n\nDual\nBy solving for the Lagrangian dual of the above problem, one obtains the simplified problem\n\nThis is called the dual problem. Since the dual maximization problem is a quadratic function of the \n  \n    \n      \n        \n          c\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle c_{i}}\n   subject to linear constraints, it is efficiently solvable by quadratic programming algorithms.\nHere, the variables \n  \n    \n      \n        \n          c\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle c_{i}}\n   are defined such that\n\nMoreover, \n  \n    \n      \n        \n          c\n          \n            i\n          \n        \n        =\n        0\n      \n    \n    {\\displaystyle c_{i}=0}\n   exactly when \n  \n    \n      \n        \n          \n            x\n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{i}}\n   lies on the correct side of the margin, and \n  \n    \n      \n        0\n        <\n        \n          c\n          \n            i\n          \n        \n        <\n        (\n        2\n        n\n        λ\n        \n          )\n          \n            −\n            1\n          \n        \n      \n    \n    {\\displaystyle 0<c_{i}<(2n\\lambda )^{-1}}\n    when \n  \n    \n      \n        \n          \n            x\n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{i}}\n   lies on the margin's boundary. It follows that \n  \n    \n      \n        \n          w\n        \n      \n    \n    {\\displaystyle \\mathbf {w} }\n   can be written as a linear combination of the support vectors.\nThe offset, \n  \n    \n      \n        b\n      \n    \n    {\\displaystyle b}\n  , can be recovered by finding an \n  \n    \n      \n        \n          \n            x\n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{i}}\n   on the margin's boundary and solving\n\n(Note that \n  \n    \n      \n        \n          y\n          \n            i\n          \n          \n            −\n            1\n          \n        \n        =\n        \n          y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle y_{i}^{-1}=y_{i}}\n   since \n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n        =\n        ±\n        1\n      \n    \n    {\\displaystyle y_{i}=\\pm 1}\n  .)\n\nKernel trick\nSuppose now that we would like to learn a nonlinear classification rule which corresponds to a linear classification rule for the transformed data points \n  \n    \n      \n        φ\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        )\n        .\n      \n    \n    {\\displaystyle \\varphi (\\mathbf {x} _{i}).}\n   Moreover, we are given a kernel function \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n   which satisfies \n  \n    \n      \n        k\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        ,\n        \n          \n            x\n          \n          \n            j\n          \n        \n        )\n        =\n        φ\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        )\n        ⋅\n        φ\n        (\n        \n          \n            x\n          \n          \n            j\n          \n        \n        )\n      \n    \n    {\\displaystyle k(\\mathbf {x} _{i},\\mathbf {x} _{j})=\\varphi (\\mathbf {x} _{i})\\cdot \\varphi (\\mathbf {x} _{j})}\n  .\nWe know the classification vector \n  \n    \n      \n        \n          w\n        \n      \n    \n    {\\displaystyle \\mathbf {w} }\n   in the transformed space satisfies\n\nwhere, the \n  \n    \n      \n        \n          c\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle c_{i}}\n   are obtained by solving the optimization problem\n\nThe coefficients \n  \n    \n      \n        \n          c\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle c_{i}}\n   can be solved for using quadratic programming, as before. Again, we can find some index \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n   such that \n  \n    \n      \n        0\n        <\n        \n          c\n          \n            i\n          \n        \n        <\n        (\n        2\n        n\n        λ\n        \n          )\n          \n            −\n            1\n          \n        \n      \n    \n    {\\displaystyle 0<c_{i}<(2n\\lambda )^{-1}}\n  , so that \n  \n    \n      \n        φ\n        (\n        \n          \n            x\n          \n          \n            i\n          \n        \n        )\n      \n    \n    {\\displaystyle \\varphi (\\mathbf {x} _{i})}\n   lies on the boundary of the margin in the transformed space, and then solve\n\nFinally,\n\nModern methods\nRecent algorithms for finding the SVM classifier include sub-gradient descent and coordinate descent. Both techniques have proven to offer significant advantages over the traditional approach when dealing with large, sparse datasets—sub-gradient methods are especially efficient when there are many training examples, and coordinate descent when the dimension of the feature space is high.\n\nSub-gradient descent\nSub-gradient descent algorithms for the SVM work directly with the expression\n\nNote that \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n   is a convex function of \n  \n    \n      \n        \n          w\n        \n      \n    \n    {\\displaystyle \\mathbf {w} }\n   and \n  \n    \n      \n        b\n      \n    \n    {\\displaystyle b}\n  . As such, traditional gradient descent (or SGD) methods can be adapted, where instead of taking a step in the direction of the function's gradient, a step is taken in the direction of a vector selected from the function's sub-gradient. This approach has the advantage that, for certain implementations, the number of iterations does not scale with \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n  , the number of data points.\n\nCoordinate descent\nCoordinate descent algorithms for the SVM work from the dual problem\n\nFor each \n  \n    \n      \n        i\n        ∈\n        {\n        1\n        ,\n        \n        …\n        ,\n        \n        n\n        }\n      \n    \n    {\\displaystyle i\\in \\{1,\\,\\ldots ,\\,n\\}}\n  , iteratively, the coefficient \n  \n    \n      \n        \n          c\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle c_{i}}\n   is adjusted in the direction of \n  \n    \n      \n        ∂\n        f\n        \n          /\n        \n        ∂\n        \n          c\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\partial f/\\partial c_{i}}\n  . Then, the resulting vector of coefficients \n  \n    \n      \n        (\n        \n          c\n          \n            1\n          \n          ′\n        \n        ,\n        \n        …\n        ,\n        \n        \n          c\n          \n            n\n          \n          ′\n        \n        )\n      \n    \n    {\\displaystyle (c_{1}',\\,\\ldots ,\\,c_{n}')}\n   is projected onto the nearest vector of coefficients that satisfies the given constraints. (Typically Euclidean distances are used.) The process is then repeated until a near-optimal vector of coefficients is obtained. The resulting algorithm is extremely fast in practice, although few performance guarantees have been proven.\n\nEmpirical risk minimization\nThe soft-margin support vector machine described above is an example of an empirical risk minimization (ERM) algorithm for the hinge loss. Seen this way, support vector machines belong to a natural class of algorithms for statistical inference, and many of its unique features are due to the behavior of the hinge loss. This perspective can provide further insight into how and why SVMs work, and allow us to better analyze their statistical properties.\n\nRisk minimization\nIn supervised learning, one is given a set of training examples \n  \n    \n      \n        \n          X\n          \n            1\n          \n        \n        …\n        \n          X\n          \n            n\n          \n        \n      \n    \n    {\\displaystyle X_{1}\\ldots X_{n}}\n   with labels \n  \n    \n      \n        \n          y\n          \n            1\n          \n        \n        …\n        \n          y\n          \n            n\n          \n        \n      \n    \n    {\\displaystyle y_{1}\\ldots y_{n}}\n  , and wishes to predict \n  \n    \n      \n        \n          y\n          \n            n\n            +\n            1\n          \n        \n      \n    \n    {\\displaystyle y_{n+1}}\n   given \n  \n    \n      \n        \n          X\n          \n            n\n            +\n            1\n          \n        \n      \n    \n    {\\displaystyle X_{n+1}}\n  . To do so one forms a hypothesis, \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n  , such that \n  \n    \n      \n        f\n        (\n        \n          X\n          \n            n\n            +\n            1\n          \n        \n        )\n      \n    \n    {\\displaystyle f(X_{n+1})}\n   is a \"good\" approximation of \n  \n    \n      \n        \n          y\n          \n            n\n            +\n            1\n          \n        \n      \n    \n    {\\displaystyle y_{n+1}}\n  . A \"good\" approximation is usually defined with the help of a loss function, \n  \n    \n      \n        ℓ\n        (\n        y\n        ,\n        z\n        )\n      \n    \n    {\\displaystyle \\ell (y,z)}\n  , which characterizes how bad \n  \n    \n      \n        z\n      \n    \n    {\\displaystyle z}\n   is as a prediction of \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n  . We would then like to choose a hypothesis that minimizes the expected risk:\n\nIn most cases, we don't know the joint distribution of \n  \n    \n      \n        \n          X\n          \n            n\n            +\n            1\n          \n        \n        ,\n        \n        \n          y\n          \n            n\n            +\n            1\n          \n        \n      \n    \n    {\\displaystyle X_{n+1},\\,y_{n+1}}\n   outright. In these cases, a common strategy is to choose the hypothesis that minimizes the empirical risk:\n\nUnder certain assumptions about the sequence of random variables \n  \n    \n      \n        \n          X\n          \n            k\n          \n        \n        ,\n        \n        \n          y\n          \n            k\n          \n        \n      \n    \n    {\\displaystyle X_{k},\\,y_{k}}\n   (for example, that they are generated by a finite Markov process), if the set of hypotheses being considered is small enough, the minimizer of the empirical risk will closely approximate the minimizer of the expected risk as \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n   grows large. This approach is called empirical risk minimization, or ERM.\n\nRegularization and stability\nIn order for the minimization problem to have a well-defined solution, we have to place constraints on the set \n  \n    \n      \n        \n          \n            H\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {H}}}\n   of hypotheses being considered. If \n  \n    \n      \n        \n          \n            H\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {H}}}\n   is a normed space (as is the case for SVM), a particularly effective technique is to consider only those hypotheses \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n   for which \n  \n    \n      \n        ‖\n        f\n        \n          ‖\n          \n            \n              H\n            \n          \n        \n        <\n        k\n      \n    \n    {\\displaystyle \\lVert f\\rVert _{\\mathcal {H}}<k}\n   . This is equivalent to imposing a regularization penalty \n  \n    \n      \n        \n          \n            R\n          \n        \n        (\n        f\n        )\n        =\n        \n          λ\n          \n            k\n          \n        \n        ‖\n        f\n        \n          ‖\n          \n            \n              H\n            \n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {R}}(f)=\\lambda _{k}\\lVert f\\rVert _{\\mathcal {H}}}\n  , and solving the new optimization problem\n\nThis approach is called Tikhonov regularization.\nMore generally, \n  \n    \n      \n        \n          \n            R\n          \n        \n        (\n        f\n        )\n      \n    \n    {\\displaystyle {\\mathcal {R}}(f)}\n   can be some measure of the complexity of the hypothesis \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n  , so that simpler hypotheses are preferred.\n\nSVM and the hinge loss\nRecall that the (soft-margin) SVM classifier \n  \n    \n      \n        \n          \n            \n              \n                w\n              \n              ^\n            \n          \n        \n        ,\n        b\n        :\n        \n          x\n        \n        ↦\n        sgn\n        ⁡\n        (\n        \n          \n            \n              \n                \n                  w\n                \n                ^\n              \n            \n          \n          \n            \n              T\n            \n          \n        \n        \n          x\n        \n        −\n        b\n        )\n      \n    \n    {\\displaystyle {\\hat {\\mathbf {w} }},b:\\mathbf {x} \\mapsto \\operatorname {sgn}({\\hat {\\mathbf {w} }}^{\\mathsf {T}}\\mathbf {x} -b)}\n   is chosen to minimize the following expression:\n\nIn light of the above discussion, we see that the SVM technique is equivalent to empirical risk minimization with Tikhonov regularization, where in this case the loss function is the hinge loss\n\nFrom this perspective, SVM is closely related to other fundamental classification algorithms such as regularized least-squares and logistic regression. The difference between the three lies in the choice of loss function: regularized least-squares amounts to empirical risk minimization with the square-loss,  \n  \n    \n      \n        \n          ℓ\n          \n            s\n            q\n          \n        \n        (\n        y\n        ,\n        z\n        )\n        =\n        (\n        y\n        −\n        z\n        \n          )\n          \n            2\n          \n        \n      \n    \n    {\\displaystyle \\ell _{sq}(y,z)=(y-z)^{2}}\n  ; logistic regression employs the log-loss,\n\nTarget functions\nThe difference between the hinge loss and these other loss functions is best stated in terms of target functions - the function that minimizes expected risk for a given pair of random variables \n  \n    \n      \n        X\n        ,\n        \n        y\n      \n    \n    {\\displaystyle X,\\,y}\n  .\nIn particular, let \n  \n    \n      \n        \n          y\n          \n            x\n          \n        \n      \n    \n    {\\displaystyle y_{x}}\n   denote \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n   conditional on the event that \n  \n    \n      \n        X\n        =\n        x\n      \n    \n    {\\displaystyle X=x}\n  .  In the classification setting, we have:\n\nThe optimal classifier is therefore:\n\nFor the square-loss, the target function is the conditional expectation function, \n  \n    \n      \n        \n          f\n          \n            s\n            q\n          \n        \n        (\n        x\n        )\n        =\n        \n          E\n        \n        \n          [\n          \n            y\n            \n              x\n            \n          \n          ]\n        \n      \n    \n    {\\displaystyle f_{sq}(x)=\\mathbb {E} \\left[y_{x}\\right]}\n  ; For the logistic loss, it's the logit function, \n  \n    \n      \n        \n          f\n          \n            log\n          \n        \n        (\n        x\n        )\n        =\n        ln\n        ⁡\n        \n          (\n          \n            \n              p\n              \n                x\n              \n            \n            \n              /\n            \n            (\n            \n              1\n              −\n              \n                p\n                \n                  x\n                \n              \n            \n            )\n          \n          )\n        \n      \n    \n    {\\displaystyle f_{\\log }(x)=\\ln \\left(p_{x}/({1-p_{x}})\\right)}\n  . While both of these target functions yield the correct classifier, as \n  \n    \n      \n        sgn\n        ⁡\n        (\n        \n          f\n          \n            s\n            q\n          \n        \n        )\n        =\n        sgn\n        ⁡\n        (\n        \n          f\n          \n            log\n          \n        \n        )\n        =\n        \n          f\n          \n            ∗\n          \n        \n      \n    \n    {\\displaystyle \\operatorname {sgn}(f_{sq})=\\operatorname {sgn}(f_{\\log })=f^{*}}\n  , they give us more information than we need. In fact, they give us enough information to completely describe the distribution of \n  \n    \n      \n        \n          y\n          \n            x\n          \n        \n      \n    \n    {\\displaystyle y_{x}}\n  .\nOn the other hand, one can check that the target function for the hinge loss is exactly \n  \n    \n      \n        \n          f\n          \n            ∗\n          \n        \n      \n    \n    {\\displaystyle f^{*}}\n  . Thus, in a sufficiently rich hypothesis space—or equivalently, for an appropriately chosen kernel—the SVM classifier will converge to the simplest function (in terms of \n  \n    \n      \n        \n          \n            R\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {R}}}\n  ) that correctly classifies the data. This extends the geometric interpretation of SVM—for linear classification, the empirical risk is minimized by any function whose margins lie between the support vectors, and the simplest of these is the max-margin classifier.\n\nProperties\nSVMs belong to a family of generalized linear classifiers and can be interpreted as an extension of the perceptron. They can also be considered a special case of Tikhonov regularization. A special property is that they simultaneously minimize the empirical classification error and maximize the geometric margin; hence they are also known as maximum margin classifiers.\nA comparison of the SVM to other classifiers has been made by Meyer, Leisch and Hornik.\n\nParameter selection\nThe effectiveness of SVM depends on the selection of kernel, the kernel's parameters, and soft margin parameter \n  \n    \n      \n        λ\n      \n    \n    {\\displaystyle \\lambda }\n  .\nA common choice is a Gaussian kernel, which has a single parameter \n  \n    \n      \n        γ\n      \n    \n    {\\displaystyle \\gamma }\n  . The best combination of \n  \n    \n      \n        λ\n      \n    \n    {\\displaystyle \\lambda }\n   and \n  \n    \n      \n        γ\n      \n    \n    {\\displaystyle \\gamma }\n   is often selected by a grid search with exponentially growing sequences of \n  \n    \n      \n        λ\n      \n    \n    {\\displaystyle \\lambda }\n   and \n  \n    \n      \n        γ\n      \n    \n    {\\displaystyle \\gamma }\n  , for example, \n  \n    \n      \n        λ\n        ∈\n        {\n        \n          2\n          \n            −\n            5\n          \n        \n        ,\n        \n          2\n          \n            −\n            3\n          \n        \n        ,\n        …\n        ,\n        \n          2\n          \n            13\n          \n        \n        ,\n        \n          2\n          \n            15\n          \n        \n        }\n      \n    \n    {\\displaystyle \\lambda \\in \\{2^{-5},2^{-3},\\dots ,2^{13},2^{15}\\}}\n  ; \n  \n    \n      \n        γ\n        ∈\n        {\n        \n          2\n          \n            −\n            15\n          \n        \n        ,\n        \n          2\n          \n            −\n            13\n          \n        \n        ,\n        …\n        ,\n        \n          2\n          \n            1\n          \n        \n        ,\n        \n          2\n          \n            3\n          \n        \n        }\n      \n    \n    {\\displaystyle \\gamma \\in \\{2^{-15},2^{-13},\\dots ,2^{1},2^{3}\\}}\n  . Typically, each combination of parameter choices is checked using cross validation, and the parameters with best cross-validation accuracy are picked. Alternatively, recent work in Bayesian optimization can be used to select \n  \n    \n      \n        λ\n      \n    \n    {\\displaystyle \\lambda }\n   and \n  \n    \n      \n        γ\n      \n    \n    {\\displaystyle \\gamma }\n   , often requiring the evaluation of far fewer parameter combinations than grid search. The final model, which is used for testing and for classifying new data, is then trained on the whole training set using the selected parameters.\n\nIssues\nPotential drawbacks of the SVM include the following aspects:\n\nRequires full labeling of input data\nUncalibrated class membership probabilities—SVM stems from Vapnik's theory which avoids estimating probabilities on finite data\nThe SVM is only directly applicable for two-class tasks. Therefore, algorithms that reduce the multi-class task to several binary problems have to be applied; see the multi-class SVM section.\nParameters of a solved model are difficult to interpret.\n\nExtensions\nSupport vector clustering (SVC)\nSVC is a similar method that also builds on kernel functions but is appropriate for unsupervised learning.\n\nMulticlass SVM\nMulticlass SVM aims to assign labels to instances by using support vector machines, where the labels are drawn from a finite set of several elements.\nThe dominant approach for doing so is to reduce the single multiclass problem into multiple binary classification problems. Common methods for such reduction include:\nBuilding binary classifiers that distinguish between one of the labels and the rest (one-versus-all) or between every pair of classes (one-versus-one). Classification of new instances for the one-versus-all case is done by a winner-takes-all strategy, in which the classifier with the highest-output function assigns the class (it is important that the output functions be calibrated to produce comparable scores). For the one-versus-one approach, classification is done by a max-wins voting strategy, in which every classifier assigns the instance to one of the two classes, then the vote for the assigned class is increased by one vote, and finally the class with the most votes determines the instance classification.\nDirected acyclic graph SVM (DAGSVM)\nError-correcting output codesCrammer and Singer proposed a multiclass SVM method which casts the multiclass classification problem into a single optimization problem, rather than decomposing it into multiple binary classification problems. See also Lee, Lin and Wahba and Van den Burg and Groenen.\n\nTransductive support vector machines\nTransductive support vector machines extend SVMs in that they could also treat partially labeled data in semi-supervised learning by following the principles of transduction. Here, in addition to the training set \n  \n    \n      \n        \n          \n            D\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {D}}}\n  , the learner is also given a set\n\nof test examples to be classified. Formally, a transductive support vector machine is defined by the following primal optimization problem:Minimize (in \n  \n    \n      \n        \n          w\n        \n        ,\n        b\n        ,\n        \n          \n            y\n          \n          \n            ⋆\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {w} ,b,\\mathbf {y} ^{\\star }}\n  )\n\nsubject to (for any \n  \n    \n      \n        i\n        =\n        1\n        ,\n        …\n        ,\n        n\n      \n    \n    {\\displaystyle i=1,\\dots ,n}\n   and any \n  \n    \n      \n        j\n        =\n        1\n        ,\n        …\n        ,\n        k\n      \n    \n    {\\displaystyle j=1,\\dots ,k}\n  )\n\nand\n\nTransductive support vector machines were introduced by Vladimir N. Vapnik in 1998.\n\nStructured SVM\nSVMs have been generalized to structured SVMs, where the label space is structured and of possibly infinite size.\n\nRegression\nA version of SVM for regression was proposed in 1996 by Vladimir N. Vapnik, Harris Drucker, Christopher J. C. Burges, Linda Kaufman and Alexander J. Smola. This method is called support vector regression (SVR). The model produced by support vector classification (as described above) depends only on a subset of the training data, because the cost function for building the model does not care about training points that lie beyond the margin. Analogously, the model produced by SVR depends only on a subset of the training data, because the cost function for building the model ignores any training data close to the model prediction. Another SVM version known as least-squares support vector machine (LS-SVM) has been proposed by Suykens and Vandewalle.Training the original SVR means solving\nminimize \n  \n    \n      \n        \n          \n            \n              1\n              2\n            \n          \n        \n        ‖\n        w\n        \n          ‖\n          \n            2\n          \n        \n      \n    \n    {\\displaystyle {\\tfrac {1}{2}}\\|w\\|^{2}}\n  \nsubject to \n  \n    \n      \n        \n          |\n        \n        \n          y\n          \n            i\n          \n        \n        −\n        ⟨\n        w\n        ,\n        \n          x\n          \n            i\n          \n        \n        ⟩\n        −\n        b\n        \n          |\n        \n        ≤\n        ε\n      \n    \n    {\\displaystyle |y_{i}-\\langle w,x_{i}\\rangle -b|\\leq \\varepsilon }\n  where \n  \n    \n      \n        \n          x\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle x_{i}}\n   is a training sample with target value \n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle y_{i}}\n  . The inner product plus intercept \n  \n    \n      \n        ⟨\n        w\n        ,\n        \n          x\n          \n            i\n          \n        \n        ⟩\n        +\n        b\n      \n    \n    {\\displaystyle \\langle w,x_{i}\\rangle +b}\n   is the prediction for that sample, and \n  \n    \n      \n        ε\n      \n    \n    {\\displaystyle \\varepsilon }\n   is a free parameter that serves as a threshold: all predictions have to be within an \n  \n    \n      \n        ε\n      \n    \n    {\\displaystyle \\varepsilon }\n   range of the true predictions. Slack variables are usually added into the above to allow for errors and to allow approximation in the case the above problem is infeasible.\n\nBayesian SVM\nIn 2011 it was shown by Polson and Scott that the SVM admits a Bayesian interpretation through the technique of data augmentation. In this approach the SVM is viewed as a graphical model (where the parameters are connected via probability distributions). This extended view allows the application of Bayesian techniques to SVMs, such as flexible feature modeling, automatic hyperparameter tuning, and predictive uncertainty quantification. Recently, a scalable version of the Bayesian SVM was developed by Florian Wenzel, enabling the application of Bayesian SVMs to big data. Florian Wenzel developed two different versions, a variational inference (VI) scheme for the Bayesian kernel support vector machine (SVM) and a stochastic version (SVI) for the linear Bayesian SVM.\n\nImplementation\nThe parameters of the maximum-margin hyperplane are derived by solving the optimization. There exist several specialized algorithms for quickly solving the quadratic programming (QP) problem that arises from SVMs, mostly relying on heuristics for breaking the problem down into smaller, more manageable chunks.\nAnother approach is to use an interior-point method that uses Newton-like iterations to find a solution of the Karush–Kuhn–Tucker conditions of the primal and dual problems.\nInstead of solving a sequence of broken-down problems, this approach directly solves the problem altogether. To avoid solving a linear system involving the large kernel matrix, a low-rank approximation to the matrix is often used in the kernel trick.\nAnother common method is Platt's sequential minimal optimization (SMO) algorithm, which breaks the problem down into 2-dimensional sub-problems that are solved analytically, eliminating the need for a numerical optimization algorithm and matrix storage. This algorithm is conceptually simple, easy to implement, generally faster, and has better scaling properties for difficult SVM problems.The special case of linear support vector machines can be solved more efficiently by the same kind of algorithms used to optimize its close cousin, logistic regression; this class of algorithms includes sub-gradient descent (e.g., PEGASOS) and coordinate descent (e.g., LIBLINEAR). LIBLINEAR has some attractive training-time properties. Each convergence iteration takes time linear in the time taken to read the train data, and the iterations also have a Q-linear convergence property, making the algorithm extremely fast.\nThe general kernel SVMs can also be solved more efficiently using sub-gradient descent (e.g. P-packSVM), especially when parallelization is allowed.\nKernel SVMs are available in many machine-learning toolkits, including LIBSVM, MATLAB, SAS, SVMlight, kernlab, scikit-learn, Shogun, Weka, Shark, JKernelMachines, OpenCV and others.\nPreprocessing of data (standardization) is highly recommended to enhance accuracy of classification. There are a few methods of standardization, such as min-max, normalization by decimal scaling, Z-score. Subtraction of mean and division by variance of each feature is usually used for SVM.\n\nSee also\nIn situ adaptive tabulation\nKernel machines\nFisher kernel\nPlatt scaling\nPolynomial kernel\nPredictive analytics\nRegularization perspectives on support vector machines\nRelevance vector machine, a probabilistic sparse-kernel model identical in functional form to SVM\nSequential minimal optimization\nSpace mapping\nWinnow (algorithm)\n\nReferences\nFurther reading\nBennett, Kristin P.; Campbell, Colin (2000). \"Support Vector Machines: Hype or Hallelujah?\" (PDF). SIGKDD Explorations. 2 (2): 1–13. doi:10.1145/380995.380999. S2CID 207753020.\nCristianini, Nello; Shawe-Taylor, John (2000). An Introduction to Support Vector Machines and other kernel-based learning methods. Cambridge University Press. ISBN 0-521-78019-5.\nFradkin, Dmitriy; Muchnik, Ilya (2006). \"Support Vector Machines for Classification\" (PDF). In Abello, J.; Carmode, G. (eds.). Discrete Methods in Epidemiology. DIMACS Series in Discrete Mathematics and Theoretical Computer Science. Vol. 70. pp. 13–20.\nJoachims, Thorsten (1998). \"Text categorization with Support Vector Machines: Learning with many relevant features\". In Nédellec, Claire; Rouveirol, Céline (eds.). \"Machine Learning: ECML-98. Lecture Notes in Computer Science. Vol. 1398. Berlin, Heidelberg: Springer. p. 137-142. doi:10.1007/BFb0026683. ISBN 978-3-540-64417-0. S2CID 2427083.\nIvanciuc, Ovidiu (2007). \"Applications of Support Vector Machines in Chemistry\" (PDF). Reviews in Computational Chemistry. 23: 291–400. doi:10.1002/9780470116449.ch6. ISBN 9780470116449.\nJames, Gareth; Witten, Daniela; Hastie, Trevor; Tibshirani, Robert (2013). \"Support Vector Machines\" (PDF). An Introduction to Statistical Learning : with Applications in R. New York: Springer. pp. 337–372. ISBN 978-1-4614-7137-0.\nSchölkopf, Bernhard; Smola, Alexander J. (2002). Learning with Kernels. Cambridge, MA: MIT Press. ISBN 0-262-19475-9.\nSteinwart, Ingo; Christmann, Andreas (2008). Support Vector Machines. New York: Springer. ISBN 978-0-387-77241-7.\nTheodoridis, Sergios; Koutroumbas, Konstantinos (2009). Pattern Recognition (4th ed.). Academic Press. ISBN 978-1-59749-272-0.\n\nExternal links\nlibsvm, LIBSVM is a popular library of SVM learners\nliblinear is a library for large linear classification including some SVMs\nSVM light is a collection of software tools for learning and classification using SVM\nSVMJS live demo Archived 2013-05-05 at the Wayback Machine is a GUI demo for JavaScript implementation of SVMs",
    "Decision Trees": "A decision tree  is a decision support hierarchical model that uses a tree-like model of decisions and their possible consequences, including chance event outcomes, resource costs, and utility. It is one way to display an algorithm that only contains conditional control statements.\nDecision trees are commonly used in operations research, specifically in decision analysis, to help identify a strategy most likely to reach a goal, but are also a popular tool in machine learning.\n\nOverview\nA decision tree is a flowchart-like structure in which each internal node represents a \"test\" on an attribute (e.g. whether a coin flip comes up heads or tails), each branch represents the outcome of the test, and each leaf node represents a class label (decision taken after computing all attributes). The paths from root to leaf represent classification rules.\nIn decision analysis, a decision tree and the closely related influence diagram are used as a visual and analytical decision support tool, where the expected values (or expected utility) of competing alternatives are calculated.\nA decision tree consists of three types of nodes:\nDecision nodes – typically represented by squares\nChance nodes – typically represented by circles\nEnd nodes – typically represented by trianglesDecision trees are commonly used in operations research and operations management. If, in practice, decisions have to be taken online with no recall under incomplete knowledge, a decision tree should be paralleled by a probability model as a best choice model or online selection model algorithm. Another use of decision trees is as a descriptive means for calculating conditional probabilities.\nDecision trees, influence diagrams, utility functions, and other decision analysis tools and methods are taught to undergraduate students in schools of business, health economics, and public health, and are examples of operations research or management science methods.\n\nDecision-tree building blocks\nDecision-tree elements\nDrawn from left to right, a decision tree has only burst nodes (splitting paths) but no sink nodes (converging paths). So used manually they can grow very big and are then often hard to draw fully by hand. Traditionally, decision trees have been created manually – as the aside example shows – although increasingly, specialized software is employed.\n\nDecision rules\nThe decision tree can be linearized into decision rules, where the outcome is the contents of the leaf node, and the conditions along the path form a conjunction in the if clause. In general, the rules have the form:\n\nif condition1 and condition2 and condition3 then outcome.Decision rules can be generated by constructing association rules with the target variable on the right. They can also denote temporal or causal relations.\n\nDecision tree using flowchart symbols\nCommonly a decision tree is drawn using flowchart symbols as it is easier for many to read and understand. Note there is a conceptual error in the \"Proceed\" calculation of the tree shown below; the error relates to the calculation of \"costs\" awarded in a legal action.\n\nAnalysis example\nAnalysis can take into account the decision maker's (e.g., the company's) preference or utility function, for example:\n\nThe basic interpretation in this situation is that the company prefers B's risk and payoffs under realistic risk preference coefficients (greater than $400K—in that range of risk aversion, the company would need to model a third strategy, \"Neither A nor B\").\nAnother example, commonly used in operations research courses, is the distribution of lifeguards on beaches (a.k.a. the \"Life's a Beach\" example). The example describes two beaches with lifeguards to be distributed on each beach. There is maximum budget B that can be distributed among the two beaches (in total), and using a marginal returns table, analysts can decide how many lifeguards to allocate to each beach.\n\nIn this example, a decision tree can be drawn to illustrate the principles of diminishing returns on beach #1.\n\nThe decision tree illustrates that when sequentially distributing lifeguards, placing a first lifeguard on beach #1 would be optimal if there is only the budget for 1 lifeguard. But if there is a budget for two guards, then placing both on beach #2 would prevent more overall drownings.\n\nInfluence diagram\nMuch of the information in a decision tree can be represented more compactly as an influence diagram, focusing attention on the issues and relationships between events.\n\nAssociation rule induction\nDecision trees can also be seen as generative models of induction rules from empirical data. An optimal decision tree is then defined as a tree that accounts for most of the data, while minimizing the number of levels (or \"questions\"). Several algorithms to generate such optimal trees have been devised, such as ID3/4/5, CLS, ASSISTANT, and CART.\n\nAdvantages and disadvantages\nAmong decision support tools, decision trees (and influence diagrams) have several advantages. Decision trees:\n\nAre simple to understand and interpret. People are able to understand decision tree models after a brief explanation.\nHave value even with little hard data. Important insights can be generated based on experts describing a situation (its alternatives, probabilities, and costs) and their preferences for outcomes.\nHelp determine worst, best, and expected values for different scenarios.\nUse a white box model. If a given result is provided by a model.\nCan be combined with other decision techniques.\nThe action of more than one decision-maker can be considered.Disadvantages of decision trees:\n\nThey are unstable, meaning that a small change in the data can lead to a large change in the structure of the optimal decision tree.\nThey are often relatively inaccurate.  Many other predictors perform better with similar data.  This can be remedied by replacing a single decision tree with a random forest of decision trees, but a random forest is not as easy to interpret as a single decision tree.\nFor data including categorical variables with different numbers of levels, information gain in decision trees is biased in favor of those attributes with more levels.\nCalculations can get very complex, particularly if many values are uncertain and/or if many outcomes are linked.\n\nOptimizing a decision tree\nA few things should be considered when improving the accuracy of the decision tree classifier. The following are some possible optimizations to consider when looking to make sure the decision tree model produced makes the correct decision or classification. Note that these things are not the only things to consider but only some.\nIncreasing the number of levels of the tree\nThe accuracy of the decision tree can change based on the depth of the decision tree. In many cases, the tree’s leaves are pure nodes. When a node is pure, it means that all the data in that node belongs to a single class. For example, if the classes in the data set are Cancer and Non-Cancer a leaf node would be considered pure when all the sample data in a leaf node is part of only one class, either cancer or non-cancer. It is important to note that a deeper tree is not always better when optimizing the decision tree. A deeper tree can influence the runtime in a negative way. If a certain classification algorithm is being used, then a deeper tree could mean the runtime of this classification algorithm is significantly slower. There is also the possibility that the actual algorithm building the decision tree will get significantly slower as the tree gets deeper. If the tree-building algorithm being used splits pure nodes, then a decrease in the overall accuracy of the tree classifier could be experienced. Occasionally, going deeper in the tree can cause an accuracy decrease in general, so it is very important to test modifying the depth of the decision tree and selecting the depth that produces the best results. To summarize, observe the points below, we will define the number D as the depth of the tree.\nPossible advantages of increasing the number D:\n\nAccuracy of the decision-tree classification model increases.Possible disadvantages of increasing D\n\n Runtime issues\nDecrease in accuracy in general\nPure node splits while going deeper can cause issues.The ability to test the differences in classification results when changing D is imperative. We must be able to easily change and test the variables that could affect the accuracy and reliability of the decision tree-model.\nThe choice of node-splitting functions\nThe node splitting function used can have an impact on improving the accuracy of the decision tree. For example, using the information-gain function may yield better results than using the phi function. The phi function is known as a measure of “goodness” of a candidate split  at a node in the decision tree. The information gain function is known as a measure of the “reduction in entropy”. In the following, we will build two decision trees. One decision tree will be built using the phi function to split the nodes and one decision tree will be built using the information gain function to split the nodes.\nThe main advantages and disadvantages of information gain and  phi function\n\nOne major drawback of information gain is that the feature that is chosen as the next node in the tree tends to have more unique values.\nAn advantage of information gain is that it tends to choose the most impactful features that are close to the root of the tree. It is a very good measure for deciding the relevance of some features.\nThe phi function is also a good measure for deciding the relevance of some features based on \"goodness\".This is the information gain function formula. The formula states the information gain is a function of the entropy of a node of the decision tree minus the entropy of a candidate split at node t of a decision tree. \n\n  \n    \n      \n        I\n        g\n        a\n        i\n        n\n        s\n        (\n        s\n        )\n        =\n        H\n        (\n        t\n        )\n        −\n        H\n        (\n        s\n        ,\n        t\n        )\n      \n    \n    {\\displaystyle Igains(s)=H(t)-H(s,t)}\n  \nThis is the phi function formula. The phi function is maximized when the chosen feature splits the samples in a way that produces homogenous splits and have around the same number of samples in each split.\n\n  \n    \n      \n        Φ\n        (\n        s\n        ,\n        t\n        )\n        =\n        (\n        2\n        ∗\n        \n          P\n          \n            L\n          \n        \n        ∗\n        \n          P\n          \n            R\n          \n        \n        )\n        ∗\n        Q\n        (\n        s\n        \n          |\n        \n        t\n        )\n      \n    \n    {\\displaystyle \\Phi (s,t)=(2*P_{L}*P_{R})*Q(s|t)}\n  \nWe will set D, which is the depth of the decision tree we are building, to three (D = 3). We also have the following data set of cancer and non-cancer samples and the mutation features that the samples either have or do not have. If a sample has a feature mutation then the sample is positive for that mutation, and it will be represented by one. If a sample does not have a feature mutation then the sample is negative for that mutation, and it will be represented by zero.   \nTo summarize, C stands for cancer and NC stands for non-cancer. The letter M stands for mutation, and if a sample has a particular mutation it will show up in the table as a one and otherwise zero.\n\nNow, we can use the formulas to calculate the phi function values and information gain values for each M in the dataset. Once all the values are calculated the tree can be produced. The first thing to be done is to select the root node. In information gain and the phi function we consider the optimal split to be the mutation that produces the highest value for information gain or the phi function. Now assume that M1  has the highest phi function value and M4 has the highest information gain value. The M1 mutation will be the root of our phi function tree and M4 will be the root of our information gain tree. You can observe the root nodes below \n\nNow, once we have chosen the root node we can split the samples into two groups based on whether a sample is positive or negative for the root node mutation. The groups will be called group A and group B. For example, if we use M1 to split the samples in the root node we get NC2 and C2 samples in group A and the rest of the samples NC4, NC3, NC1, C1 in group B.\nDisregarding the mutation chosen for the root node, proceed to place the next best features that have the highest values for information gain or the phi function in the left or right child nodes of the decision tree. Once we choose the root node and the two child nodes for the tree of depth = 3 we can just add the leaves. The leaves will represent the final classification decision the model has produced based on the mutations a sample either has or does not have. The left tree is the decision tree we obtain from using information gain to split the nodes and the right tree is what we obtain from using the phi function to split the nodes.\n\nNow assume the classification results from both trees are given using a confusion matrix.\nInformation gain confusion matrix:\n\nPhi function confusion matrix:\n\nThe tree using information gain has  the same results when using the phi function when calculating the accuracy. When we classify the samples based on the model using information gain we get one true positive, one false positive, zero false negatives, and four true negatives. For the model using the phi function we get two true positives, zero false positives, one false negative, and three true negatives. The next step is to evaluate the effectiveness of the decision tree using some key metrics that will be discussed in the evaluating a decision tree section below. The metrics that will be discussed below can help determine the next steps to be taken when optimizing the decision tree.\nOther techniques\nThe above information is not where it ends for building and optimizing a decision tree. There are many techniques for improving the decision tree classification models we build. One of the techniques is making our decision tree model from a bootstrapped dataset. The bootstrapped dataset helps remove the bias that occurs when building a decision tree model with the same data the model is tested with. The ability to leverage the power of random forests can also help significantly improve the overall accuracy of the model being built. This method generates many decisions from many decision trees and tallies up the votes from each decision tree to make the final classification. There are many techniques, but the main objective is to test building your decision tree model in different ways to make sure it reaches the highest performance level possible.\n\nEvaluating a decision tree\nIt is important to know the measurements used to evaluate decision trees. The main metrics used are accuracy, sensitivity, specificity, precision, miss rate, false discovery rate, and false omission rate. All these measurements are derived from the number of true positives, false positives, True negatives, and false negatives obtained when running a set of samples through the decision tree classification model. Also, a confusion matrix can be made to display these results. All these main metrics tell something different about the strengths and weaknesses of the classification model built based on your decision tree. For example, A low sensitivity with high specificity could indicate the classification model built from the decision tree does not do well identifying cancer samples over non-cancer samples.\nLet us take the confusion matrix below. The confusion matrix shows us the decision tree model classifier built gave 11 true positives, 1 false positive, 45 false negatives, and 105 true negatives.\n\nWe will now calculate the values accuracy, sensitivity, specificity, precision, miss rate, false discovery rate, and false omission rate. \nAccuracy:\n\n  \n    \n      \n        A\n        c\n        c\n        u\n        r\n        a\n        c\n        y\n        =\n        (\n        T\n        P\n        +\n        T\n        N\n        )\n        \n          /\n        \n        (\n        T\n        P\n        +\n        T\n        N\n        +\n        F\n        P\n        +\n        F\n        N\n        )\n      \n    \n    {\\displaystyle Accuracy=(TP+TN)/(TP+TN+FP+FN)}\n  \n\n  \n    \n      \n        (\n        11\n        +\n        105\n        )\n        ÷\n        162\n        =\n        71.60\n        %\n      \n    \n    {\\displaystyle (11+105)\\div 162=71.60\\%}\n  \nSensitivity (TPR – true positive rate):\n  \n    \n      \n        T\n        P\n        R\n        =\n        T\n        P\n        \n          /\n        \n        (\n        T\n        P\n        +\n        F\n        N\n        )\n      \n    \n    {\\displaystyle TPR=TP/(TP+FN)}\n  \n\n  \n    \n      \n        (\n        11\n        )\n        ÷\n        (\n        11\n        +\n        45\n        )\n        =\n        19.64\n        %\n      \n    \n    {\\displaystyle (11)\\div (11+45)=19.64\\%}\n  \nSpecificity (TNR – true negative rate):\n\n  \n    \n      \n        T\n        N\n        R\n        =\n        T\n        N\n        \n          /\n        \n        (\n        T\n        N\n        +\n        F\n        P\n        )\n      \n    \n    {\\displaystyle TNR=TN/(TN+FP)}\n  \n\n  \n    \n      \n        105\n        ÷\n        (\n        105\n        +\n        1\n        )\n        =\n        99.06\n        %\n      \n    \n    {\\displaystyle 105\\div (105+1)=99.06\\%}\n  \nPrecision (PPV – positive predictive value):\n\n  \n    \n      \n        P\n        P\n        V\n        =\n        T\n        P\n        \n          /\n        \n        (\n        T\n        P\n        +\n        F\n        P\n        )\n      \n    \n    {\\displaystyle PPV=TP/(TP+FP)}\n  \n\n  \n    \n      \n        11\n        \n          /\n        \n        (\n        11\n        +\n        1\n        )\n        =\n        91.66\n        %\n      \n    \n    {\\displaystyle 11/(11+1)=91.66\\%}\n  \nMiss Rate (FNR – false negative rate):\n\n  \n    \n      \n        F\n        N\n        R\n        =\n        F\n        N\n        \n          /\n        \n        (\n        F\n        N\n        +\n        T\n        P\n        )\n      \n    \n    {\\displaystyle FNR=FN/(FN+TP)}\n  \n\n  \n    \n      \n        45\n        ÷\n        (\n        45\n        +\n        11\n        )\n        =\n        80.35\n        %\n      \n    \n    {\\displaystyle 45\\div (45+11)=80.35\\%}\n  \nFalse discovery rate (FDR):\n\n  \n    \n      \n        F\n        D\n        R\n        =\n        F\n        P\n        \n          /\n        \n        (\n        F\n        P\n        +\n        T\n        P\n        )\n      \n    \n    {\\displaystyle FDR=FP/(FP+TP)}\n  \n\n  \n    \n      \n        1\n        ÷\n        (\n        1\n        +\n        11\n        )\n        =\n        8.30\n        %\n      \n    \n    {\\displaystyle 1\\div (1+11)=8.30\\%}\n  \nFalse omission rate (FOR):\n\n  \n    \n      \n        F\n        O\n        R\n        =\n        F\n        N\n        \n          /\n        \n        (\n        F\n        N\n        +\n        T\n        N\n        )\n      \n    \n    {\\displaystyle FOR=FN/(FN+TN)}\n  \n\n  \n    \n      \n        45\n        ÷\n        (\n        45\n        +\n        105\n        )\n        =\n        30.00\n        %\n      \n    \n    {\\displaystyle 45\\div (45+105)=30.00\\%}\n  \nOnce we have calculated the key metrics we can make some initial conclusions on the performance of the decision tree model built. The accuracy that we calculated was 71.60%. The accuracy value is good to start but we would like to get our models as accurate as possible while maintaining the overall performance. The sensitivity value of 19.64% means that out of everyone who was actually positive for cancer tested positive. If we look at the specificity value of 99.06% we know that out of all the samples that were negative for cancer actually tested negative. When it comes to sensitivity and specificity it is important to have a balance between the two values ,so if we can decrease our specificity to increase the sensitivity that would prove to be beneficial. These are just a few examples on how to use these values and the meanings behind them to evaluate the decision tree model and improve upon the next iteration.\n\nSee also\nBehavior tree (artificial intelligence, robotics and control) – control methodPages displaying wikidata descriptions as a fallback\nBoosting (machine learning) – Method in machine learning\nDecision cycle – Sequence of steps for decision-making\nDecision list\nDecision matrix\nDecision table – concise visual representation for specifying which actions to perform depending on given conditionsPages displaying wikidata descriptions as a fallback\nDecision tree model – Model of computational complexity of computation\nDesign rationale – explicit documentation of the reasons behind decisions made when designing a system or artifactPages displaying wikidata descriptions as a fallback\nDRAKON – Algorithm mapping tool\nMarkov chain – Random process independent of past history\nRandom forest – Binary search tree based ensemble machine learning method\nOrdinal priority approach – Multiple-criteria decision analysis method\nOdds algorithm – Method of computing optimal strategies for last-success problems\nTopological combinatorics\nTruth table – Mathematical table used in logic\n\nReferences\nExternal links\n\nExtensive Decision Tree tutorials and examples\nGallery of example decision trees\nGradient Boosted Decision Trees",
    "Gradient Boosting Machines": "Gradient boosting is a machine learning technique based on boosting in a functional space, where the target is pseudo-residuals rather than the typical residuals used in traditional boosting. It gives a prediction model in the form of an ensemble of weak prediction models, i.e., models that make very few assumptions about the data, which are typically simple decision trees. When a decision tree is the weak learner, the resulting algorithm is called gradient-boosted trees; it usually outperforms random forest. A gradient-boosted trees model is built in a stage-wise fashion as in other boosting methods, but it generalizes the other methods by allowing optimization of an arbitrary differentiable loss function.\n\nHistory\nThe idea of gradient boosting originated in the observation by Leo Breiman that boosting can be interpreted as an optimization algorithm on a suitable cost function. Explicit regression gradient boosting algorithms were subsequently developed, by Jerome H. Friedman, simultaneously with the more general functional gradient boosting perspective of Llew Mason, Jonathan Baxter, Peter Bartlett and Marcus Frean.\nThe latter two papers introduced the view of boosting algorithms as iterative functional gradient descent algorithms. That is, algorithms that optimize a cost function over function space by iteratively choosing a function (weak hypothesis) that points in the negative gradient direction. This functional gradient view of boosting has led to the development of boosting algorithms in many areas of machine learning and statistics beyond regression and classification.\n\nInformal introduction\n(This section follows the exposition of gradient boosting by Cheng Li.)\nLike other boosting methods, gradient boosting combines weak \"learners\" into a single strong learner in an iterative fashion. It is easiest to explain in the least-squares regression setting, where the goal is to \"teach\" a model \n  \n    \n      \n        F\n      \n    \n    {\\displaystyle F}\n   to predict values of the form \n  \n    \n      \n        \n          \n            \n              y\n              ^\n            \n          \n        \n        =\n        F\n        (\n        x\n        )\n      \n    \n    {\\displaystyle {\\hat {y}}=F(x)}\n   by minimizing the mean squared error \n  \n    \n      \n        \n          \n            \n              1\n              n\n            \n          \n        \n        \n          ∑\n          \n            i\n          \n        \n        (\n        \n          \n            \n              \n                y\n                ^\n              \n            \n          \n          \n            i\n          \n        \n        −\n        \n          y\n          \n            i\n          \n        \n        \n          )\n          \n            2\n          \n        \n      \n    \n    {\\displaystyle {\\tfrac {1}{n}}\\sum _{i}({\\hat {y}}_{i}-y_{i})^{2}}\n  , where \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n   indexes over some training set of size \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n   of actual values of the output variable \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n  :\n\n  \n    \n      \n        \n          \n            \n              \n                y\n                ^\n              \n            \n          \n          \n            i\n          \n        \n        =\n      \n    \n    {\\displaystyle {\\hat {y}}_{i}=}\n   the predicted value \n  \n    \n      \n        F\n        (\n        \n          x\n          \n            i\n          \n        \n        )\n      \n    \n    {\\displaystyle F(x_{i})}\n  \n\n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n        =\n      \n    \n    {\\displaystyle y_{i}=}\n   the observed value\n\n  \n    \n      \n        n\n        =\n      \n    \n    {\\displaystyle n=}\n   the number of samples in \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n  Now, let us consider a gradient boosting algorithm with \n  \n    \n      \n        M\n      \n    \n    {\\displaystyle M}\n   stages. At each stage \n  \n    \n      \n        m\n      \n    \n    {\\displaystyle m}\n   (\n  \n    \n      \n        1\n        ≤\n        m\n        ≤\n        M\n      \n    \n    {\\displaystyle 1\\leq m\\leq M}\n  ) of gradient boosting, suppose some imperfect model \n  \n    \n      \n        \n          F\n          \n            m\n          \n        \n      \n    \n    {\\displaystyle F_{m}}\n   (for low \n  \n    \n      \n        m\n      \n    \n    {\\displaystyle m}\n  , this model may simply return \n  \n    \n      \n        \n          \n            \n              \n                y\n                ^\n              \n            \n          \n          \n            i\n          \n        \n        =\n        \n          \n            \n              y\n              ¯\n            \n          \n        \n      \n    \n    {\\displaystyle {\\hat {y}}_{i}={\\bar {y}}}\n  , where the RHS is the mean of \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n  ). In order to improve \n  \n    \n      \n        \n          F\n          \n            m\n          \n        \n      \n    \n    {\\displaystyle F_{m}}\n  , our algorithm should add some new estimator, \n  \n    \n      \n        \n          h\n          \n            m\n          \n        \n        (\n        x\n        )\n      \n    \n    {\\displaystyle h_{m}(x)}\n  . Thus,\n\n  \n    \n      \n        \n          F\n          \n            m\n            +\n            1\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        =\n        \n          F\n          \n            m\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        +\n        \n          h\n          \n            m\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        =\n        \n          y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle F_{m+1}(x_{i})=F_{m}(x_{i})+h_{m}(x_{i})=y_{i}}\n  or, equivalently,\n\n  \n    \n      \n        \n          h\n          \n            m\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        =\n        \n          y\n          \n            i\n          \n        \n        −\n        \n          F\n          \n            m\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        )\n      \n    \n    {\\displaystyle h_{m}(x_{i})=y_{i}-F_{m}(x_{i})}\n  .Therefore, gradient boosting will fit \n  \n    \n      \n        \n          h\n          \n            m\n          \n        \n      \n    \n    {\\displaystyle h_{m}}\n   to the residual \n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n        −\n        \n          F\n          \n            m\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        )\n      \n    \n    {\\displaystyle y_{i}-F_{m}(x_{i})}\n  . As in other boosting variants, each \n  \n    \n      \n        \n          F\n          \n            m\n            +\n            1\n          \n        \n      \n    \n    {\\displaystyle F_{m+1}}\n   attempts to correct the errors of its predecessor \n  \n    \n      \n        \n          F\n          \n            m\n          \n        \n      \n    \n    {\\displaystyle F_{m}}\n  . A generalization of this idea to loss functions other than squared error, and to classification and ranking problems, follows from the observation that residuals \n  \n    \n      \n        \n          h\n          \n            m\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        )\n      \n    \n    {\\displaystyle h_{m}(x_{i})}\n   for a given model are proportional to the negative gradients of the mean squared error (MSE) loss function (with respect to \n  \n    \n      \n        F\n        (\n        \n          x\n          \n            i\n          \n        \n        )\n      \n    \n    {\\displaystyle F(x_{i})}\n  ):\n\n  \n    \n      \n        \n          L\n          \n            \n              M\n              S\n              E\n            \n          \n        \n        =\n        \n          \n            1\n            n\n          \n        \n        \n          ∑\n          \n            i\n            =\n            1\n          \n          \n            n\n          \n        \n        \n          \n            (\n            \n              \n                y\n                \n                  i\n                \n              \n              −\n              F\n              (\n              \n                x\n                \n                  i\n                \n              \n              )\n            \n            )\n          \n          \n            2\n          \n        \n      \n    \n    {\\displaystyle L_{\\rm {MSE}}={\\frac {1}{n}}\\sum _{i=1}^{n}\\left(y_{i}-F(x_{i})\\right)^{2}}\n  \n  \n    \n      \n        −\n        \n          \n            \n              ∂\n              \n                L\n                \n                  \n                    M\n                    S\n                    E\n                  \n                \n              \n            \n            \n              ∂\n              F\n              (\n              \n                x\n                \n                  i\n                \n              \n              )\n            \n          \n        \n        =\n        \n          \n            2\n            n\n          \n        \n        (\n        \n          y\n          \n            i\n          \n        \n        −\n        F\n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        )\n        =\n        \n          \n            2\n            n\n          \n        \n        \n          h\n          \n            m\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        )\n      \n    \n    {\\displaystyle -{\\frac {\\partial L_{\\rm {MSE}}}{\\partial F(x_{i})}}={\\frac {2}{n}}(y_{i}-F(x_{i}))={\\frac {2}{n}}h_{m}(x_{i})}\n  .So, gradient boosting could be specialized to a gradient descent algorithm, and generalizing it entails \"plugging in\" a different loss and its gradient.\n\nAlgorithm\nIn many supervised learning problems there is an output variable y and a vector of input variables x, related to each other with some probabilistic distribution. The goal is to find some function \n  \n    \n      \n        \n          \n            \n              F\n              ^\n            \n          \n        \n        (\n        x\n        )\n      \n    \n    {\\displaystyle {\\hat {F}}(x)}\n   that best approximates the output variable from the values of input variables. This is formalized by introducing some loss function \n  \n    \n      \n        L\n        (\n        y\n        ,\n        F\n        (\n        x\n        )\n        )\n      \n    \n    {\\displaystyle L(y,F(x))}\n   and minimizing it in expectation:\n\n  \n    \n      \n        \n          \n            \n              F\n              ^\n            \n          \n        \n        =\n        \n          \n            \n              arg\n              ⁡\n              min\n            \n            F\n          \n        \n        \n        \n          \n            E\n          \n          \n            x\n            ,\n            y\n          \n        \n        [\n        L\n        (\n        y\n        ,\n        F\n        (\n        x\n        )\n        )\n        ]\n      \n    \n    {\\displaystyle {\\hat {F}}={\\underset {F}{\\arg \\min }}\\,\\mathbb {E} _{x,y}[L(y,F(x))]}\n  .The gradient boosting method assumes a real-valued y. It seeks an approximation \n  \n    \n      \n        \n          \n            \n              F\n              ^\n            \n          \n        \n        (\n        x\n        )\n      \n    \n    {\\displaystyle {\\hat {F}}(x)}\n   in the form of a weighted sum of M functions \n  \n    \n      \n        \n          h\n          \n            m\n          \n        \n        (\n        x\n        )\n      \n    \n    {\\displaystyle h_{m}(x)}\n   from some class \n  \n    \n      \n        \n          \n            H\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {H}}}\n  , called base (or weak) learners:\n\n  \n    \n      \n        \n          \n            \n              F\n              ^\n            \n          \n        \n        (\n        x\n        )\n        =\n        \n          ∑\n          \n            m\n            =\n            1\n          \n          \n            M\n          \n        \n        \n          γ\n          \n            m\n          \n        \n        \n          h\n          \n            m\n          \n        \n        (\n        x\n        )\n        +\n        \n          \n            const\n          \n        \n      \n    \n    {\\displaystyle {\\hat {F}}(x)=\\sum _{m=1}^{M}\\gamma _{m}h_{m}(x)+{\\mbox{const}}}\n  .We are usually given a training set \n  \n    \n      \n        {\n        (\n        \n          x\n          \n            1\n          \n        \n        ,\n        \n          y\n          \n            1\n          \n        \n        )\n        ,\n        …\n        ,\n        (\n        \n          x\n          \n            n\n          \n        \n        ,\n        \n          y\n          \n            n\n          \n        \n        )\n        }\n      \n    \n    {\\displaystyle \\{(x_{1},y_{1}),\\dots ,(x_{n},y_{n})\\}}\n   of known sample values of x and corresponding values of y. In accordance with the empirical risk minimization principle, the method tries to find an approximation \n  \n    \n      \n        \n          \n            \n              F\n              ^\n            \n          \n        \n        (\n        x\n        )\n      \n    \n    {\\displaystyle {\\hat {F}}(x)}\n   that minimizes the average value of the loss function on the training set, i.e., minimizes the empirical risk. It does so by starting with a model, consisting of a constant function \n  \n    \n      \n        \n          F\n          \n            0\n          \n        \n        (\n        x\n        )\n      \n    \n    {\\displaystyle F_{0}(x)}\n  , and incrementally expands it in a greedy fashion:\n\n  \n    \n      \n        \n          F\n          \n            0\n          \n        \n        (\n        x\n        )\n        =\n        \n          \n            \n              arg\n              ⁡\n              min\n            \n            γ\n          \n        \n        \n          \n            ∑\n            \n              i\n              =\n              1\n            \n            \n              n\n            \n          \n          \n            L\n            (\n            \n              y\n              \n                i\n              \n            \n            ,\n            γ\n            )\n          \n        \n      \n    \n    {\\displaystyle F_{0}(x)={\\underset {\\gamma }{\\arg \\min }}{\\sum _{i=1}^{n}{L(y_{i},\\gamma )}}}\n  ,\n\n  \n    \n      \n        \n          F\n          \n            m\n          \n        \n        (\n        x\n        )\n        =\n        \n          F\n          \n            m\n            −\n            1\n          \n        \n        (\n        x\n        )\n        +\n        \n          (\n          \n            \n              \n                \n                  a\n                  r\n                  g\n                  \n                  m\n                  i\n                  n\n                \n                \n                  \n                    h\n                    \n                      m\n                    \n                  \n                  ∈\n                  \n                    \n                      H\n                    \n                  \n                \n              \n            \n            \n              [\n              \n                \n                  ∑\n                  \n                    i\n                    =\n                    1\n                  \n                  \n                    n\n                  \n                \n                \n                  L\n                  (\n                  \n                    y\n                    \n                      i\n                    \n                  \n                  ,\n                  \n                    F\n                    \n                      m\n                      −\n                      1\n                    \n                  \n                  (\n                  \n                    x\n                    \n                      i\n                    \n                  \n                  )\n                  +\n                  \n                    h\n                    \n                      m\n                    \n                  \n                  (\n                  \n                    x\n                    \n                      i\n                    \n                  \n                  )\n                  )\n                \n              \n              ]\n            \n          \n          )\n        \n        (\n        x\n        )\n      \n    \n    {\\displaystyle F_{m}(x)=F_{m-1}(x)+\\left({\\underset {h_{m}\\in {\\mathcal {H}}}{\\operatorname {arg\\,min} }}\\left[{\\sum _{i=1}^{n}{L(y_{i},F_{m-1}(x_{i})+h_{m}(x_{i}))}}\\right]\\right)(x)}\n  ,for \n  \n    \n      \n        m\n        ≥\n        1\n      \n    \n    {\\displaystyle m\\geq 1}\n  , where \n  \n    \n      \n        \n          h\n          \n            m\n          \n        \n        ∈\n        \n          \n            H\n          \n        \n      \n    \n    {\\displaystyle h_{m}\\in {\\mathcal {H}}}\n   is a base learner function.\nUnfortunately, choosing the best function \n  \n    \n      \n        \n          h\n          \n            m\n          \n        \n      \n    \n    {\\displaystyle h_{m}}\n   at each step for an arbitrary loss function L is a computationally infeasible optimization problem in general. Therefore, we restrict our approach to a simplified version of the problem.\nThe idea is to apply a steepest descent step to this minimization problem (functional gradient descent).\nThe basic idea behind the steepest descent is to find a local minimum of the loss function by iterating on \n  \n    \n      \n        \n          F\n          \n            m\n            −\n            1\n          \n        \n        (\n        x\n        )\n      \n    \n    {\\displaystyle F_{m-1}(x)}\n  . In fact, the local maximum-descent direction of the loss function is the negative gradient.Hence, moving a small amount \n  \n    \n      \n        γ\n      \n    \n    {\\displaystyle \\gamma }\n   such that the linear approximation remains valid:\n\n  \n    \n      \n        \n          F\n          \n            m\n          \n        \n        (\n        x\n        )\n        =\n        \n          F\n          \n            m\n            −\n            1\n          \n        \n        (\n        x\n        )\n        −\n        γ\n        \n          ∑\n          \n            i\n            =\n            1\n          \n          \n            n\n          \n        \n        \n          \n            ∇\n            \n              \n                F\n                \n                  m\n                  −\n                  1\n                \n              \n            \n          \n          L\n          (\n          \n            y\n            \n              i\n            \n          \n          ,\n          \n            F\n            \n              m\n              −\n              1\n            \n          \n          (\n          \n            x\n            \n              i\n            \n          \n          )\n          )\n        \n      \n    \n    {\\displaystyle F_{m}(x)=F_{m-1}(x)-\\gamma \\sum _{i=1}^{n}{\\nabla _{F_{m-1}}L(y_{i},F_{m-1}(x_{i}))}}\n  \nwhere \n  \n    \n      \n        γ\n        >\n        0\n      \n    \n    {\\displaystyle \\gamma >0}\n  . For small \n  \n    \n      \n        γ\n      \n    \n    {\\displaystyle \\gamma }\n  , this implies that \n  \n    \n      \n        L\n        (\n        \n          y\n          \n            i\n          \n        \n        ,\n        \n          F\n          \n            m\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        )\n        ≤\n        L\n        (\n        \n          y\n          \n            i\n          \n        \n        ,\n        \n          F\n          \n            m\n            −\n            1\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        )\n      \n    \n    {\\displaystyle L(y_{i},F_{m}(x_{i}))\\leq L(y_{i},F_{m-1}(x_{i}))}\n  .\n\nFurthermore, we can optimize \n  \n    \n      \n        γ\n      \n    \n    {\\displaystyle \\gamma }\n   by finding the \n  \n    \n      \n        γ\n      \n    \n    {\\displaystyle \\gamma }\n   value for which the loss function has a minimum:\n\n  \n    \n      \n        \n          γ\n          \n            m\n          \n        \n        =\n        \n          \n            \n              arg\n              ⁡\n              min\n            \n            γ\n          \n        \n        \n          \n            ∑\n            \n              i\n              =\n              1\n            \n            \n              n\n            \n          \n          \n            L\n            (\n            \n              y\n              \n                i\n              \n            \n            ,\n            \n              F\n              \n                m\n              \n            \n            (\n            \n              x\n              \n                i\n              \n            \n            )\n            )\n          \n        \n        =\n        \n          \n            \n              arg\n              ⁡\n              min\n            \n            γ\n          \n        \n        \n          \n            ∑\n            \n              i\n              =\n              1\n            \n            \n              n\n            \n          \n          \n            L\n            \n              (\n              \n                \n                  y\n                  \n                    i\n                  \n                \n                ,\n                \n                  F\n                  \n                    m\n                    −\n                    1\n                  \n                \n                (\n                \n                  x\n                  \n                    i\n                  \n                \n                )\n                −\n                γ\n                \n                  ∇\n                  \n                    \n                      F\n                      \n                        m\n                        −\n                        1\n                      \n                    \n                  \n                \n                L\n                (\n                \n                  y\n                  \n                    i\n                  \n                \n                ,\n                \n                  F\n                  \n                    m\n                    −\n                    1\n                  \n                \n                (\n                \n                  x\n                  \n                    i\n                  \n                \n                )\n                )\n              \n              )\n            \n          \n        \n        .\n      \n    \n    {\\displaystyle \\gamma _{m}={\\underset {\\gamma }{\\arg \\min }}{\\sum _{i=1}^{n}{L(y_{i},F_{m}(x_{i}))}}={\\underset {\\gamma }{\\arg \\min }}{\\sum _{i=1}^{n}{L\\left(y_{i},F_{m-1}(x_{i})-\\gamma \\nabla _{F_{m-1}}L(y_{i},F_{m-1}(x_{i}))\\right)}}.}\n  \nIf we considered the continuous case, i.e., where \n  \n    \n      \n        \n          \n            H\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {H}}}\n   is the set of arbitrary differentiable functions on \n  \n    \n      \n        \n          R\n        \n      \n    \n    {\\displaystyle \\mathbb {R} }\n  , we would update the model in accordance with the following equations\n\n  \n    \n      \n        \n          F\n          \n            m\n          \n        \n        (\n        x\n        )\n        =\n        \n          F\n          \n            m\n            −\n            1\n          \n        \n        (\n        x\n        )\n        −\n        \n          γ\n          \n            m\n          \n        \n        \n          ∑\n          \n            i\n            =\n            1\n          \n          \n            n\n          \n        \n        \n          \n            ∇\n            \n              \n                F\n                \n                  m\n                  −\n                  1\n                \n              \n            \n          \n          L\n          (\n          \n            y\n            \n              i\n            \n          \n          ,\n          \n            F\n            \n              m\n              −\n              1\n            \n          \n          (\n          \n            x\n            \n              i\n            \n          \n          )\n          )\n        \n      \n    \n    {\\displaystyle F_{m}(x)=F_{m-1}(x)-\\gamma _{m}\\sum _{i=1}^{n}{\\nabla _{F_{m-1}}L(y_{i},F_{m-1}(x_{i}))}}\n  where \n  \n    \n      \n        \n          γ\n          \n            m\n          \n        \n      \n    \n    {\\displaystyle \\gamma _{m}}\n   is the step length, defined as\n\nIn the discrete case however, i.e. when the set \n  \n    \n      \n        \n          \n            H\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {H}}}\n   is finite, we choose the candidate function h closest to the gradient of L for which the coefficient γ may then be calculated with the aid of line search on the above equations. Note that this approach is a heuristic and therefore doesn't yield an exact solution to the given problem, but rather an approximation.\nIn pseudocode, the generic gradient boosting method is:\n\nGradient tree boosting\nGradient boosting is typically used with decision trees (especially CARTs) of a fixed size as base learners. For this special case, Friedman proposes a modification to gradient boosting method which improves the quality of fit of each base learner.\nGeneric gradient boosting at the m-th step would fit a decision tree \n  \n    \n      \n        \n          h\n          \n            m\n          \n        \n        (\n        x\n        )\n      \n    \n    {\\displaystyle h_{m}(x)}\n   to pseudo-residuals. Let \n  \n    \n      \n        \n          J\n          \n            m\n          \n        \n      \n    \n    {\\displaystyle J_{m}}\n   be the number of its leaves. The tree partitions the input space into \n  \n    \n      \n        \n          J\n          \n            m\n          \n        \n      \n    \n    {\\displaystyle J_{m}}\n   disjoint regions \n  \n    \n      \n        \n          R\n          \n            1\n            m\n          \n        \n        ,\n        …\n        ,\n        \n          R\n          \n            \n              J\n              \n                m\n              \n            \n            m\n          \n        \n      \n    \n    {\\displaystyle R_{1m},\\ldots ,R_{J_{m}m}}\n   and predicts a constant value in each region. Using the indicator notation, the output of \n  \n    \n      \n        \n          h\n          \n            m\n          \n        \n        (\n        x\n        )\n      \n    \n    {\\displaystyle h_{m}(x)}\n   for input x can be written as the sum:\n\n  \n    \n      \n        \n          h\n          \n            m\n          \n        \n        (\n        x\n        )\n        =\n        \n          ∑\n          \n            j\n            =\n            1\n          \n          \n            \n              J\n              \n                m\n              \n            \n          \n        \n        \n          b\n          \n            j\n            m\n          \n        \n        \n          \n            1\n          \n          \n            \n              R\n              \n                j\n                m\n              \n            \n          \n        \n        (\n        x\n        )\n        ,\n      \n    \n    {\\displaystyle h_{m}(x)=\\sum _{j=1}^{J_{m}}b_{jm}\\mathbf {1} _{R_{jm}}(x),}\n  where \n  \n    \n      \n        \n          b\n          \n            j\n            m\n          \n        \n      \n    \n    {\\displaystyle b_{jm}}\n   is the value predicted in the region \n  \n    \n      \n        \n          R\n          \n            j\n            m\n          \n        \n      \n    \n    {\\displaystyle R_{jm}}\n  .Then the coefficients \n  \n    \n      \n        \n          b\n          \n            j\n            m\n          \n        \n      \n    \n    {\\displaystyle b_{jm}}\n   are multiplied by some value \n  \n    \n      \n        \n          γ\n          \n            m\n          \n        \n      \n    \n    {\\displaystyle \\gamma _{m}}\n  , chosen using line search so as to minimize the loss function, and the model is updated as follows:\n\n  \n    \n      \n        \n          F\n          \n            m\n          \n        \n        (\n        x\n        )\n        =\n        \n          F\n          \n            m\n            −\n            1\n          \n        \n        (\n        x\n        )\n        +\n        \n          γ\n          \n            m\n          \n        \n        \n          h\n          \n            m\n          \n        \n        (\n        x\n        )\n        ,\n        \n        \n          γ\n          \n            m\n          \n        \n        =\n        \n          \n            \n              a\n              r\n              g\n              \n              m\n              i\n              n\n            \n            γ\n          \n        \n        \n          ∑\n          \n            i\n            =\n            1\n          \n          \n            n\n          \n        \n        L\n        (\n        \n          y\n          \n            i\n          \n        \n        ,\n        \n          F\n          \n            m\n            −\n            1\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        +\n        γ\n        \n          h\n          \n            m\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        )\n        .\n      \n    \n    {\\displaystyle F_{m}(x)=F_{m-1}(x)+\\gamma _{m}h_{m}(x),\\quad \\gamma _{m}={\\underset {\\gamma }{\\operatorname {arg\\,min} }}\\sum _{i=1}^{n}L(y_{i},F_{m-1}(x_{i})+\\gamma h_{m}(x_{i})).}\n  Friedman proposes to modify this algorithm so that it chooses a separate optimal value \n  \n    \n      \n        \n          γ\n          \n            j\n            m\n          \n        \n      \n    \n    {\\displaystyle \\gamma _{jm}}\n   for each of the tree's regions, instead of a single \n  \n    \n      \n        \n          γ\n          \n            m\n          \n        \n      \n    \n    {\\displaystyle \\gamma _{m}}\n   for the whole tree. He calls the modified algorithm \"TreeBoost\". The coefficients \n  \n    \n      \n        \n          b\n          \n            j\n            m\n          \n        \n      \n    \n    {\\displaystyle b_{jm}}\n   from the tree-fitting procedure can be then simply discarded and the model update rule becomes:\n\n  \n    \n      \n        \n          F\n          \n            m\n          \n        \n        (\n        x\n        )\n        =\n        \n          F\n          \n            m\n            −\n            1\n          \n        \n        (\n        x\n        )\n        +\n        \n          ∑\n          \n            j\n            =\n            1\n          \n          \n            \n              J\n              \n                m\n              \n            \n          \n        \n        \n          γ\n          \n            j\n            m\n          \n        \n        \n          \n            1\n          \n          \n            \n              R\n              \n                j\n                m\n              \n            \n          \n        \n        (\n        x\n        )\n        ,\n        \n        \n          γ\n          \n            j\n            m\n          \n        \n        =\n        \n          \n            \n              a\n              r\n              g\n              \n              m\n              i\n              n\n            \n            γ\n          \n        \n        \n          ∑\n          \n            \n              x\n              \n                i\n              \n            \n            ∈\n            \n              R\n              \n                j\n                m\n              \n            \n          \n        \n        L\n        (\n        \n          y\n          \n            i\n          \n        \n        ,\n        \n          F\n          \n            m\n            −\n            1\n          \n        \n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        +\n        γ\n        )\n        .\n      \n    \n    {\\displaystyle F_{m}(x)=F_{m-1}(x)+\\sum _{j=1}^{J_{m}}\\gamma _{jm}\\mathbf {1} _{R_{jm}}(x),\\quad \\gamma _{jm}={\\underset {\\gamma }{\\operatorname {arg\\,min} }}\\sum _{x_{i}\\in R_{jm}}L(y_{i},F_{m-1}(x_{i})+\\gamma ).}\n\nSize of trees\nJ\n      \n    \n    {\\displaystyle J}\n  , the number of terminal nodes in trees, is the method's parameter which can be adjusted for a data set at hand. It controls the maximum allowed level of interaction between variables in the model. With \n  \n    \n      \n        J\n        =\n        2\n      \n    \n    {\\displaystyle J=2}\n   (decision stumps), no interaction between variables is allowed. With \n  \n    \n      \n        J\n        =\n        3\n      \n    \n    {\\displaystyle J=3}\n   the model may include effects of the interaction between up to two variables, and so on.\nHastie et al. comment that typically \n  \n    \n      \n        4\n        ≤\n        J\n        ≤\n        8\n      \n    \n    {\\displaystyle 4\\leq J\\leq 8}\n   work well for boosting and results are fairly insensitive to the choice of \n  \n    \n      \n        J\n      \n    \n    {\\displaystyle J}\n   in this range, \n  \n    \n      \n        J\n        =\n        2\n      \n    \n    {\\displaystyle J=2}\n   is insufficient for many applications, and \n  \n    \n      \n        J\n        >\n        10\n      \n    \n    {\\displaystyle J>10}\n   is unlikely to be required.\n\nRegularization\nFitting the training set too closely can lead to degradation of the model's generalization ability. Several so-called regularization techniques reduce this overfitting effect by constraining the fitting procedure.\nOne natural regularization parameter is the number of gradient boosting iterations M (i.e. the number of trees in the model when the base learner is a decision tree). Increasing M reduces the error on training set, but setting it too high may lead to overfitting. An optimal value of M is often selected by monitoring prediction error on a separate validation data set. Besides controlling M, several other regularization techniques are used.\nAnother regularization parameter is the depth of the trees. The higher this value the more likely the model will overfit the training data.\n\nShrinkage\nAn important part of gradient boosting method is regularization by shrinkage which consists in modifying the update rule as follows:\n\n  \n    \n      \n        \n          F\n          \n            m\n          \n        \n        (\n        x\n        )\n        =\n        \n          F\n          \n            m\n            −\n            1\n          \n        \n        (\n        x\n        )\n        +\n        ν\n        ⋅\n        \n          γ\n          \n            m\n          \n        \n        \n          h\n          \n            m\n          \n        \n        (\n        x\n        )\n        ,\n        \n        0\n        <\n        ν\n        ≤\n        1\n        ,\n      \n    \n    {\\displaystyle F_{m}(x)=F_{m-1}(x)+\\nu \\cdot \\gamma _{m}h_{m}(x),\\quad 0<\\nu \\leq 1,}\n  where parameter \n  \n    \n      \n        ν\n      \n    \n    {\\displaystyle \\nu }\n   is called the \"learning rate\".\nEmpirically it has been found that using small learning rates (such as \n  \n    \n      \n        ν\n        <\n        0.1\n      \n    \n    {\\displaystyle \\nu <0.1}\n  ) yields dramatic improvements in models' generalization ability over gradient boosting without shrinking (\n  \n    \n      \n        ν\n        =\n        1\n      \n    \n    {\\displaystyle \\nu =1}\n  ). However, it comes at the price of increasing computational time both during training and querying: lower learning rate requires more iterations.\n\nStochastic gradient boosting\nSoon after the introduction of gradient boosting, Friedman proposed a minor modification to the algorithm, motivated by Breiman's bootstrap aggregation (\"bagging\") method. Specifically, he proposed that at each iteration of the algorithm, a base learner should be fit on a subsample of the training set drawn at random without replacement.  Friedman observed a substantial improvement in gradient boosting's accuracy with this modification.\nSubsample size is some constant fraction \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n   of the size of the training set. When \n  \n    \n      \n        f\n        =\n        1\n      \n    \n    {\\displaystyle f=1}\n  , the algorithm is deterministic and identical to the one described above. Smaller values of \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n   introduce randomness into the algorithm and help prevent overfitting, acting as a kind of regularization. The algorithm also becomes faster, because regression trees have to be fit to smaller datasets at each iteration. Friedman obtained that \n  \n    \n      \n        0.5\n        ≤\n        f\n        ≤\n        0.8\n      \n    \n    {\\displaystyle 0.5\\leq f\\leq 0.8}\n   leads to good results for small and moderate sized training sets. Therefore, \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n   is typically set to 0.5, meaning that one half of the training set is used to build each base learner.\nAlso, like in bagging, subsampling allows one to define an out-of-bag error of the prediction performance improvement by evaluating predictions on those observations which were not used in the building of the next base learner. Out-of-bag estimates help avoid the need for an independent validation dataset, but often underestimate actual performance improvement and the optimal number of iterations.\n\nNumber of observations in leaves\nGradient tree boosting implementations often also use regularization by limiting the minimum number of observations in trees' terminal nodes. It is used in the tree building process by ignoring any splits that lead to nodes containing fewer than this number of training set instances.\nImposing this limit helps to reduce variance in predictions at leaves.\n\nPenalize complexity of tree\nAnother useful regularization techniques for gradient boosted trees is to penalize model complexity of the learned model. The model complexity can be defined as the proportional number of leaves in the learned trees. The joint optimization of loss and model complexity corresponds to a post-pruning algorithm to remove branches that fail to reduce the loss by a threshold. Other kinds of regularization such as an \n  \n    \n      \n        \n          ℓ\n          \n            2\n          \n        \n      \n    \n    {\\displaystyle \\ell _{2}}\n   penalty on the leaf values can also be added to avoid overfitting.\n\nUsage\nGradient boosting can be used in the field of learning to rank. The commercial web search engines Yahoo and Yandex use variants of gradient boosting in their machine-learned ranking engines. Gradient boosting is also utilized in High Energy Physics in data analysis. At the Large Hadron Collider (LHC), variants of gradient boosting Deep Neural Networks (DNN) were successful in reproducing the results of non-machine learning methods of analysis on datasets used to discover the Higgs boson. Gradient boosting decision tree was also applied in earth and geological studies – for example quality evaluation of sandstone reservoir.\n\nNames\nThe method goes by a variety of names. Friedman introduced his regression technique as a \"Gradient Boosting Machine\" (GBM). Mason, Baxter et al. described the generalized abstract class of algorithms as \"functional gradient boosting\". Friedman et al. describe an advancement of  gradient boosted models as Multiple Additive Regression Trees (MART); Elith et al. describe that approach as \"Boosted Regression Trees\" (BRT).A popular open-source implementation for R calls it a \"Generalized Boosting Model\", however packages expanding this work use BRT. Yet another name is TreeNet, after an early commercial implementation from Salford System's Dan Steinberg, one of researchers who pioneered the use of tree-based methods. XGBoost is another popular modern implementation of the method with some extensions, like second-order optimization.\n\nDisadvantages\nWhile boosting can increase the accuracy of a base learner, such as a decision tree or linear regression, it sacrifices intelligibility and interpretability. For example, following the path that a decision tree takes to make its decision is trivial and self-explained, but following the paths of hundreds or thousands of trees is much harder. To achieve both performance and interpretability, some model compression techniques allow transforming an XGBoost into a single \"born-again\" decision tree that approximates the same decision function. Furthermore, its implementation may be more difficult due to the higher computational demand.\n\nSee also\nAdaBoost\nRandom forest\nCatboost\nLightGBM\nXGBoost\nDecision tree learning\n\nReferences\nFurther reading\nBoehmke, Bradley; Greenwell, Brandon (2019). \"Gradient Boosting\". Hands-On Machine Learning with R. Chapman & Hall. pp. 221–245. ISBN 978-1-138-49568-5.\n\nExternal links\nHow to explain gradient boosting\nGradient Boosted Regression Trees\nLightGBM",
    "Feature Engineering": "Feature engineering or feature extraction  or feature discovery is the process of extracting features (characteristics, properties, attributes) from raw data to support training a downstream statistical model.Other examples of features in physics include the construction of dimensionless numbers such as the Reynolds number in fluid dynamics, the Nusselt number in heat transfer, the Archimedes number in sedimentation, and construction of first approximations of the solution such as analytical strength of materials solutions in mechanics.\n\nRelevance\nFeatures vary in significance. Even relatively insignificant features may contribute to a model. Feature selection can reduce the number of features to prevent a model from becoming too specific to the training data set (overfitting).\n\nExplosion\nFeature explosion occurs when the number of identified features is too large for effective model estimation or optimization. Common causes include:\n\nFeature templates - implementing feature templates instead of coding new features\nFeature combinations - combinations that cannot be represented by a linear systemFeature explosion can be limited via techniques such as: regularization, kernel methods, and feature selection.\n\nAutomation\nAutomation of feature engineering is a research topic that dates back to the 1990s. Machine learning software that incorporates automated feature engineering has been commercially available since 2016. Related academic literature can be roughly separated into two types:\n\nMulti-relational decision tree learning (MRDTL) uses a supervised algorithm that is similar to a decision tree.\nDeep Feature Synthesis uses simpler methods.\n\nMulti-relational decision tree learning (MRDTL)\nMRDTL generates features in the form of SQL queries by successively adding clauses to the queries. For instance, the algorithm might start out with\n\nThe query can then successively be refined by adding conditions, such as \"WHERE t1.charge <= -0.392\".However, most  MRDTL studies base implementations on relational databases, which results in many redundant operations. These redundancies can be reduced by using techniques such as tuple id propagation. Efficiency can be increased by using incremental updates, which eliminates redundancies.\n\nOpen-source implementations\nThere are a number of open-source libraries and tools that automate feature engineering on relational data and time series:\n\nfeaturetools is a Python library for transforming time series and relational data into feature matrices for machine learning.\nOneBM or One-Button Machine combines feature transformations and feature selection on relational data with feature selection techniques. [OneBM] helps data scientists reduce data exploration time allowing them to try and error many ideas in short time. On the other hand, it enables non-experts, who are not familiar with data science, to quickly extract value from their data with a little effort, time, and cost.\ngetML community is an open source tool for automated feature engineering on time series and relational data. It is implemented in C/C++ with a Python interface. It has been shown to be at least 60 times faster than tsflex, tsfresh, tsfel, featuretools or kats.\ntsfresh is a Python library for feature extraction on time series data. It evaluates the quality of the features using hypothesis testing.\ntsflex is an open source Python library for extracting features from time series data. Despite being 100% written in Python, it has been shown to be faster and more memory efficient than tsfresh, seglearn or tsfel.\nseglearn is an extension for multivariate, sequential time series data to the scikit-learn Python library.\ntsfel is a Python package for feature extraction on time series data.\nkats is a Python toolkit for analyzing time series data.\n\nDeep feature synthesis\nThe deep feature synthesis (DFS) algorithm beat 615 of 906 human teams in a competition.\n\nFeature stores\nThe Feature Store is where the features are stored and organized for the explicit purpose of being used to either train models (by data scientists) or make predictions (by applications that have a trained model). It is a central location where you can either create or update groups of features created from multiple different data sources, or create and update new datasets from those feature groups for training models or for use in applications that do not want to compute the features but just retrieve them when it needs them to make predictions.A feature store includes the ability to store code used to generate features, apply the code to raw data, and serve those features to models upon request. Useful capabilities include feature versioning and policies governing the circumstances under which features can be used.Feature stores can be standalone software tools or built into machine learning platforms.\n\nAlternatives\nFeature engineering can be a time-consuming and error-prone process, as it requires domain expertise and often involves trial and error. Deep learning algorithms may be used to process a large raw dataset without having to resort to feature engineering. However, it's important to note that deep learning algorithms still require careful preprocessing and cleaning of the input data. In addition, choosing the right architecture, hyperparameters, and optimization algorithm for a deep neural network can be a challenging and iterative process.\n\nSee also\nCovariate\nData transformation\nFeature extraction\nFeature learning\nHashing trick\nKernel method\nList of datasets for machine learning research\nSpace mapping\nInstrumental variables estimation\n\nReferences\n\n\n== Further reading ==",
    "Dimensionality Reduction": "Dimensionality reduction, or dimension reduction, is the transformation of data from a high-dimensional space into a low-dimensional space so that the low-dimensional representation retains some meaningful properties of the original data, ideally close to its intrinsic dimension. Working in high-dimensional spaces can be undesirable for many reasons; raw data are often sparse as a consequence of the curse of dimensionality, and analyzing the data is usually computationally intractable (hard to control or deal with). Dimensionality reduction is common in fields that deal with large numbers of observations and/or large numbers of variables, such as signal processing, speech recognition, neuroinformatics, and bioinformatics.Methods are commonly divided into linear and nonlinear approaches. Approaches can also be divided into feature selection and feature extraction. Dimensionality reduction can be used for noise reduction, data visualization, cluster analysis, or as an intermediate step to facilitate other analyses.\n\nFeature selection\nFeature selection approaches try to find a subset of the input variables (also called features or attributes). The three strategies are: the filter strategy (e.g. information gain), the wrapper strategy (e.g. search guided by accuracy), and the embedded strategy (selected features are added or removed while building the model based on prediction errors).\nData analysis such as regression or classification can be done in the reduced space more accurately than in the original space.\n\nFeature projection\nFeature projection (also called feature extraction) transforms the data from the high-dimensional space to a space of fewer dimensions. The data transformation may be linear, as in principal component analysis (PCA), but many nonlinear dimensionality reduction techniques also exist. For multidimensional data, tensor representation can be used in dimensionality reduction through multilinear subspace learning.\n\nPrincipal component analysis (PCA)\nThe main linear technique for dimensionality reduction, principal component analysis, performs a linear mapping of the data to a lower-dimensional space in such a way that the variance of the data in the low-dimensional representation is maximized. In practice, the covariance (and sometimes the correlation) matrix of the data is constructed and the eigenvectors on this matrix are computed. The eigenvectors that correspond to the largest eigenvalues (the principal components) can now be used to reconstruct a large fraction of the variance of the original data. Moreover, the first few eigenvectors can often be interpreted in terms of the large-scale physical behavior of the system, because they often contribute the vast majority of the system's energy, especially in low-dimensional systems. Still, this must be proven on a case-by-case basis as not all systems exhibit this behavior. The original space (with dimension of the number of points) has been reduced (with data loss, but hopefully retaining the most important variance) to the space spanned by a few eigenvectors.\n\nNon-negative matrix factorization (NMF)\nNMF decomposes a non-negative matrix to the product of two non-negative ones, which has been a promising tool in fields where only non-negative signals exist, such as astronomy. NMF is well known since the multiplicative update rule by Lee & Seung, which has been continuously developed: the inclusion of uncertainties, the consideration of missing data and parallel computation, sequential construction which leads to the stability and linearity of NMF, as well as other updates including handling missing data in digital image processing.With a stable component basis during construction, and a linear modeling process, sequential NMF is able to preserve the flux in direct imaging of circumstellar structures in astronomy, as one of the methods of detecting exoplanets, especially for the direct imaging of circumstellar discs. In comparison with PCA, NMF does not remove the mean of the matrices, which leads to physical non-negative fluxes; therefore NMF is able to preserve more information than PCA as demonstrated by Ren et al.\n\nKernel PCA\nPrincipal component analysis can be employed in a nonlinear way by means of the kernel trick. The resulting technique is capable of constructing nonlinear mappings that maximize the variance in the data. The resulting technique is called kernel PCA.\n\nGraph-based kernel PCA\nOther prominent nonlinear techniques include manifold learning techniques such as Isomap, locally linear embedding (LLE), Hessian LLE, Laplacian eigenmaps, and methods based on tangent space analysis. These techniques construct a low-dimensional data representation using a cost function that retains local properties of the data, and can be viewed as defining a graph-based kernel for Kernel PCA.\nMore recently, techniques have been proposed that, instead of defining a fixed kernel, try to learn the kernel using semidefinite programming. The most prominent example of such a technique is maximum variance unfolding (MVU). The central idea of MVU is to exactly preserve all pairwise distances between nearest neighbors (in the inner product space), while maximizing the distances between points that are not nearest neighbors.\nAn alternative approach to neighborhood preservation is through the minimization of a cost function that measures differences between distances in the input and output spaces. Important examples of such techniques include: classical multidimensional scaling, which is identical to PCA; Isomap, which uses geodesic distances in the data space; diffusion maps, which use diffusion distances in the data space; t-distributed stochastic neighbor embedding (t-SNE), which minimizes the divergence between distributions over pairs of points; and curvilinear component analysis.\nA different approach to nonlinear dimensionality reduction is through the use of autoencoders, a special kind of feedforward neural networks with a bottle-neck hidden layer. The training of deep encoders is typically performed using a greedy layer-wise pre-training (e.g., using a stack of restricted Boltzmann machines) that is followed by a finetuning stage based on backpropagation.\n\nLinear discriminant analysis (LDA)\nLinear discriminant analysis (LDA) is a generalization of Fisher's linear discriminant, a method used in statistics, pattern recognition and machine learning to find a linear combination of features that characterizes or separates two or more classes of objects or events.\n\nGeneralized discriminant analysis (GDA)\nGDA deals with nonlinear discriminant analysis using kernel function operator. The underlying theory is close to the support-vector machines (SVM) insofar as the GDA method provides a mapping of the input vectors into high-dimensional feature space. Similar to LDA, the objective of GDA is to find a projection for the features into a lower dimensional space by maximizing the ratio of between-class scatter to within-class scatter.\n\nAutoencoder\nAutoencoders can be used to learn nonlinear dimension reduction functions and codings together with an inverse function from the coding to the original representation.\n\nt-SNE\nT-distributed Stochastic Neighbor Embedding (t-SNE) is a nonlinear dimensionality reduction technique useful for visualization of high-dimensional datasets. It is not recommended for use in analysis such as clustering or outlier detection since it does not necessarily preserve densities or distances well.\n\nUMAP\nUniform manifold approximation and projection (UMAP) is a nonlinear dimensionality reduction technique. Visually, it is similar to t-SNE, but it assumes that the data is uniformly distributed on a locally connected Riemannian manifold and that the Riemannian metric is locally constant or approximately locally constant.\n\nDimension reduction\nFor high-dimensional datasets (i.e. with number of dimensions more than 10), dimension reduction is usually performed prior to applying a K-nearest neighbors algorithm (k-NN) in order to avoid the effects of the curse of dimensionality.Feature extraction and dimension reduction can be combined in one step using principal component analysis (PCA), linear discriminant analysis (LDA), canonical correlation analysis (CCA), or non-negative matrix factorization (NMF) techniques as a pre-processing step followed by clustering by K-NN on feature vectors in reduced-dimension space. In machine learning this process is also called low-dimensional embedding.For very-high-dimensional datasets (e.g. when performing similarity search on live video streams, DNA data or high-dimensional time series) running a fast approximate K-NN search using locality-sensitive hashing, random projection, \"sketches\", or other high-dimensional similarity search techniques from the VLDB conference toolbox might be the only feasible option.\n\nApplications\nA dimensionality reduction technique that is sometimes used in neuroscience is maximally informative dimensions, which finds a lower-dimensional representation of a dataset such that as much information as possible about the original data is preserved.\n\nSee also\nNotes\nReferences\nExternal links\nJMLR Special Issue on Variable and Feature Selection\nELastic MAPs\nLocally Linear Embedding\nVisual Comparison of various dimensionality reduction methods\nA Global Geometric Framework for Nonlinear Dimensionality Reduction",
    "Principal Component Analysis": "Principal component analysis (PCA) is a linear dimensionality reduction technique with applications in exploratory data analysis, visualization and data preprocessing.\nThe data is linearly transformed onto a new coordinate system such that the directions (principal components) capturing the largest variation in the data can be easily identified.\n\nThe principal components of a collection of points in a real coordinate space are a sequence of \n  \n    \n      \n        p\n      \n    \n    {\\displaystyle p}\n   unit vectors, where the \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  -th vector is the direction of a line that best fits the data while being orthogonal to the first \n  \n    \n      \n        i\n        −\n        1\n      \n    \n    {\\displaystyle i-1}\n   vectors. Here, a best-fitting line is defined as one that minimizes the average squared perpendicular distance from the points to the line. These directions (i.e., principal components) constitute an orthonormal basis in which different individual dimensions of the data are linearly uncorrelated. Many studies use the first two principal components in order to plot the data in two dimensions and to visually identify clusters of closely related data points.Principal component analysis has applications in many fields such as population genetics, microbiome studies, and atmospheric science.\n\nOverview\nWhen performing PCA, the first principal component of a set of  \n  \n    \n      \n        p\n      \n    \n    {\\displaystyle p}\n   variables, presumed to be jointly normally distributed, is the derived variable formed as a linear combination of the original variables that explains the most variance. The second principal component explains the most variance in what is left once the effect of the first component is removed, and we may proceed through  \n  \n    \n      \n        p\n      \n    \n    {\\displaystyle p}\n   iterations until all the variance is explained. PCA is most commonly used when many of the variables are highly correlated with each other and it is desirable to reduce their number to an independent set.\nThe first principal component can equivalently be defined as a direction that maximizes the variance of the projected data. The \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  -th principal component can be taken as a direction orthogonal to the first \n  \n    \n      \n        i\n        −\n        1\n      \n    \n    {\\displaystyle i-1}\n   principal components that maximizes the variance of the projected data.\nFor either objective, it can be shown that the principal components are eigenvectors of the data's covariance matrix. Thus, the principal components are often computed by eigendecomposition of the data covariance matrix or singular value decomposition of the data matrix. PCA is the simplest of the true eigenvector-based multivariate analyses and is closely related to factor analysis. Factor analysis typically incorporates more domain-specific assumptions about the underlying structure and solves eigenvectors of a slightly different matrix. PCA is also related to canonical correlation analysis (CCA). CCA defines coordinate systems that optimally describe the cross-covariance between two datasets while PCA defines a new orthogonal coordinate system that optimally describes variance in a single dataset. Robust and L1-norm-based variants of standard PCA have also been proposed.\n\nHistory\nPCA was invented in 1901 by Karl Pearson, as an analogue of the principal axis theorem in mechanics; it was later independently developed and named by Harold Hotelling in the 1930s. Depending on the field of application, it is also named the discrete Karhunen–Loève transform (KLT) in signal processing, the Hotelling transform in multivariate quality control, proper orthogonal decomposition (POD) in mechanical engineering, singular value decomposition (SVD) of X (invented in the last quarter of the 19th century), eigenvalue decomposition (EVD) of XTX in linear algebra, factor analysis (for a discussion of the differences between PCA and factor analysis see Ch. 7 of Jolliffe's Principal Component Analysis), Eckart–Young theorem (Harman, 1960), or empirical orthogonal functions (EOF) in meteorological science (Lorenz, 1956), empirical eigenfunction decomposition (Sirovich, 1987), quasiharmonic modes (Brooks et al., 1988), spectral decomposition in noise and vibration, and empirical modal analysis in structural dynamics.\n\nIntuition\nPCA can be thought of as fitting a p-dimensional ellipsoid to the data, where each axis of the ellipsoid represents a principal component. If some axis of the ellipsoid is small, then the variance along that axis is also small.\nTo find the axes of the ellipsoid, we must first center the values of each variable in the dataset on 0 by subtracting the mean of the variable's observed values from each of those values. These transformed values are used instead of the original observed values for each of the variables. Then, we compute the covariance matrix of the data and calculate the eigenvalues and corresponding eigenvectors of this covariance matrix. Then we must normalize each of the orthogonal eigenvectors to turn them into unit vectors. Once this is done, each of the mutually-orthogonal unit eigenvectors can be interpreted as an axis of the ellipsoid fitted to the data. This choice of basis will transform the covariance matrix into a diagonalized form, in which the diagonal elements represent the variance of each axis. The proportion of the variance that each eigenvector represents can be calculated by dividing the eigenvalue corresponding to that eigenvector by the sum of all eigenvalues.\nBiplots and scree plots (degree of explained variance) are used to interpret findings of the PCA.\n\nDetails\nPCA is defined as an orthogonal linear transformation on a real inner product space that transforms the data to a new coordinate system such that the greatest variance by some scalar projection of the data comes to lie on the first coordinate (called the first principal component), the second greatest variance on the second coordinate, and so on.Consider an \n  \n    \n      \n        n\n        ×\n        p\n      \n    \n    {\\displaystyle n\\times p}\n   data matrix, X, with column-wise zero empirical mean (the sample mean of each column has been shifted to zero), where each of the n rows represents a different repetition of the experiment, and each of the p columns gives a particular kind of feature (say, the results from a particular sensor).\nMathematically, the transformation is defined by a set of size \n  \n    \n      \n        l\n      \n    \n    {\\displaystyle l}\n   of p-dimensional vectors of weights or coefficients \n  \n    \n      \n        \n          \n            w\n          \n          \n            (\n            k\n            )\n          \n        \n        =\n        (\n        \n          w\n          \n            1\n          \n        \n        ,\n        …\n        ,\n        \n          w\n          \n            p\n          \n        \n        \n          )\n          \n            (\n            k\n            )\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {w} _{(k)}=(w_{1},\\dots ,w_{p})_{(k)}}\n   that map each row vector \n  \n    \n      \n        \n          \n            x\n          \n          \n            (\n            i\n            )\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{(i)}}\n   of X to a new vector of principal component scores \n  \n    \n      \n        \n          \n            t\n          \n          \n            (\n            i\n            )\n          \n        \n        =\n        (\n        \n          t\n          \n            1\n          \n        \n        ,\n        …\n        ,\n        \n          t\n          \n            l\n          \n        \n        \n          )\n          \n            (\n            i\n            )\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {t} _{(i)}=(t_{1},\\dots ,t_{l})_{(i)}}\n  , given by\n\n  \n    \n      \n        \n          \n            \n              t\n              \n                k\n              \n            \n          \n          \n            (\n            i\n            )\n          \n        \n        =\n        \n          \n            x\n          \n          \n            (\n            i\n            )\n          \n        \n        ⋅\n        \n          \n            w\n          \n          \n            (\n            k\n            )\n          \n        \n        \n        \n          f\n          o\n          r\n        \n        \n        i\n        =\n        1\n        ,\n        …\n        ,\n        n\n        \n        k\n        =\n        1\n        ,\n        …\n        ,\n        l\n      \n    \n    {\\displaystyle {t_{k}}_{(i)}=\\mathbf {x} _{(i)}\\cdot \\mathbf {w} _{(k)}\\qquad \\mathrm {for} \\qquad i=1,\\dots ,n\\qquad k=1,\\dots ,l}\n  in such a way that the individual variables \n  \n    \n      \n        \n          t\n          \n            1\n          \n        \n        ,\n        …\n        ,\n        \n          t\n          \n            l\n          \n        \n      \n    \n    {\\displaystyle t_{1},\\dots ,t_{l}}\n   of t considered over the data set successively inherit the maximum possible variance from X, with each coefficient vector w constrained to be a unit vector (where \n  \n    \n      \n        l\n      \n    \n    {\\displaystyle l}\n   is usually selected to be strictly less than \n  \n    \n      \n        p\n      \n    \n    {\\displaystyle p}\n   to reduce dimensionality).\n\nFirst component\nIn order to maximize variance, the first weight vector w(1) thus has to satisfy\n\n  \n    \n      \n        \n          \n            w\n          \n          \n            (\n            1\n            )\n          \n        \n        =\n        arg\n        ⁡\n        \n          max\n          \n            ‖\n            \n              w\n            \n            ‖\n            =\n            1\n          \n        \n        \n        \n          {\n          \n            \n              ∑\n              \n                i\n              \n            \n            (\n            \n              t\n              \n                1\n              \n            \n            \n              )\n              \n                (\n                i\n                )\n              \n              \n                2\n              \n            \n          \n          }\n        \n        =\n        arg\n        ⁡\n        \n          max\n          \n            ‖\n            \n              w\n            \n            ‖\n            =\n            1\n          \n        \n        \n        \n          {\n          \n            \n              ∑\n              \n                i\n              \n            \n            \n              \n                (\n                \n                  \n                    \n                      x\n                    \n                    \n                      (\n                      i\n                      )\n                    \n                  \n                  ⋅\n                  \n                    w\n                  \n                \n                )\n              \n              \n                2\n              \n            \n          \n          }\n        \n      \n    \n    {\\displaystyle \\mathbf {w} _{(1)}=\\arg \\max _{\\Vert \\mathbf {w} \\Vert =1}\\,\\left\\{\\sum _{i}(t_{1})_{(i)}^{2}\\right\\}=\\arg \\max _{\\Vert \\mathbf {w} \\Vert =1}\\,\\left\\{\\sum _{i}\\left(\\mathbf {x} _{(i)}\\cdot \\mathbf {w} \\right)^{2}\\right\\}}\n  Equivalently, writing this in matrix form gives\n\n  \n    \n      \n        \n          \n            w\n          \n          \n            (\n            1\n            )\n          \n        \n        =\n        arg\n        ⁡\n        \n          max\n          \n            \n              ‖\n              \n                w\n              \n              ‖\n            \n            =\n            1\n          \n        \n        \n          {\n          \n            \n              ‖\n              \n                X\n                w\n              \n              ‖\n            \n            \n              2\n            \n          \n          }\n        \n        =\n        arg\n        ⁡\n        \n          max\n          \n            \n              ‖\n              \n                w\n              \n              ‖\n            \n            =\n            1\n          \n        \n        \n          {\n          \n            \n              \n                w\n              \n              \n                \n                  T\n                \n              \n            \n            \n              \n                X\n              \n              \n                \n                  T\n                \n              \n            \n            \n              X\n              w\n            \n          \n          }\n        \n      \n    \n    {\\displaystyle \\mathbf {w} _{(1)}=\\arg \\max _{\\left\\|\\mathbf {w} \\right\\|=1}\\left\\{\\left\\|\\mathbf {Xw} \\right\\|^{2}\\right\\}=\\arg \\max _{\\left\\|\\mathbf {w} \\right\\|=1}\\left\\{\\mathbf {w} ^{\\mathsf {T}}\\mathbf {X} ^{\\mathsf {T}}\\mathbf {Xw} \\right\\}}\n  Since w(1) has been defined to be a unit vector, it equivalently also satisfies\n\n  \n    \n      \n        \n          \n            w\n          \n          \n            (\n            1\n            )\n          \n        \n        =\n        arg\n        ⁡\n        max\n        \n          {\n          \n            \n              \n                \n                  \n                    w\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n                \n                  \n                    X\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n                \n                  X\n                  w\n                \n              \n              \n                \n                  \n                    w\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n                \n                  w\n                \n              \n            \n          \n          }\n        \n      \n    \n    {\\displaystyle \\mathbf {w} _{(1)}=\\arg \\max \\left\\{{\\frac {\\mathbf {w} ^{\\mathsf {T}}\\mathbf {X} ^{\\mathsf {T}}\\mathbf {Xw} }{\\mathbf {w} ^{\\mathsf {T}}\\mathbf {w} }}\\right\\}}\n  The quantity to be maximised can be recognised as a Rayleigh quotient. A standard result for a positive semidefinite matrix such as XTX is that the quotient's maximum possible value is the largest eigenvalue of the matrix, which occurs when w is the corresponding eigenvector.\nWith w(1) found, the first principal component of a data vector x(i) can then be given as a score t1(i) = x(i) ⋅ w(1) in the transformed co-ordinates, or as the corresponding vector in the original variables, {x(i) ⋅ w(1)} w(1).\n\nFurther components\nThe k-th component can be found by subtracting the first k − 1 principal components from X:\n\n  \n    \n      \n        \n          \n            \n              \n                X\n                ^\n              \n            \n          \n          \n            k\n          \n        \n        =\n        \n          X\n        \n        −\n        \n          ∑\n          \n            s\n            =\n            1\n          \n          \n            k\n            −\n            1\n          \n        \n        \n          X\n        \n        \n          \n            w\n          \n          \n            (\n            s\n            )\n          \n        \n        \n          \n            w\n          \n          \n            (\n            s\n            )\n          \n          \n            \n              T\n            \n          \n        \n      \n    \n    {\\displaystyle \\mathbf {\\hat {X}} _{k}=\\mathbf {X} -\\sum _{s=1}^{k-1}\\mathbf {X} \\mathbf {w} _{(s)}\\mathbf {w} _{(s)}^{\\mathsf {T}}}\n  and then finding the weight vector which extracts the maximum variance from this new data matrix\n\n  \n    \n      \n        \n          \n            w\n          \n          \n            (\n            k\n            )\n          \n        \n        =\n        \n          \n            \n              a\n              r\n              g\n              \n              m\n              a\n              x\n            \n          \n          \n            \n              ‖\n              \n                w\n              \n              ‖\n            \n            =\n            1\n          \n        \n        ⁡\n        \n          {\n          \n            \n              ‖\n              \n                \n                  \n                    \n                      \n                        X\n                        ^\n                      \n                    \n                  \n                  \n                    k\n                  \n                \n                \n                  w\n                \n              \n              ‖\n            \n            \n              2\n            \n          \n          }\n        \n        =\n        arg\n        ⁡\n        max\n        \n          {\n          \n            \n              \n                \n                  \n                    \n                      w\n                    \n                    \n                      \n                        T\n                      \n                    \n                  \n                  \n                    \n                      \n                        \n                          X\n                          ^\n                        \n                      \n                    \n                    \n                      k\n                    \n                    \n                      \n                        T\n                      \n                    \n                  \n                  \n                    \n                      \n                        \n                          X\n                          ^\n                        \n                      \n                    \n                    \n                      k\n                    \n                  \n                  \n                    w\n                  \n                \n                \n                  \n                    \n                      w\n                    \n                    \n                      T\n                    \n                  \n                  \n                    w\n                  \n                \n              \n            \n          \n          }\n        \n      \n    \n    {\\displaystyle \\mathbf {w} _{(k)}=\\mathop {\\operatorname {arg\\,max} } _{\\left\\|\\mathbf {w} \\right\\|=1}\\left\\{\\left\\|\\mathbf {\\hat {X}} _{k}\\mathbf {w} \\right\\|^{2}\\right\\}=\\arg \\max \\left\\{{\\tfrac {\\mathbf {w} ^{\\mathsf {T}}\\mathbf {\\hat {X}} _{k}^{\\mathsf {T}}\\mathbf {\\hat {X}} _{k}\\mathbf {w} }{\\mathbf {w} ^{T}\\mathbf {w} }}\\right\\}}\n  It turns out that this gives the remaining eigenvectors of XTX, with the maximum values for the quantity in brackets given by their corresponding eigenvalues. Thus the weight vectors are eigenvectors of XTX.\nThe k-th principal component of a data vector x(i) can therefore be given as a score tk(i) = x(i) ⋅ w(k) in the transformed coordinates, or as the corresponding vector in the space of the original variables, {x(i) ⋅ w(k)} w(k), where w(k) is the kth eigenvector of XTX.\nThe full principal components decomposition of X can therefore be given as\n\n  \n    \n      \n        \n          T\n        \n        =\n        \n          X\n        \n        \n          W\n        \n      \n    \n    {\\displaystyle \\mathbf {T} =\\mathbf {X} \\mathbf {W} }\n  where W is a p-by-p matrix of weights whose columns are the eigenvectors of XTX. The transpose of W is sometimes called the whitening or sphering transformation. Columns of W multiplied by the square root of corresponding eigenvalues, that is, eigenvectors scaled up by the variances, are called loadings in PCA or in Factor analysis.\n\nCovariances\nXTX itself can be recognized as proportional to the empirical sample covariance matrix of the dataset XT.: 30–31 The sample covariance Q between two of the different principal components over the dataset is given by:\n\n  \n    \n      \n        \n          \n            \n              \n                Q\n                (\n                \n                  \n                    P\n                    C\n                  \n                  \n                    (\n                    j\n                    )\n                  \n                \n                ,\n                \n                  \n                    P\n                    C\n                  \n                  \n                    (\n                    k\n                    )\n                  \n                \n                )\n              \n              \n                \n                ∝\n                (\n                \n                  X\n                \n                \n                  \n                    w\n                  \n                  \n                    (\n                    j\n                    )\n                  \n                \n                \n                  )\n                  \n                    \n                      T\n                    \n                  \n                \n                (\n                \n                  X\n                \n                \n                  \n                    w\n                  \n                  \n                    (\n                    k\n                    )\n                  \n                \n                )\n              \n            \n            \n              \n              \n                \n                =\n                \n                  \n                    w\n                  \n                  \n                    (\n                    j\n                    )\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n                \n                  \n                    X\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n                \n                  X\n                \n                \n                  \n                    w\n                  \n                  \n                    (\n                    k\n                    )\n                  \n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  \n                    w\n                  \n                  \n                    (\n                    j\n                    )\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n                \n                  λ\n                  \n                    (\n                    k\n                    )\n                  \n                \n                \n                  \n                    w\n                  \n                  \n                    (\n                    k\n                    )\n                  \n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  λ\n                  \n                    (\n                    k\n                    )\n                  \n                \n                \n                  \n                    w\n                  \n                  \n                    (\n                    j\n                    )\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n                \n                  \n                    w\n                  \n                  \n                    (\n                    k\n                    )\n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}Q(\\mathrm {PC} _{(j)},\\mathrm {PC} _{(k)})&\\propto (\\mathbf {X} \\mathbf {w} _{(j)})^{\\mathsf {T}}(\\mathbf {X} \\mathbf {w} _{(k)})\\\\&=\\mathbf {w} _{(j)}^{\\mathsf {T}}\\mathbf {X} ^{\\mathsf {T}}\\mathbf {X} \\mathbf {w} _{(k)}\\\\&=\\mathbf {w} _{(j)}^{\\mathsf {T}}\\lambda _{(k)}\\mathbf {w} _{(k)}\\\\&=\\lambda _{(k)}\\mathbf {w} _{(j)}^{\\mathsf {T}}\\mathbf {w} _{(k)}\\end{aligned}}}\n  where the eigenvalue property of w(k) has been used to move from line 2 to line 3. However eigenvectors w(j) and w(k) corresponding to eigenvalues of a symmetric matrix are orthogonal (if the eigenvalues are different), or can be orthogonalised (if the vectors happen to share an equal repeated value). The product in the final line is therefore zero; there is no sample covariance between different principal components over the dataset.\nAnother way to characterise the principal components transformation is therefore as the transformation to coordinates which diagonalise the empirical sample covariance matrix.\nIn matrix form, the empirical covariance matrix for the original variables can be written\n\n  \n    \n      \n        \n          Q\n        \n        ∝\n        \n          \n            X\n          \n          \n            \n              T\n            \n          \n        \n        \n          X\n        \n        =\n        \n          W\n        \n        \n          Λ\n        \n        \n          \n            W\n          \n          \n            \n              T\n            \n          \n        \n      \n    \n    {\\displaystyle \\mathbf {Q} \\propto \\mathbf {X} ^{\\mathsf {T}}\\mathbf {X} =\\mathbf {W} \\mathbf {\\Lambda } \\mathbf {W} ^{\\mathsf {T}}}\n  The empirical covariance matrix between the principal components becomes\n\n  \n    \n      \n        \n          \n            W\n          \n          \n            \n              T\n            \n          \n        \n        \n          Q\n        \n        \n          W\n        \n        ∝\n        \n          \n            W\n          \n          \n            \n              T\n            \n          \n        \n        \n          W\n        \n        \n        \n          Λ\n        \n        \n        \n          \n            W\n          \n          \n            \n              T\n            \n          \n        \n        \n          W\n        \n        =\n        \n          Λ\n        \n      \n    \n    {\\displaystyle \\mathbf {W} ^{\\mathsf {T}}\\mathbf {Q} \\mathbf {W} \\propto \\mathbf {W} ^{\\mathsf {T}}\\mathbf {W} \\,\\mathbf {\\Lambda } \\,\\mathbf {W} ^{\\mathsf {T}}\\mathbf {W} =\\mathbf {\\Lambda } }\n  where Λ is the diagonal matrix of eigenvalues λ(k) of XTX. λ(k) is equal to the sum of the squares over the dataset associated with each component k, that is, λ(k) = Σi tk2(i) = Σi (x(i) ⋅ w(k))2.\n\nDimensionality reduction\nThe transformation T = X W maps a data vector x(i) from an original space of p variables to a new space of p variables which are uncorrelated over the dataset. However, not all the principal components need to be kept. Keeping only the first L principal components, produced by using only the first L eigenvectors, gives the truncated transformation\n\n  \n    \n      \n        \n          \n            T\n          \n          \n            L\n          \n        \n        =\n        \n          X\n        \n        \n          \n            W\n          \n          \n            L\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {T} _{L}=\\mathbf {X} \\mathbf {W} _{L}}\n  where the matrix TL now has n rows but only L columns. In other words, PCA learns a linear transformation \n  \n    \n      \n        t\n        =\n        \n          W\n          \n            L\n          \n          \n            \n              T\n            \n          \n        \n        x\n        ,\n        x\n        ∈\n        \n          \n            R\n          \n          \n            p\n          \n        \n        ,\n        t\n        ∈\n        \n          \n            R\n          \n          \n            L\n          \n        \n        ,\n      \n    \n    {\\displaystyle t=W_{L}^{\\mathsf {T}}x,x\\in \\mathbb {R} ^{p},t\\in \\mathbb {R} ^{L},}\n   where the columns of p × L matrix \n  \n    \n      \n        \n          W\n          \n            L\n          \n        \n      \n    \n    {\\displaystyle W_{L}}\n   form an orthogonal basis for the L features (the components of representation t) that are decorrelated. By construction, of all the transformed data matrices with only L columns, this score matrix maximises the variance in the original data that has been preserved, while minimising the total squared reconstruction error \n  \n    \n      \n        ‖\n        \n          T\n        \n        \n          \n            W\n          \n          \n            T\n          \n        \n        −\n        \n          \n            T\n          \n          \n            L\n          \n        \n        \n          \n            W\n          \n          \n            L\n          \n          \n            T\n          \n        \n        \n          ‖\n          \n            2\n          \n          \n            2\n          \n        \n      \n    \n    {\\displaystyle \\|\\mathbf {T} \\mathbf {W} ^{T}-\\mathbf {T} _{L}\\mathbf {W} _{L}^{T}\\|_{2}^{2}}\n   or \n  \n    \n      \n        ‖\n        \n          X\n        \n        −\n        \n          \n            X\n          \n          \n            L\n          \n        \n        \n          ‖\n          \n            2\n          \n          \n            2\n          \n        \n      \n    \n    {\\displaystyle \\|\\mathbf {X} -\\mathbf {X} _{L}\\|_{2}^{2}}\n  .\n\nSuch dimensionality reduction can be a very useful step for visualising and processing high-dimensional datasets, while still retaining as much of the variance in the dataset as possible. For example, selecting L = 2 and keeping only the first two principal components finds the two-dimensional plane through the high-dimensional dataset in which the data is most spread out, so if the data contains clusters these too may be most spread out, and therefore most visible to be plotted out in a two-dimensional diagram; whereas if two directions through the data (or two of the original variables) are chosen at random, the clusters may be much less spread apart from each other, and may in fact be much more likely to substantially overlay each other, making them indistinguishable.\nSimilarly, in regression analysis, the larger the number of explanatory variables allowed, the greater is the chance of overfitting the model, producing conclusions that fail to generalise to other datasets. One approach, especially when there are strong correlations between different possible explanatory variables, is to reduce them to a few principal components and then run the regression against them, a method called principal component regression.\nDimensionality reduction may also be appropriate when the variables in a dataset are noisy. If each column of the dataset contains independent identically distributed Gaussian noise, then the columns of T will also contain similarly identically distributed Gaussian noise (such a distribution is invariant under the effects of the matrix W, which can be thought of as a high-dimensional rotation of the co-ordinate axes). However, with more of the total variance concentrated in the first few principal components compared to the same noise variance, the proportionate effect of the noise is less—the first few components achieve a higher signal-to-noise ratio. PCA thus can have the effect of concentrating much of the signal into the first few principal components, which can usefully be captured by dimensionality reduction; while the later principal components may be dominated by noise, and so disposed of without great loss. If the dataset is not too large, the significance of the principal components can be tested using parametric bootstrap, as an aid in determining how many principal components to retain.\n\nSingular value decomposition\nThe principal components transformation can also be associated with another matrix factorization, the singular value decomposition (SVD) of X,\n\n  \n    \n      \n        \n          X\n        \n        =\n        \n          U\n        \n        \n          Σ\n        \n        \n          \n            W\n          \n          \n            T\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {X} =\\mathbf {U} \\mathbf {\\Sigma } \\mathbf {W} ^{T}}\n  Here Σ is an n-by-p rectangular diagonal matrix of positive numbers σ(k), called the singular values of X; U is an n-by-n matrix, the columns of which are orthogonal unit vectors of length n called the left singular vectors of X; and W is a p-by-p matrix whose columns are orthogonal unit vectors of length p and called the right singular vectors of X.\nIn terms of this factorization, the matrix XTX can be written\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  \n                    X\n                  \n                  \n                    T\n                  \n                \n                \n                  X\n                \n              \n              \n                \n                =\n                \n                  W\n                \n                \n                  \n                    Σ\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n                \n                  \n                    U\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n                \n                  U\n                \n                \n                  Σ\n                \n                \n                  \n                    W\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  W\n                \n                \n                  \n                    Σ\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n                \n                  Σ\n                \n                \n                  \n                    W\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  W\n                \n                \n                  \n                    \n                      \n                        Σ\n                        ^\n                      \n                    \n                  \n                  \n                    2\n                  \n                \n                \n                  \n                    W\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}\\mathbf {X} ^{T}\\mathbf {X} &=\\mathbf {W} \\mathbf {\\Sigma } ^{\\mathsf {T}}\\mathbf {U} ^{\\mathsf {T}}\\mathbf {U} \\mathbf {\\Sigma } \\mathbf {W} ^{\\mathsf {T}}\\\\&=\\mathbf {W} \\mathbf {\\Sigma } ^{\\mathsf {T}}\\mathbf {\\Sigma } \\mathbf {W} ^{\\mathsf {T}}\\\\&=\\mathbf {W} \\mathbf {\\hat {\\Sigma }} ^{2}\\mathbf {W} ^{\\mathsf {T}}\\end{aligned}}}\n  where  \n  \n    \n      \n        \n          \n            \n              Σ\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle \\mathbf {\\hat {\\Sigma }} }\n   is the square diagonal matrix with the singular values of X and the excess zeros chopped off that satisfies \n  \n    \n      \n        \n          \n            \n              \n                \n                  Σ\n                  ^\n                \n              \n            \n            \n              2\n            \n          \n        \n        =\n        \n          \n            Σ\n          \n          \n            \n              T\n            \n          \n        \n        \n          Σ\n        \n      \n    \n    {\\displaystyle \\mathbf {{\\hat {\\Sigma }}^{2}} =\\mathbf {\\Sigma } ^{\\mathsf {T}}\\mathbf {\\Sigma } }\n  . Comparison with the eigenvector factorization of XTX establishes that the right singular vectors W of X are equivalent to the eigenvectors of XTX, while the singular values σ(k) of  \n  \n    \n      \n        \n          X\n        \n      \n    \n    {\\displaystyle \\mathbf {X} }\n   are equal to the square-root of the eigenvalues λ(k) of XTX.\nUsing the singular value decomposition the score matrix T can be written\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  T\n                \n              \n              \n                \n                =\n                \n                  X\n                \n                \n                  W\n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  U\n                \n                \n                  Σ\n                \n                \n                  \n                    W\n                  \n                  \n                    \n                      T\n                    \n                  \n                \n                \n                  W\n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  U\n                \n                \n                  Σ\n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}\\mathbf {T} &=\\mathbf {X} \\mathbf {W} \\\\&=\\mathbf {U} \\mathbf {\\Sigma } \\mathbf {W} ^{\\mathsf {T}}\\mathbf {W} \\\\&=\\mathbf {U} \\mathbf {\\Sigma } \\end{aligned}}}\n  so each column of T is given by one of the left singular vectors of X multiplied by the corresponding singular value. This form is also the polar decomposition of T.\nEfficient algorithms exist to calculate the SVD of X without having to form the matrix XTX, so computing the SVD is now the standard way to calculate a principal components analysis from a data matrix, unless only a handful of components are required.\nAs with the eigen-decomposition, a truncated n × L score matrix TL can be obtained by considering only the first L largest singular values and their singular vectors:\n\n  \n    \n      \n        \n          \n            T\n          \n          \n            L\n          \n        \n        =\n        \n          \n            U\n          \n          \n            L\n          \n        \n        \n          \n            Σ\n          \n          \n            L\n          \n        \n        =\n        \n          X\n        \n        \n          \n            W\n          \n          \n            L\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {T} _{L}=\\mathbf {U} _{L}\\mathbf {\\Sigma } _{L}=\\mathbf {X} \\mathbf {W} _{L}}\n  The truncation of a matrix M or T using a truncated singular value decomposition in this way produces a truncated matrix that is the nearest possible matrix of rank L to the original matrix, in the sense of the difference between the two having the smallest possible Frobenius norm, a result known as the Eckart–Young theorem [1936].\n\nFurther considerations\nThe singular values (in Σ) are the square roots of the eigenvalues of the matrix XTX. Each eigenvalue is proportional to the portion of the \"variance\" (more correctly of the sum of the squared distances of the points from their multidimensional mean) that is associated with each eigenvector. The sum of all the eigenvalues is equal to the sum of the squared distances of the points from their multidimensional mean. PCA essentially rotates the set of points around their mean in order to align with the principal components. This moves as much of the variance as possible (using an orthogonal transformation) into the first few dimensions. The values in the remaining dimensions, therefore, tend to be small and may be dropped with minimal loss of information (see below). PCA is often used in this manner for dimensionality reduction. PCA has the distinction of being the optimal orthogonal transformation for keeping the subspace that has largest \"variance\" (as defined above). This advantage, however, comes at the price of greater computational requirements if compared, for example, and when applicable, to the discrete cosine transform, and in particular to the DCT-II which is simply known as the \"DCT\". Nonlinear dimensionality reduction techniques tend to be more computationally demanding than PCA.\nPCA is sensitive to the scaling of the variables. If we have just two variables and they have the same sample variance and are completely correlated, then the PCA will entail a rotation by 45° and the \"weights\" (they are the cosines of rotation) for the two variables with respect to the principal component will be equal. But if we multiply all values of the first variable by 100, then the first principal component will be almost the same as that variable, with a small contribution from the other variable, whereas the second component will be almost aligned with the second original variable. This means that whenever the different variables have different units (like temperature and mass), PCA is a somewhat arbitrary method of analysis. (Different results would be obtained if one used Fahrenheit rather than Celsius for example.) Pearson's original paper was entitled \"On Lines and Planes of Closest Fit to Systems of Points in Space\" – \"in space\" implies physical Euclidean space where such concerns do not arise. One way of making the PCA less arbitrary is to use variables scaled so as to have unit variance, by standardizing the data and hence use the autocorrelation matrix instead of the autocovariance matrix as a basis for PCA. However, this compresses (or expands) the fluctuations in all dimensions of the signal space to unit variance.\nMean subtraction (a.k.a. \"mean centering\") is necessary for performing classical PCA to ensure that the first principal component describes the direction of maximum variance. If mean subtraction is not performed, the first principal component might instead correspond more or less to the mean of the data. A mean of zero is needed for finding a basis that minimizes the mean square error of the approximation of the data.Mean-centering is unnecessary if performing a principal components analysis on a correlation matrix, as the data are already centered after calculating correlations. Correlations are derived from the cross-product of two standard scores (Z-scores) or statistical moments (hence the name: Pearson Product-Moment Correlation). Also see the article by Kromrey & Foster-Johnson (1998) on \"Mean-centering in Moderated Regression: Much Ado About Nothing\". Since covariances are correlations of normalized variables (Z- or standard-scores) a PCA based on the correlation matrix of  X is equal to a PCA based on the covariance matrix of  Z, the standardized version of  X.\nPCA is a popular primary technique in pattern recognition. It is not, however, optimized for class separability. However, it has been used to quantify the distance between two or more classes by calculating center of mass for each class in principal component space and reporting Euclidean distance between center of mass of two or more classes. The linear discriminant analysis is an alternative which is optimized for class separability.\n\nTable of symbols and abbreviations\nProperties and limitations of PCA\nProperties\nSome properties of PCA include:\nProperty 1: For any integer q, 1 ≤ q ≤ p, consider the orthogonal linear transformation\n\n  \n    \n      \n        y\n        =\n        \n          \n            B\n            ′\n          \n        \n        x\n      \n    \n    {\\displaystyle y=\\mathbf {B'} x}\n  \nwhere \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n   is a q-element vector and \n  \n    \n      \n        \n          \n            B\n            ′\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {B'} }\n   is a (q × p) matrix, and let \n  \n    \n      \n        \n          \n            Σ\n          \n          \n            y\n          \n        \n        =\n        \n          \n            B\n            ′\n          \n        \n        \n          Σ\n        \n        \n          B\n        \n      \n    \n    {\\displaystyle \\mathbf {\\Sigma } _{y}=\\mathbf {B'} \\mathbf {\\Sigma } \\mathbf {B} }\n   be the variance-covariance matrix for \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n  . Then the trace of \n  \n    \n      \n        \n          \n            Σ\n          \n          \n            y\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {\\Sigma } _{y}}\n  , denoted \n  \n    \n      \n        tr\n        ⁡\n        (\n        \n          \n            Σ\n          \n          \n            y\n          \n        \n        )\n      \n    \n    {\\displaystyle \\operatorname {tr} (\\mathbf {\\Sigma } _{y})}\n  , is maximized by taking \n  \n    \n      \n        \n          B\n        \n        =\n        \n          \n            A\n          \n          \n            q\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {B} =\\mathbf {A} _{q}}\n  , where \n  \n    \n      \n        \n          \n            A\n          \n          \n            q\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {A} _{q}}\n   consists of the first q columns of \n  \n    \n      \n        \n          A\n        \n      \n    \n    {\\displaystyle \\mathbf {A} }\n   \n  \n    \n      \n        (\n        \n          \n            B\n            ′\n          \n        \n      \n    \n    {\\displaystyle (\\mathbf {B'} }\n   is the transpose of \n  \n    \n      \n        \n          B\n        \n        )\n      \n    \n    {\\displaystyle \\mathbf {B} )}\n  . (\n  \n    \n      \n        \n          A\n        \n      \n    \n    {\\displaystyle \\mathbf {A} }\n   is not defined here)Property 2: Consider again the orthonormal transformation\n\n  \n    \n      \n        y\n        =\n        \n          \n            B\n            ′\n          \n        \n        x\n      \n    \n    {\\displaystyle y=\\mathbf {B'} x}\n  \nwith \n  \n    \n      \n        x\n        ,\n        \n          B\n        \n        ,\n        \n          A\n        \n      \n    \n    {\\displaystyle x,\\mathbf {B} ,\\mathbf {A} }\n   and \n  \n    \n      \n        \n          \n            Σ\n          \n          \n            y\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {\\Sigma } _{y}}\n   defined as before. Then \n  \n    \n      \n        tr\n        ⁡\n        (\n        \n          \n            Σ\n          \n          \n            y\n          \n        \n        )\n      \n    \n    {\\displaystyle \\operatorname {tr} (\\mathbf {\\Sigma } _{y})}\n   is minimized by taking \n  \n    \n      \n        \n          B\n        \n        =\n        \n          \n            A\n          \n          \n            q\n          \n          \n            ∗\n          \n        \n        ,\n      \n    \n    {\\displaystyle \\mathbf {B} =\\mathbf {A} _{q}^{*},}\n   where \n  \n    \n      \n        \n          \n            A\n          \n          \n            q\n          \n          \n            ∗\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {A} _{q}^{*}}\n   consists of the last q columns of \n  \n    \n      \n        \n          A\n        \n      \n    \n    {\\displaystyle \\mathbf {A} }\n  .The statistical implication of this property is that the last few PCs are not simply unstructured left-overs after removing the important PCs. Because these last PCs have variances as small as possible they are useful in their own right. They can help to detect unsuspected near-constant linear relationships between the elements of x, and they may also be useful in regression, in selecting a subset of variables from x, and in outlier detection.\n\nProperty 3: (Spectral decomposition of Σ)\n\n  \n    \n      \n        \n          Σ\n        \n        =\n        \n          λ\n          \n            1\n          \n        \n        \n          α\n          \n            1\n          \n        \n        \n          α\n          \n            1\n          \n          ′\n        \n        +\n        ⋯\n        +\n        \n          λ\n          \n            p\n          \n        \n        \n          α\n          \n            p\n          \n        \n        \n          α\n          \n            p\n          \n          ′\n        \n      \n    \n    {\\displaystyle \\mathbf {\\Sigma } =\\lambda _{1}\\alpha _{1}\\alpha _{1}'+\\cdots +\\lambda _{p}\\alpha _{p}\\alpha _{p}'}\n  Before we look at its usage, we first look at diagonal elements,\n\n  \n    \n      \n        Var\n        ⁡\n        (\n        \n          x\n          \n            j\n          \n        \n        )\n        =\n        \n          ∑\n          \n            k\n            =\n            1\n          \n          \n            P\n          \n        \n        \n          λ\n          \n            k\n          \n        \n        \n          α\n          \n            k\n            j\n          \n          \n            2\n          \n        \n      \n    \n    {\\displaystyle \\operatorname {Var} (x_{j})=\\sum _{k=1}^{P}\\lambda _{k}\\alpha _{kj}^{2}}\n  Then, perhaps the main statistical implication of the result is that not only can we decompose the combined variances of all the elements of x into decreasing contributions due to each PC, but we can also decompose the whole covariance matrix into contributions \n  \n    \n      \n        \n          λ\n          \n            k\n          \n        \n        \n          α\n          \n            k\n          \n        \n        \n          α\n          \n            k\n          \n          ′\n        \n      \n    \n    {\\displaystyle \\lambda _{k}\\alpha _{k}\\alpha _{k}'}\n   from each PC. Although not strictly decreasing, the elements of \n  \n    \n      \n        \n          λ\n          \n            k\n          \n        \n        \n          α\n          \n            k\n          \n        \n        \n          α\n          \n            k\n          \n          ′\n        \n      \n    \n    {\\displaystyle \\lambda _{k}\\alpha _{k}\\alpha _{k}'}\n   will tend to become smaller as \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n   increases, as \n  \n    \n      \n        \n          λ\n          \n            k\n          \n        \n        \n          α\n          \n            k\n          \n        \n        \n          α\n          \n            k\n          \n          ′\n        \n      \n    \n    {\\displaystyle \\lambda _{k}\\alpha _{k}\\alpha _{k}'}\n   is nonincreasing for increasing \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n  , whereas the elements of \n  \n    \n      \n        \n          α\n          \n            k\n          \n        \n      \n    \n    {\\displaystyle \\alpha _{k}}\n   tend to stay about the same size because of the normalization constraints: \n  \n    \n      \n        \n          α\n          \n            k\n          \n          ′\n        \n        \n          α\n          \n            k\n          \n        \n        =\n        1\n        ,\n        k\n        =\n        1\n        ,\n        …\n        ,\n        p\n      \n    \n    {\\displaystyle \\alpha _{k}'\\alpha _{k}=1,k=1,\\dots ,p}\n  .\n\nLimitations\nAs noted above, the results of PCA depend on the scaling of the variables. This can be cured by scaling each feature by its standard deviation, so that one ends up with dimensionless features with unital variance.The applicability of PCA as described above is limited by certain (tacit) assumptions made in its derivation. In particular, PCA can capture linear correlations between the features but fails when this assumption is violated (see Figure 6a in the reference). In some cases, coordinate transformations can restore the linearity assumption and PCA can then be applied (see kernel PCA).\nAnother limitation is the mean-removal process before constructing the covariance matrix for PCA. In fields such as astronomy, all the signals are non-negative, and the mean-removal process will force the mean of some astrophysical exposures to be zero, which consequently creates unphysical negative fluxes, and forward modeling has to be performed to recover the true magnitude of the signals. As an alternative method, non-negative matrix factorization focusing only on the non-negative elements in the matrices, which is well-suited for astrophysical observations. See more at Relation between PCA and Non-negative Matrix Factorization.\nPCA is at a disadvantage if the data has not been standardized before applying the algorithm to it. PCA transforms original data into data that is relevant to the principal components of that data, which means that the new data variables cannot be interpreted in the same ways that the originals were. They are linear interpretations of the original variables. Also, if PCA is not performed properly, there is a high likelihood of information loss.PCA relies on a linear model. If a dataset has a pattern hidden inside it that is nonlinear, then PCA can actually steer the analysis in the complete opposite direction of progress. Researchers at Kansas State University discovered that the sampling error in their experiments impacted the bias of PCA results. \"If the number of subjects or blocks is smaller than 30, and/or the researcher is interested in PC's beyond the first, it may be better to first correct for the serial correlation, before PCA is conducted\". The researchers at Kansas State also found that PCA could be \"seriously biased if the autocorrelation structure of the data is not correctly handled\".\n\nPCA and information theory\nDimensionality reduction results in a loss of information, in general. PCA-based dimensionality reduction tends to minimize that information loss, under certain signal and noise models.\nUnder the assumption that\n\n  \n    \n      \n        \n          x\n        \n        =\n        \n          s\n        \n        +\n        \n          n\n        \n        ,\n      \n    \n    {\\displaystyle \\mathbf {x} =\\mathbf {s} +\\mathbf {n} ,}\n  that is, that the data vector \n  \n    \n      \n        \n          x\n        \n      \n    \n    {\\displaystyle \\mathbf {x} }\n   is the sum of the desired information-bearing signal \n  \n    \n      \n        \n          s\n        \n      \n    \n    {\\displaystyle \\mathbf {s} }\n   and a noise signal \n  \n    \n      \n        \n          n\n        \n      \n    \n    {\\displaystyle \\mathbf {n} }\n   one can show that PCA can be optimal for dimensionality reduction, from an information-theoretic point-of-view.\nIn particular, Linsker showed that if \n  \n    \n      \n        \n          s\n        \n      \n    \n    {\\displaystyle \\mathbf {s} }\n   is Gaussian and \n  \n    \n      \n        \n          n\n        \n      \n    \n    {\\displaystyle \\mathbf {n} }\n   is Gaussian noise with a covariance matrix proportional to the identity matrix, the PCA maximizes the mutual information \n  \n    \n      \n        I\n        (\n        \n          y\n        \n        ;\n        \n          s\n        \n        )\n      \n    \n    {\\displaystyle I(\\mathbf {y} ;\\mathbf {s} )}\n   between the desired information \n  \n    \n      \n        \n          s\n        \n      \n    \n    {\\displaystyle \\mathbf {s} }\n   and the dimensionality-reduced output \n  \n    \n      \n        \n          y\n        \n        =\n        \n          \n            W\n          \n          \n            L\n          \n          \n            T\n          \n        \n        \n          x\n        \n      \n    \n    {\\displaystyle \\mathbf {y} =\\mathbf {W} _{L}^{T}\\mathbf {x} }\n  .If the noise is still Gaussian and has a covariance matrix proportional to the identity matrix (that is, the components of the vector \n  \n    \n      \n        \n          n\n        \n      \n    \n    {\\displaystyle \\mathbf {n} }\n   are iid), but the information-bearing signal \n  \n    \n      \n        \n          s\n        \n      \n    \n    {\\displaystyle \\mathbf {s} }\n   is non-Gaussian (which is a common scenario), PCA at least minimizes an upper bound on the information loss, which is defined as\n\n  \n    \n      \n        I\n        (\n        \n          x\n        \n        ;\n        \n          s\n        \n        )\n        −\n        I\n        (\n        \n          y\n        \n        ;\n        \n          s\n        \n        )\n        .\n      \n    \n    {\\displaystyle I(\\mathbf {x} ;\\mathbf {s} )-I(\\mathbf {y} ;\\mathbf {s} ).}\n  The optimality of PCA is also preserved if the noise \n  \n    \n      \n        \n          n\n        \n      \n    \n    {\\displaystyle \\mathbf {n} }\n   is iid and at least more Gaussian (in terms of the Kullback–Leibler divergence) than the information-bearing signal \n  \n    \n      \n        \n          s\n        \n      \n    \n    {\\displaystyle \\mathbf {s} }\n  . In general, even if the above signal model holds, PCA loses its information-theoretic optimality as soon as the noise \n  \n    \n      \n        \n          n\n        \n      \n    \n    {\\displaystyle \\mathbf {n} }\n   becomes dependent.\n\nComputing PCA using the covariance method\nThe following is a detailed description of PCA using the covariance method (see also here) as opposed to the correlation method.The goal is to transform a given data set X of dimension p to an alternative data set Y of smaller dimension L. Equivalently, we are seeking to find the matrix Y, where Y is the Karhunen–Loève transform (KLT) of matrix X:\n\n  \n    \n      \n        \n          Y\n        \n        =\n        \n          K\n          L\n          T\n        \n        {\n        \n          X\n        \n        }\n      \n    \n    {\\displaystyle \\mathbf {Y} =\\mathbb {KLT} \\{\\mathbf {X} \\}}\n  Organize the data setSuppose you have data comprising a set of observations of p variables, and you want to reduce the data so that each observation can be described with only L variables, L < p. Suppose further, that the data are arranged as a set of n data vectors \n  \n    \n      \n        \n          \n            x\n          \n          \n            1\n          \n        \n        …\n        \n          \n            x\n          \n          \n            n\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{1}\\ldots \\mathbf {x} _{n}}\n   with each \n  \n    \n      \n        \n          \n            x\n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{i}}\n   representing a single grouped observation of the p variables.\n\nWrite \n  \n    \n      \n        \n          \n            x\n          \n          \n            1\n          \n        \n        …\n        \n          \n            x\n          \n          \n            n\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {x} _{1}\\ldots \\mathbf {x} _{n}}\n   as row vectors, each with p elements.\nPlace the row vectors into a single matrix X of dimensions n × p.Calculate the empirical meanFind the empirical mean along each column j = 1, ..., p.\nPlace the calculated mean values into an empirical mean vector u of dimensions p × 1.\n\n  \n    \n      \n        \n          u\n          \n            j\n          \n        \n        =\n        \n          \n            1\n            n\n          \n        \n        \n          ∑\n          \n            i\n            =\n            1\n          \n          \n            n\n          \n        \n        \n          X\n          \n            i\n            j\n          \n        \n      \n    \n    {\\displaystyle u_{j}={\\frac {1}{n}}\\sum _{i=1}^{n}X_{ij}}\n  Calculate the deviations from the meanMean subtraction is an integral part of the solution towards finding a principal component basis that minimizes the mean square error of approximating the data. Hence we proceed by centering the data as follows:\n\nSubtract the empirical mean vector \n  \n    \n      \n        \n          \n            u\n          \n          \n            T\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {u} ^{T}}\n   from each row of the data matrix X.\nStore mean-subtracted data in the n × p matrix B.\n\n  \n    \n      \n        \n          B\n        \n        =\n        \n          X\n        \n        −\n        \n          h\n        \n        \n          \n            u\n          \n          \n            T\n          \n        \n      \n    \n    {\\displaystyle \\mathbf {B} =\\mathbf {X} -\\mathbf {h} \\mathbf {u} ^{T}}\n  \nwhere h is an n × 1 column vector of all 1s:\n\n  \n    \n      \n        \n          h\n          \n            i\n          \n        \n        =\n        1\n        \n        \n        \n        \n          for \n        \n        i\n        =\n        1\n        ,\n        …\n        ,\n        n\n      \n    \n    {\\displaystyle h_{i}=1\\,\\qquad \\qquad {\\text{for }}i=1,\\ldots ,n}\n  In some applications, each variable (column of B) may also be scaled to have a variance equal to 1 (see Z-score).  This step affects the calculated principal components, but makes them independent of the units used to measure the different variables.\n\nFind the covariance matrixFind the p × p empirical covariance matrix C from matrix B:  where \n  \n    \n      \n        ∗\n      \n    \n    {\\displaystyle *}\n   is the conjugate transpose operator. If B consists entirely of real numbers, which is the case in many applications, the \"conjugate transpose\" is the same as the regular transpose.\nThe reasoning behind using n − 1 instead of n to calculate the covariance is Bessel's correction.Find the eigenvectors and eigenvalues of the covariance matrixCompute the matrix V of eigenvectors which diagonalizes the covariance matrix C:  where D is the diagonal matrix of eigenvalues of C. This step will typically involve the use of a computer-based algorithm for computing eigenvectors and eigenvalues. These algorithms are readily available as sub-components of most matrix algebra systems, such as SAS, R, MATLAB, Mathematica, SciPy, IDL (Interactive Data Language), or GNU Octave as well as OpenCV.\nMatrix D will take the form of an p × p diagonal matrix, where  is the jth eigenvalue of the covariance matrix C, and \nMatrix V, also of dimension p × p, contains p column vectors, each of length p, which represent the p eigenvectors of the covariance matrix C.\nThe eigenvalues and eigenvectors are ordered and paired. The jth eigenvalue corresponds to the jth eigenvector.\nMatrix V denotes the matrix of right eigenvectors (as opposed to left eigenvectors). In general, the matrix of right eigenvectors need not be the (conjugate) transpose of the matrix of left eigenvectors.Rearrange the eigenvectors and eigenvaluesSort the columns of the eigenvector matrix V and eigenvalue matrix D in order of decreasing eigenvalue.\nMake sure to maintain the correct pairings between the columns in each matrix.Compute the cumulative energy content for each eigenvectorThe eigenvalues represent the distribution of the source data's energy among each of the eigenvectors, where the eigenvectors form a basis for the data. The cumulative energy content g for the jth eigenvector is the sum of the energy content across all of the eigenvalues from 1 through j:\n\n  \n    \n      \n        \n          g\n          \n            j\n          \n        \n        =\n        \n          ∑\n          \n            k\n            =\n            1\n          \n          \n            j\n          \n        \n        \n          D\n          \n            k\n            k\n          \n        \n        \n        \n          for \n        \n        j\n        =\n        1\n        ,\n        …\n        ,\n        p\n      \n    \n    {\\displaystyle g_{j}=\\sum _{k=1}^{j}D_{kk}\\qquad {\\text{for }}j=1,\\dots ,p}\n  Select a subset of the eigenvectors as basis vectorsSave the first L columns of V as the p × L matrix W:  where \nUse the vector g as a guide in choosing an appropriate value for L. The goal is to choose a value of L as small as possible while achieving a reasonably high value of g on a percentage basis. For example, you may want to choose L so that the cumulative energy g is above a certain threshold, like 90 percent. In this case, choose the smallest value of L such that Project the data onto the new basisThe projected data points are the rows of the matrix That is, the first column of \n  \n    \n      \n        \n          T\n        \n      \n    \n    {\\displaystyle \\mathbf {T} }\n   is the projection of the data points onto the first principal component, the second column is the projection onto the second principal component, etc.\n\nDerivation of PCA using the covariance method\nLet X be a d-dimensional random vector expressed as column vector. Without loss of generality, assume X has zero mean.\nWe want to find \n  \n    \n      \n        (\n        ∗\n        )\n      \n    \n    {\\displaystyle (\\ast )}\n   a d × d orthonormal transformation matrix P so that PX has a diagonal covariance matrix (that is, PX is a random vector with all its distinct components pairwise uncorrelated).\nA quick computation assuming \n  \n    \n      \n        P\n      \n    \n    {\\displaystyle P}\n   were unitary yields:\n\n  \n    \n      \n        \n          \n            \n              \n                cov\n                ⁡\n                (\n                P\n                X\n                )\n              \n              \n                \n                =\n                E\n                ⁡\n                [\n                P\n                X\n                 \n                (\n                P\n                X\n                \n                  )\n                  \n                    ∗\n                  \n                \n                ]\n              \n            \n            \n              \n              \n                \n                =\n                E\n                ⁡\n                [\n                P\n                X\n                 \n                \n                  X\n                  \n                    ∗\n                  \n                \n                \n                  P\n                  \n                    ∗\n                  \n                \n                ]\n              \n            \n            \n              \n              \n                \n                =\n                P\n                E\n                ⁡\n                [\n                X\n                \n                  X\n                  \n                    ∗\n                  \n                \n                ]\n                \n                  P\n                  \n                    ∗\n                  \n                \n              \n            \n            \n              \n              \n                \n                =\n                P\n                cov\n                ⁡\n                (\n                X\n                )\n                \n                  P\n                  \n                    −\n                    1\n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}\\operatorname {cov} (PX)&=\\operatorname {E} [PX~(PX)^{*}]\\\\&=\\operatorname {E} [PX~X^{*}P^{*}]\\\\&=P\\operatorname {E} [XX^{*}]P^{*}\\\\&=P\\operatorname {cov} (X)P^{-1}\\\\\\end{aligned}}}\n  Hence \n  \n    \n      \n        (\n        ∗\n        )\n      \n    \n    {\\displaystyle (\\ast )}\n   holds if and only if \n  \n    \n      \n        cov\n        ⁡\n        (\n        X\n        )\n      \n    \n    {\\displaystyle \\operatorname {cov} (X)}\n   were diagonalisable by \n  \n    \n      \n        P\n      \n    \n    {\\displaystyle P}\n  .\nThis is very constructive, as cov(X) is guaranteed to be a non-negative definite matrix and thus is guaranteed to be diagonalisable by some unitary matrix.\n\nCovariance-free computation\nIn practical implementations, especially with high dimensional data (large p), the naive covariance method is rarely used because it is not efficient due to high computational and memory costs of explicitly determining the covariance matrix. The covariance-free approach avoids the np2 operations of explicitly calculating and storing the covariance matrix XTX, instead utilizing one of matrix-free methods, for example, based on the function evaluating the product XT(X r) at the cost of 2np operations.\n\nIterative computation\nOne way to compute the first principal component efficiently is shown in the following pseudo-code, for a data matrix X with zero mean, without ever computing its covariance matrix.\n\nr = a random vector of length p\nr = r / norm(r)\ndo c times:\n      s = 0 (a vector of length p)\n      for each row x in X\n            s = s + (x ⋅ r) x\n      λ = rTs // λ is the eigenvalue\n      error = |λ ⋅ r − s|\n      r = s / norm(s)\n      exit if error < tolerance\nreturn λ, r\n\nThis power iteration algorithm simply calculates the vector XT(X r), normalizes, and places the result back in r. The eigenvalue is approximated by rT (XTX) r, which is the Rayleigh quotient on the unit vector r for the covariance matrix XTX . If the largest singular value is well separated from the next largest one, the vector r gets close to the first principal component of X within the number of iterations c, which is small relative to p, at the total cost 2cnp. The power iteration convergence can be accelerated without noticeably sacrificing the small cost per iteration using more advanced matrix-free methods, such as the Lanczos algorithm or the Locally Optimal Block Preconditioned Conjugate Gradient (LOBPCG) method.\nSubsequent principal components can be computed one-by-one via deflation or simultaneously as a block. In the former approach, imprecisions in already computed approximate principal components additively affect the accuracy of the subsequently computed principal components, thus increasing the error with every new computation. The latter approach in the block power method replaces single-vectors r and s with block-vectors, matrices R and S. Every column of R approximates one of the leading principal components, while all columns are iterated simultaneously. The main calculation is evaluation of the product XT(X R). Implemented, for example, in LOBPCG, efficient blocking eliminates the accumulation of the errors, allows using high-level BLAS matrix-matrix product functions, and typically leads to faster convergence, compared to the single-vector one-by-one technique.\n\nThe NIPALS method\nNon-linear iterative partial least squares (NIPALS) is a variant the classical power iteration with matrix deflation by subtraction implemented for computing the first few components in a principal component or partial least squares analysis. For very-high-dimensional datasets, such as those generated in the *omics sciences (for example, genomics, metabolomics) it is usually only necessary to compute the first few PCs. The non-linear iterative partial least squares (NIPALS) algorithm updates iterative approximations to the leading scores and loadings t1 and r1T by the power iteration multiplying on every iteration by X on the left and on the right, that is, calculation of the covariance matrix is avoided, just as in the matrix-free implementation of the power iterations to XTX, based on the function evaluating the product XT(X r) = ((X r)TX)T.\nThe matrix deflation by subtraction is performed by subtracting the outer product, t1r1T from X leaving the deflated residual matrix used to calculate the subsequent leading PCs.\nFor large data matrices, or matrices that have a high degree of column collinearity, NIPALS suffers from loss of orthogonality of PCs due to machine precision round-off errors accumulated in each iteration and matrix deflation by subtraction. A Gram–Schmidt re-orthogonalization algorithm is applied to both the scores and the loadings at each iteration step to eliminate this loss of orthogonality. NIPALS reliance on single-vector multiplications cannot take advantage of high-level BLAS and results in slow convergence for clustered leading singular values—both these deficiencies are resolved in more sophisticated matrix-free block solvers, such as the Locally Optimal Block Preconditioned Conjugate Gradient (LOBPCG) method.\n\nOnline/sequential estimation\nIn an \"online\" or \"streaming\" situation with data arriving piece by piece rather than being stored in a single batch, it is useful to make an estimate of the PCA projection that can be updated sequentially. This can be done efficiently, but requires different algorithms.\n\nPCA and qualitative variables\nIn PCA, it is common that we want to introduce qualitative variables as supplementary elements. For example, many quantitative variables have been measured on plants. For these plants, some qualitative variables are available as, for example, the species to which the plant belongs. These data were subjected to PCA for quantitative variables. When analyzing the results, it is natural to connect the principal components to the qualitative variable species.\nFor this, the following results are produced.\n\nIdentification, on the factorial planes, of the different species, for example, using different colors.\nRepresentation, on the factorial planes, of the centers of gravity of plants belonging to the same species.\nFor each center of gravity and each axis, p-value to judge the significance of the difference between the center of gravity and origin.These results are what is called introducing a qualitative variable as supplementary element. This procedure is detailed in and Husson, Lê & Pagès 2009 and Pagès 2013.\nFew software offer this option in an \"automatic\" way. This is the case of SPAD that historically, following the work of Ludovic Lebart, was the first to propose this option, and the R package FactoMineR.\n\nApplications\nIntelligence\nThe earliest application of factor analysis was in locating and measuring components of human intelligence. It was believed that intelligence had various uncorrelated components such as spatial intelligence, verbal intelligence, induction, deduction etc and that scores on these could be adduced by factor analysis from results on various tests, to give a single index known as the Intelligence Quotient (IQ). The pioneering statistical psychologist Spearman actually developed factor analysis in 1904 for his two-factor theory of intelligence, adding a formal technique to the science of psychometrics. In 1924 Thurstone looked for 56 factors of intelligence, developing the notion of Mental Age. Standard IQ tests today are based on this early work.\n\nResidential differentiation\nIn 1949, Shevky and Williams introduced the theory of factorial ecology, which dominated studies of residential differentiation  from the 1950s to the 1970s. Neighbourhoods in a city were recognizable or could be distinguished from one another by various characteristics which could be reduced to three by factor analysis. These were known as 'social rank' (an index of occupational status), 'familism' or family size, and 'ethnicity'; Cluster analysis could then be applied to divide the city into  clusters or precincts according to values of the three key factor variables. An extensive literature developed around factorial ecology in urban geography, but the approach went out of fashion after 1980 as being methodologically primitive and having little place in postmodern geographical paradigms.\nOne of the problems with factor analysis has always been finding convincing names for the various artificial factors. In 2000, Flood revived the factorial ecology approach to show that principal components analysis actually gave meaningful answers directly, without resorting to factor rotation. The principal components were actually dual variables or shadow prices of 'forces' pushing people together or apart in cities. The first component was 'accessibility', the classic trade-off between demand for travel and demand for space, around which classical urban economics is based. The next two components were 'disadvantage', which keeps people of similar status in separate neighbourhoods (mediated by planning), and ethnicity, where people of similar ethnic backgrounds try to co-locate.About the same time, the Australian Bureau of Statistics defined distinct indexes of advantage and disadvantage taking the first principal component of sets of key variables that were  thought to be important. These SEIFA indexes are regularly published for various jurisdictions, and are used frequently in spatial analysis.\n\nDevelopment indexes\nPCA has been the only formal method available for the development of indexes, which are otherwise a hit-or-miss ad hoc undertaking.\nThe City Development Index was developed by PCA from about 200 indicators of city outcomes in a 1996 survey of 254 global cities. The first principal component was subject to iterative regression, adding the original variables singly until about 90% of its variation was accounted for. The index ultimately used about 15 indicators but was a good predictor of many more variables. Its comparative value agreed very well with a subjective assessment of the condition of each city. The coefficients on items of infrastructure were roughly proportional to the average costs of providing the underlying services, suggesting the Index was actually a measure of effective physical and social investment in the city.\nThe country-level Human Development Index (HDI) from UNDP, which has been published since 1990 and is very extensively used in development studies, has very similar coefficients on similar indicators, strongly suggesting it was originally constructed using PCA.\n\nPopulation genetics\nIn 1978 Cavalli-Sforza and others pioneered the use of principal components analysis (PCA) to summarise data on variation in human gene frequencies across regions. The components showed distinctive patterns, including gradients and sinusoidal waves. They interpreted these patterns as resulting from specific ancient migration events.\nSince then, PCA has been ubiquitous in population genetics, with thousands of papers using PCA as a display mechanism. Genetics varies largely according to proximity, so the first two principal components actually show spatial distribution and may be used to map the  relative geographical location of different population groups, thereby showing individuals who have wandered from their original locations.PCA in genetics has been technically controversial, in that the technique has been performed on discrete non-normal variables and often on binary allele markers. The lack of any measures of standard error in PCA are also an impediment to more consistent usage. In August 2022, the molecular biologist Eran Elhaik published a theoretical paper in Scientific Reports analyzing 12 PCA applications. He concluded that it was easy to manipulate the method, which, in his view, generated results that were 'erroneous, contradictory, and absurd.' Specifically, he argued, the results achieved in population genetics were characterized by  cherry-picking and circular reasoning.\n\nMarket research and indexes of attitude\nMarket research has been an extensive user of PCA. It is used to develop customer satisfaction or customer loyalty scores for products, and with clustering, to develop market segments that may be targeted with advertising campaigns, in much the same way as factorial ecology will locate geographical areas with similar characteristics.PCA rapidly transforms large amounts of data into smaller, easier-to-digest variables that can be more rapidly and readily analyzed. In any consumer questionnaire, there are series of questions designed to elicit consumer attitudes, and principal components seek out latent variables underlying these attitudes. For example, the Oxford Internet Survey in 2013 asked 2000 people about their attitudes and beliefs, and from these analysts extracted four principal component dimensions, which they identified as 'escape', 'social networking', 'efficiency', and 'problem creating'.Another example from Joe Flood in 2008 extracted an attitudinal index toward housing from 28 attitude questions in a national survey of 2697 households in Australia. The first principal component represented a general attitude toward property and home ownership. The index, or the attitude questions it embodied, could be fed into a General Linear Model of  tenure choice. The strongest determinant of private renting by far was the attitude index, rather than income, marital status or household type.\n\nQuantitative finance\nIn quantitative finance, PCA is used\nin financial risk management, and has been applied to other problems such as portfolio optimization.\nPCA is commonly used in problems involving fixed income securities and portfolios, and interest rate derivatives. \nValuations here depend on the entire yield curve, comprising numerous highly correlated instruments, and PCA is used to define a set of components or factors that explain rate movements,\nthereby facilitating the modelling.\nOne common risk management application is to calculating value at risk, VaR, applying PCA to the Monte Carlo simulation.\n\nHere, for each simulation-sample, the components are stressed, and rates, and in turn option values, are then reconstructed; \nwith VaR calculated, finally, over the entire run. \nPCA is also used in hedging exposure to interest rate risk, given partial durations and other sensitivities.\n\nUnder both, the first three, typically, principal components of the system are of interest (representing \"shift\", \"twist\", and \"curvature\").\nThese principal components are derived from an eigen-decomposition of the covariance matrix of yield at predefined maturities; \n\nand where the variance of each component is its eigenvalue  (and as the components are orthogonal, no correlation need be incorporated in subsequent modelling).\nFor equity, an optimal portfolio is one where the expected return is maximized for a given level of risk, or alternatively, where risk is minimized for a given return; see Markowitz model for discussion.\nThus, one approach is to reduce portfolio risk, where allocation strategies are applied to the \"principal portfolios\" instead of the underlying stocks.\nA second approach is to enhance portfolio return, using the principal components to select stocks with upside potential.\n\nPCA has also been used to understand relationships  between international  equity markets, and within markets between groups of companies in industries or sectors.\nPCA may also be applied to stress testing, essentially an analysis of a bank's ability to endure a hypothetical adverse economic scenario.  Its utility is in \"distilling the information contained in [several] macroeconomic variables into a more manageable data set, which can then [be used] for analysis.\" Here, the resulting factors are linked to e.g. interest rates – based on the largest elements of the factor's eigenvector – and it is then observed how a \"shock\" to each of the factors affects the implied assets of each of the banks.\n\nNeuroscience\nA variant of principal components analysis is used in neuroscience to identify the specific properties of a stimulus that increases a neuron's probability of generating an action potential. This technique is known as spike-triggered covariance analysis. In a typical application an experimenter presents a white noise process as a stimulus (usually either as a sensory input to a test subject, or as a current injected directly into the neuron) and records a train of action potentials, or spikes, produced by the neuron as a result. Presumably, certain features of the stimulus make the neuron more likely to spike. In order to extract these features, the experimenter calculates the covariance matrix of the spike-triggered ensemble, the set of all stimuli (defined and discretized over a finite time window, typically on the order of 100 ms) that immediately preceded a spike. The eigenvectors of the difference between the spike-triggered covariance matrix and the covariance matrix of the prior stimulus ensemble (the set of all stimuli, defined over the same length time window) then indicate the directions in the space of stimuli along which the variance of the spike-triggered ensemble differed the most from that of the prior stimulus ensemble. Specifically, the eigenvectors with the largest positive eigenvalues correspond to the directions along which the variance of the spike-triggered ensemble showed the largest positive change compared to the variance of the prior. Since these were the directions in which varying the stimulus led to a spike, they are often good approximations of the sought after relevant stimulus features.\nIn neuroscience, PCA is also used to discern the identity of a neuron from the shape of its action potential. Spike sorting is an important procedure because extracellular recording techniques often pick up signals from more than one neuron. In spike sorting, one first uses PCA to reduce the dimensionality of the space of action potential waveforms, and then performs clustering analysis to associate specific action potentials with individual neurons.\nPCA as a dimension reduction technique is particularly suited to detect coordinated activities of large neuronal ensembles. It has been used in determining collective variables, that is, order parameters, during phase transitions in the brain.\n\nRelation with other methods\nCorrespondence analysis\nCorrespondence analysis (CA)\nwas developed by Jean-Paul Benzécri\nand is conceptually similar to PCA, but scales the data (which should be non-negative) so that rows and columns are treated equivalently. It is traditionally applied to contingency tables.\nCA decomposes the chi-squared statistic associated to this table into orthogonal factors.\nBecause CA is a descriptive technique, it can be applied to tables for which the chi-squared statistic is appropriate or not.\nSeveral variants of CA are available including detrended correspondence analysis and canonical correspondence analysis. One special extension is multiple correspondence analysis, which may be seen as the counterpart of principal component analysis for categorical data.\n\nFactor analysis\nPrincipal component analysis creates variables that are linear combinations of the original variables. The new variables have the property that the variables are all orthogonal. The PCA transformation can be helpful as a pre-processing step before clustering. PCA is a variance-focused approach seeking to reproduce the total variable variance, in which components reflect both common and unique variance of the variable. PCA is generally preferred for purposes of data reduction (that is, translating variable space into optimal factor space) but not when the goal is to detect the latent construct or factors.\nFactor analysis is similar to principal component analysis, in that factor analysis also involves linear combinations of variables. Different from PCA, factor analysis is a correlation-focused approach seeking to reproduce the inter-correlations among variables, in which the factors \"represent the common variance of variables, excluding unique variance\". In terms of the correlation matrix, this corresponds with focusing on explaining the off-diagonal terms (that is, shared co-variance), while PCA focuses on explaining the terms that sit on the diagonal. However, as a side result, when trying to reproduce the on-diagonal terms, PCA also tends to fit relatively well the off-diagonal correlations.: 158  Results given by PCA and factor analysis are very similar in most situations, but this is not always the case, and there are some problems where the results are significantly different. Factor analysis is generally used when the research purpose is detecting data structure (that is, latent constructs or factors) or causal modeling. If the factor model is incorrectly formulated or the assumptions are not met, then factor analysis will give erroneous results.\n\nK-means clustering\nIt has been asserted that the relaxed solution of k-means clustering, specified by the cluster indicators, is given by the principal components, and the PCA subspace spanned by the principal directions is identical to the cluster centroid subspace. However, that PCA is a useful relaxation of k-means clustering was not a new result, and it is straightforward to uncover counterexamples to the statement that the cluster centroid subspace is spanned by the principal directions.\n\nNon-negative matrix factorization\nNon-negative matrix factorization (NMF) is a dimension reduction method where only non-negative elements in the matrices are used, which is therefore a promising method in astronomy, in the sense that astrophysical signals are non-negative. The PCA components are orthogonal to each other, while the NMF components are all non-negative and therefore constructs a non-orthogonal basis.\nIn PCA, the contribution of each component is ranked based on the magnitude of its corresponding eigenvalue, which is equivalent to the fractional residual variance (FRV) in analyzing empirical data. For NMF, its components are ranked based only on the empirical FRV curves. The residual fractional eigenvalue plots, that is, \n  \n    \n      \n        1\n        −\n        \n          ∑\n          \n            i\n            =\n            1\n          \n          \n            k\n          \n        \n        \n          λ\n          \n            i\n          \n        \n        \n          \n            /\n          \n        \n        \n          ∑\n          \n            j\n            =\n            1\n          \n          \n            n\n          \n        \n        \n          λ\n          \n            j\n          \n        \n      \n    \n    {\\displaystyle 1-\\sum _{i=1}^{k}\\lambda _{i}{\\Big /}\\sum _{j=1}^{n}\\lambda _{j}}\n   as a function of component number \n  \n    \n      \n        k\n      \n    \n    {\\displaystyle k}\n   given a total of \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n   components, for PCA have a flat plateau, where no data is captured to remove the quasi-static noise, then the curves drop quickly as an indication of over-fitting (random noise). The FRV curves for NMF is decreasing continuously when the NMF components are constructed sequentially, indicating the continuous capturing of quasi-static noise; then converge to higher levels than PCA, indicating the less over-fitting property of NMF.\n\nIconography of correlations\nIt is often difficult to interpret the principal components when the data include many variables of various origins, or when some variables are qualitative. This leads the PCA user to a delicate elimination of several variables. If observations or variables have an excessive impact on the direction of the axes, they should be removed and then projected as supplementary elements. In addition, it is necessary to avoid interpreting the proximities between the points close to the center of the factorial plane.\n\nThe iconography of correlations, on the contrary, which is not a projection on a system of axes, does not have these drawbacks. We can therefore keep all the variables.\nThe principle of the diagram is to underline the \"remarkable\" correlations of the correlation matrix, by a solid line (positive correlation) or dotted line (negative correlation).\nA strong correlation is not \"remarkable\" if it is not direct, but caused by the effect of a third variable. Conversely, weak correlations can be \"remarkable\". For example, if a variable Y depends on several independent variables, the correlations of Y with each of them are weak and yet \"remarkable\".\n\nGeneralizations\nSparse PCA\nA particular disadvantage of PCA is that the principal components are usually linear combinations of all input variables. Sparse PCA overcomes this disadvantage by finding linear combinations that contain just a few input variables. It extends the classic method of principal component analysis (PCA) for the reduction of dimensionality of data by adding sparsity constraint on the input variables.\nSeveral approaches have been proposed, including\n\na regression framework,\na convex relaxation/semidefinite programming framework,\na generalized power method framework\nan alternating maximization framework\nforward-backward greedy search and exact methods using branch-and-bound techniques,\nBayesian formulation framework.The methodological and theoretical developments of Sparse PCA as well as its applications in scientific studies were recently reviewed in a survey paper.\n\nNonlinear PCA\nMost of the modern methods for nonlinear dimensionality reduction find their theoretical and algorithmic roots in PCA or K-means. Pearson's original idea was to take a straight line (or plane) which will be \"the best fit\" to a set of data points. Trevor Hastie expanded on this concept by proposing Principal curves as the natural extension for the geometric interpretation of PCA, which explicitly constructs a manifold for data approximation followed by projecting the points onto it, as is illustrated by Fig.\nSee also the elastic map algorithm and principal geodesic analysis. Another popular generalization is kernel PCA, which corresponds to PCA performed in a reproducing kernel Hilbert space associated with a positive definite kernel.\nIn multilinear subspace learning, PCA is generalized to multilinear PCA (MPCA) that extracts features directly from tensor representations. MPCA is solved by performing PCA in each mode of the tensor iteratively. MPCA has been applied to face recognition, gait recognition, etc. MPCA is further extended to uncorrelated MPCA, non-negative MPCA and robust MPCA.\nN-way principal component analysis may be performed with models such as Tucker decomposition, PARAFAC, multiple factor analysis, co-inertia analysis, STATIS, and DISTATIS.\n\nRobust PCA\nWhile PCA finds the mathematically optimal method (as in minimizing the squared error), it is still sensitive to outliers in the data that produce large errors, something that the method tries to avoid in the first place. It is therefore common practice to remove outliers before computing PCA. However, in some contexts, outliers can be difficult to identify. For example, in data mining algorithms like correlation clustering, the assignment of points to clusters and outliers is not known beforehand.\nA recently proposed generalization of PCA based on a weighted PCA increases robustness by assigning different weights to data objects based on their estimated relevancy.\nOutlier-resistant variants of PCA have also been proposed, based on L1-norm formulations (L1-PCA).Robust principal component analysis (RPCA) via decomposition in low-rank and sparse matrices is a modification of PCA that works well with respect to grossly corrupted observations.\n\nSimilar techniques\nIndependent component analysis\nIndependent component analysis (ICA) is directed to similar problems as principal component analysis, but finds additively separable components rather than successive approximations.\n\nNetwork component analysis\nGiven a matrix \n  \n    \n      \n        E\n      \n    \n    {\\displaystyle E}\n  , it tries to decompose it into two matrices such that \n  \n    \n      \n        E\n        =\n        A\n        P\n      \n    \n    {\\displaystyle E=AP}\n  . A key difference from techniques such as PCA and ICA is that some of the entries of \n  \n    \n      \n        A\n      \n    \n    {\\displaystyle A}\n   are constrained to be 0. Here \n  \n    \n      \n        P\n      \n    \n    {\\displaystyle P}\n   is termed the regulatory layer. While in general such a decomposition can have multiple solutions, they prove that if the following conditions are satisfied :\n\n  \n    \n      \n        A\n      \n    \n    {\\displaystyle A}\n   has full column rank\nEach column of \n  \n    \n      \n        A\n      \n    \n    {\\displaystyle A}\n   must have at least \n  \n    \n      \n        L\n        −\n        1\n      \n    \n    {\\displaystyle L-1}\n   zeroes where \n  \n    \n      \n        L\n      \n    \n    {\\displaystyle L}\n   is the number of columns of \n  \n    \n      \n        A\n      \n    \n    {\\displaystyle A}\n   (or alternatively the number of rows of \n  \n    \n      \n        P\n      \n    \n    {\\displaystyle P}\n  ). The justification for this criterion is that if a node is removed from the regulatory layer along with all the output nodes connected to it, the result must still be characterized by a connectivity matrix with full column rank.\n\n  \n    \n      \n        P\n      \n    \n    {\\displaystyle P}\n   must have full row rank.then the decomposition is unique up to multiplication by a scalar.\n\nDiscriminant analysis of principal components\nDiscriminant analysis of principal components (DAPC) is a multivariate method used to identify and describe clusters of genetically related individuals. Genetic variation is partitioned into two components: variation between groups and within groups, and it maximizes the former. Linear discriminants are linear combinations of alleles which best separate the clusters. Alleles that most contribute to this discrimination are therefore those that are the most markedly different across groups. The contributions of alleles to the groupings identified by DAPC can allow identifying regions of the genome driving the genetic divergence among groups\nIn DAPC, data is first transformed using a principal components analysis (PCA) and subsequently clusters are identified using discriminant analysis (DA).\nA DAPC can be realized on R using the package Adegenet. (more info: adegenet on the web)\n\nDirectional component analysis\nDirectional component analysis (DCA) is a method used in the atmospheric sciences for analysing multivariate datasets.\nLike PCA, it allows for dimension reduction, improved visualization and improved interpretability of large data-sets.\nAlso like PCA, it is based on a covariance matrix derived from the input dataset.\nThe difference between PCA and DCA is that DCA additionally requires the input of a vector direction, referred to as the impact. \nWhereas PCA maximises explained variance, DCA maximises probability density given impact.\nThe motivation for DCA is to find components of a multivariate dataset that are both likely (measured using probability density) and important (measured using the impact).\nDCA has been used to find the most likely and most serious heat-wave patterns in weather prediction ensembles\n, and the most likely and most impactful changes in rainfall due to climate change\n.\n\nSoftware/source code\nALGLIB – a C++ and C# library that implements PCA and truncated PCA\nAnalytica – The built-in EigenDecomp function computes principal components.\nELKI – includes PCA for projection, including robust variants of PCA, as well as PCA-based clustering algorithms.\nGretl – principal component analysis can be performed either via the pca command or via the princomp() function.\nJulia – Supports PCA with the pca function in the MultivariateStats package\nKNIME – A java based nodal arranging software for Analysis, in this the nodes called PCA, PCA compute, PCA Apply, PCA inverse make it easily.\nMaple (software) – The PCA command is used to perform a principal component analysis on a set of data.\nMathematica – Implements principal component analysis with the PrincipalComponents command using both covariance and correlation methods.\nMathPHP – PHP mathematics library with support for PCA.\nMATLAB – The SVD function is part of the basic system.  In the Statistics Toolbox, the functions princomp and pca (R2012b) give the principal components, while the function pcares gives the residuals and reconstructed matrix for a low-rank PCA approximation.\nMatplotlib – Python library have a PCA package in the .mlab module.\nmlpack – Provides an implementation of principal component analysis in C++.\nmrmath – A high performance math library for Delphi and FreePascal can perform PCA; including robust variants.\nNAG Library – Principal components analysis is implemented via the g03aa routine (available in both the Fortran versions of the Library).\nNMath – Proprietary numerical library containing PCA for the .NET Framework.\nGNU Octave – Free software computational environment mostly compatible with MATLAB, the function princomp gives the principal component.\nOpenCV\nOracle Database 12c – Implemented via DBMS_DATA_MINING.SVDS_SCORING_MODE by specifying setting value SVDS_SCORING_PCA\nOrange (software) – Integrates PCA in its visual programming environment. PCA displays a scree plot (degree of explained variance) where user can interactively select the number of principal components.\nOrigin – Contains PCA in its Pro version.\nQlucore – Commercial software for analyzing multivariate data with instant response using PCA.\nR – Free statistical package, the functions princomp and prcomp can be used for principal component analysis; prcomp uses singular value decomposition which generally gives better numerical accuracy. Some packages that implement PCA in R, include, but are not limited to: ade4, vegan, ExPosition, dimRed, and FactoMineR.\nSAS – Proprietary software; for example, see\nscikit-learn – Python library for machine learning which contains PCA, Probabilistic PCA, Kernel PCA, Sparse PCA and other techniques in the decomposition module.\nScilab –  Free and open-source, cross-platform numerical computational package, the function princomp computes principal component analysis, the function pca computes principal component analysis with standardized variables.\nSPSS – Proprietary software most commonly used by social scientists for PCA, factor analysis and associated cluster analysis.\nWeka – Java library for machine learning which contains modules for computing principal components.\n\nSee also\nReferences\nFurther reading\nJackson, J.E. (1991). A User's Guide to Principal Components (Wiley).\nJolliffe, I. T. (1986). Principal Component Analysis. Springer Series in Statistics. Springer-Verlag. pp. 487. CiteSeerX 10.1.1.149.8828. doi:10.1007/b98835. ISBN 978-0-387-95442-4.\nJolliffe, I. T. (2002). Principal Component Analysis. Springer Series in Statistics. New York: Springer-Verlag. doi:10.1007/b98835. ISBN 978-0-387-95442-4.\nHusson François, Lê Sébastien & Pagès Jérôme (2009). Exploratory Multivariate Analysis by Example Using R. Chapman & Hall/CRC The R Series, London. 224p. ISBN 978-2-7535-0938-2\nPagès Jérôme (2014). Multiple Factor Analysis by Example Using R. Chapman & Hall/CRC The R Series London 272 p\n\nExternal links\n\nUniversity of Copenhagen video by Rasmus Bro on YouTube\nStanford University video by Andrew Ng on YouTube\nA Tutorial on Principal Component Analysis\nA layman's introduction to principal component analysis on YouTube (a video of less than 100 seconds.)\nStatQuest: StatQuest: Principal Component Analysis (PCA), Step-by-Step on YouTube\nSee also the list of Software implementations",
    "Hierarchical Clustering": "In data mining and statistics, hierarchical clustering (also called hierarchical cluster analysis or HCA) is a method of cluster analysis that seeks to build a hierarchy of clusters. Strategies for hierarchical clustering generally fall into two categories:\n\nAgglomerative: This is a \"bottom-up\" approach: Each observation starts in its own cluster, and pairs of clusters are merged as one moves up the hierarchy.\nDivisive: This is a \"top-down\" approach: All observations start in one cluster, and splits are performed recursively as one moves down the hierarchy.In general, the merges and splits are determined in a greedy manner. The results of hierarchical clustering are usually presented in a dendrogram.\nHierarchical clustering has the distinct advantage that any valid measure of distance can be used. In fact, the observations themselves are not required: all that is used is a matrix of distances. On the other hand, except for the special case of single-linkage distance, none of the algorithms (except exhaustive search in \n  \n    \n      \n        \n          \n            O\n          \n        \n        (\n        \n          2\n          \n            n\n          \n        \n        )\n      \n    \n    {\\displaystyle {\\mathcal {O}}(2^{n})}\n  ) can be guaranteed to find the optimum solution.\n\nComplexity\nThe standard algorithm for hierarchical agglomerative clustering (HAC) has a time complexity of \n  \n    \n      \n        \n          \n            O\n          \n        \n        (\n        \n          n\n          \n            3\n          \n        \n        )\n      \n    \n    {\\displaystyle {\\mathcal {O}}(n^{3})}\n   and requires \n  \n    \n      \n        Ω\n        (\n        \n          n\n          \n            2\n          \n        \n        )\n      \n    \n    {\\displaystyle \\Omega (n^{2})}\n   memory, which makes it too slow for even medium data sets. However, for some special cases, optimal efficient agglomerative methods (of complexity \n  \n    \n      \n        \n          \n            O\n          \n        \n        (\n        \n          n\n          \n            2\n          \n        \n        )\n      \n    \n    {\\displaystyle {\\mathcal {O}}(n^{2})}\n  ) are known: SLINK for single-linkage and CLINK for complete-linkage clustering. With a heap, the runtime of the general case can be reduced to \n  \n    \n      \n        \n          \n            O\n          \n        \n        (\n        \n          n\n          \n            2\n          \n        \n        log\n        ⁡\n        n\n        )\n      \n    \n    {\\displaystyle {\\mathcal {O}}(n^{2}\\log n)}\n  , an improvement on the aforementioned bound of \n  \n    \n      \n        \n          \n            O\n          \n        \n        (\n        \n          n\n          \n            3\n          \n        \n        )\n      \n    \n    {\\displaystyle {\\mathcal {O}}(n^{3})}\n  , at the cost of further increasing the memory requirements. In many cases, the memory overheads of this approach are too large to make it practically usable. Methods exist which use quadtrees that demonstrate \n  \n    \n      \n        \n          \n            O\n          \n        \n        (\n        \n          n\n          \n            2\n          \n        \n        )\n      \n    \n    {\\displaystyle {\\mathcal {O}}(n^{2})}\n   total running time with \n  \n    \n      \n        \n          \n            O\n          \n        \n        (\n        n\n        )\n      \n    \n    {\\displaystyle {\\mathcal {O}}(n)}\n   space.Divisive clustering with an exhaustive search is \n  \n    \n      \n        \n          \n            O\n          \n        \n        (\n        \n          2\n          \n            n\n          \n        \n        )\n      \n    \n    {\\displaystyle {\\mathcal {O}}(2^{n})}\n  , but it is common to use faster heuristics to choose splits, such as k-means.\n\nCluster Linkage\nIn order to decide which clusters should be combined (for agglomerative), or where a cluster should be split (for divisive), a measure of dissimilarity between sets of observations is required. In most methods of hierarchical clustering, this is achieved by use of an appropriate distance d, such as the Euclidean distance, between single observations of the data set, and a linkage criterion, which specifies the dissimilarity of sets as a function of the pairwise distances of observations in the sets. The choice of metric as well as linkage can have a major impact on the result of the clustering, where the lower level metric determines which objects are most similar, whereas the linkage criterion influences the shape of the clusters. For example, complete-linkage tends to produce more spherical clusters than single-linkage.\nThe linkage criterion determines the distance between sets of observations as a function of the pairwise distances between observations.\nSome commonly used linkage criteria between two sets of observations A and B and a distance d are:\nSome of these can only be recomputed recursively (WPGMA, WPGMC), for many a recursive computation with Lance-Williams-equations is more efficient, while for other (Mini-Max, Hausdorff, Medoid) the distances have to be computed with the slower full formula. Other linkage criteria include:\n\nThe probability that candidate clusters spawn from the same distribution function (V-linkage).\nThe product of in-degree and out-degree on a k-nearest-neighbour graph (graph degree linkage).\nThe increment of some cluster descriptor (i.e., a quantity defined for measuring the quality of a cluster) after merging two clusters.\n\nAgglomerative clustering example\nFor example, suppose this data is to be clustered, and the Euclidean distance is the distance metric.\nThe hierarchical clustering dendrogram would be:\n\nCutting the tree at a given height will give a partitioning clustering at a selected precision. In this example, cutting after the second row (from the top) of the dendrogram will yield clusters {a} {b c} {d e} {f}. Cutting after the third row will yield clusters {a} {b c} {d e f}, which is a coarser clustering, with a smaller number but larger clusters.\nThis method builds the hierarchy from the individual elements by progressively merging clusters. In our example, we have six elements {a} {b} {c} {d} {e} and {f}. The first step is to determine which elements to merge in a cluster. Usually, we want to take the two closest elements, according to the chosen distance.\nOptionally, one can also construct a distance matrix at this stage, where the number in the i-th row j-th column is the distance between the i-th and j-th elements. Then, as clustering progresses, rows and columns are merged as the clusters are merged and the distances updated. This is a common way to implement this type of clustering, and has the benefit of caching distances between clusters. A simple agglomerative clustering algorithm is described in the single-linkage clustering page; it can easily be adapted to different types of linkage (see below).\nSuppose we have merged the two closest elements b and c, we now have the following clusters {a}, {b, c}, {d}, {e} and {f}, and want to merge them further. To do that, we need to take the distance between {a} and {b c}, and therefore define the distance between two clusters.\nUsually the distance between two clusters \n  \n    \n      \n        \n          \n            A\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {A}}}\n   and \n  \n    \n      \n        \n          \n            B\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {B}}}\n   is one of the following:\n\nThe maximum distance between elements of each cluster (also called complete-linkage clustering):\n  \n    \n      \n        max\n        {\n        \n        d\n        (\n        x\n        ,\n        y\n        )\n        :\n        x\n        ∈\n        \n          \n            A\n          \n        \n        ,\n        \n        y\n        ∈\n        \n          \n            B\n          \n        \n        \n        }\n        .\n      \n    \n    {\\displaystyle \\max\\{\\,d(x,y):x\\in {\\mathcal {A}},\\,y\\in {\\mathcal {B}}\\,\\}.}\n  The minimum distance between elements of each cluster (also called single-linkage clustering):\n  \n    \n      \n        min\n        {\n        \n        d\n        (\n        x\n        ,\n        y\n        )\n        :\n        x\n        ∈\n        \n          \n            A\n          \n        \n        ,\n        \n        y\n        ∈\n        \n          \n            B\n          \n        \n        \n        }\n        .\n      \n    \n    {\\displaystyle \\min\\{\\,d(x,y):x\\in {\\mathcal {A}},\\,y\\in {\\mathcal {B}}\\,\\}.}\n  The mean distance between elements of each cluster (also called average linkage clustering, used e.g. in UPGMA):\n  \n    \n      \n        \n          \n            1\n            \n              \n                |\n              \n              \n                \n                  A\n                \n              \n              \n                |\n              \n              ⋅\n              \n                |\n              \n              \n                \n                  B\n                \n              \n              \n                |\n              \n            \n          \n        \n        \n          ∑\n          \n            x\n            ∈\n            \n              \n                A\n              \n            \n          \n        \n        \n          ∑\n          \n            y\n            ∈\n            \n              \n                B\n              \n            \n          \n        \n        d\n        (\n        x\n        ,\n        y\n        )\n        .\n      \n    \n    {\\displaystyle {1 \\over {|{\\mathcal {A}}|\\cdot |{\\mathcal {B}}|}}\\sum _{x\\in {\\mathcal {A}}}\\sum _{y\\in {\\mathcal {B}}}d(x,y).}\n  The sum of all intra-cluster variance.\nThe increase in variance for the cluster being merged (Ward's method)\nThe probability that candidate clusters spawn from the same distribution function (V-linkage).In case of tied minimum distances, a pair is randomly chosen, thus being able to generate several structurally different dendrograms. Alternatively, all tied pairs may be joined at the same time, generating a unique dendrogram.One can always decide to stop clustering when there is a sufficiently small number of clusters (number criterion). Some linkages may also guarantee that agglomeration occurs at a greater distance between clusters than the previous agglomeration, and then one can stop clustering when the clusters are too far apart to be merged (distance criterion). However, this is not the case of, e.g., the centroid linkage where the so-called reversals (inversions, departures from ultrametricity) may occur.\n\nDivisive clustering\nThe basic principle of divisive clustering was published as the DIANA (DIvisive ANAlysis clustering) algorithm. Initially, all data is in the same cluster, and the largest cluster is split until every object is separate.\nBecause there exist \n  \n    \n      \n        O\n        (\n        \n          2\n          \n            n\n          \n        \n        )\n      \n    \n    {\\displaystyle O(2^{n})}\n   ways of splitting each cluster, heuristics are needed. DIANA chooses the object with the maximum average dissimilarity and then moves all objects to this cluster that are more similar to the new cluster than to the remainder.\nInformally, DIANA is not so much a process of \"dividing\" as it is of \"hollowing out\": each iteration, an existing cluster (e.g. the initial cluster of the entire dataset) is chosen to form a new cluster inside of it. Objects progressively move to this nested cluster, and hollow out the existing cluster. Eventually, all that's left inside a cluster is nested clusters that grew there, without it owning any loose objects by itself.\nFormally, DIANA operates in the following steps:\n\nLet \n  \n    \n      \n        \n          C\n          \n            0\n          \n        \n        =\n        {\n        1\n        …\n        n\n        }\n      \n    \n    {\\displaystyle C_{0}=\\{1\\dots n\\}}\n   be the set of all \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n   object indices and \n  \n    \n      \n        \n          \n            C\n          \n        \n        =\n        {\n        \n          C\n          \n            0\n          \n        \n        }\n      \n    \n    {\\displaystyle {\\mathcal {C}}=\\{C_{0}\\}}\n   the set of all formed clusters so far.\nIterate the following until \n  \n    \n      \n        \n          |\n        \n        \n          \n            C\n          \n        \n        \n          |\n        \n        =\n        n\n      \n    \n    {\\displaystyle |{\\mathcal {C}}|=n}\n  :\nFind the current cluster with 2 or more objects that has the largest diameter: \n  \n    \n      \n        \n          C\n          \n            ∗\n          \n        \n        =\n        arg\n        ⁡\n        \n          max\n          \n            C\n            ∈\n            \n              \n                C\n              \n            \n          \n        \n        \n          max\n          \n            \n              i\n              \n                1\n              \n            \n            ,\n            \n              i\n              \n                2\n              \n            \n            ∈\n            C\n          \n        \n        δ\n        (\n        \n          i\n          \n            1\n          \n        \n        ,\n        \n          i\n          \n            2\n          \n        \n        )\n      \n    \n    {\\displaystyle C_{*}=\\arg \\max _{C\\in {\\mathcal {C}}}\\max _{i_{1},i_{2}\\in C}\\delta (i_{1},i_{2})}\n  \nFind the object in this cluster with the most dissimilarity to the rest of the cluster: \n  \n    \n      \n        \n          i\n          \n            ∗\n          \n        \n        =\n        arg\n        ⁡\n        \n          max\n          \n            i\n            ∈\n            \n              C\n              \n                ∗\n              \n            \n          \n        \n        \n          \n            1\n            \n              \n                |\n              \n              \n                C\n                \n                  ∗\n                \n              \n              \n                |\n              \n              −\n              1\n            \n          \n        \n        \n          ∑\n          \n            j\n            ∈\n            \n              C\n              \n                ∗\n              \n            \n            ∖\n            {\n            i\n            }\n          \n        \n        δ\n        (\n        i\n        ,\n        j\n        )\n      \n    \n    {\\displaystyle i^{*}=\\arg \\max _{i\\in C_{*}}{\\frac {1}{|C_{*}|-1}}\\sum _{j\\in C_{*}\\setminus \\{i\\}}\\delta (i,j)}\n  \nPop \n  \n    \n      \n        \n          i\n          \n            ∗\n          \n        \n      \n    \n    {\\displaystyle i^{*}}\n   from its old cluster \n  \n    \n      \n        \n          C\n          \n            ∗\n          \n        \n      \n    \n    {\\displaystyle C_{*}}\n   and put it into a new splinter group \n  \n    \n      \n        \n          C\n          \n            \n              new\n            \n          \n        \n        =\n        {\n        \n          i\n          \n            ∗\n          \n        \n        }\n      \n    \n    {\\displaystyle C_{\\textrm {new}}=\\{i^{*}\\}}\n  .\nAs long as \n  \n    \n      \n        \n          C\n          \n            ∗\n          \n        \n      \n    \n    {\\displaystyle C_{*}}\n   isn't empty, keep migrating objects from \n  \n    \n      \n        \n          C\n          \n            ∗\n          \n        \n      \n    \n    {\\displaystyle C_{*}}\n   to add them to \n  \n    \n      \n        \n          C\n          \n            \n              new\n            \n          \n        \n      \n    \n    {\\displaystyle C_{\\textrm {new}}}\n  . To choose which objects to migrate, don't just consider dissimilarity to \n  \n    \n      \n        \n          C\n          \n            ∗\n          \n        \n      \n    \n    {\\displaystyle C_{*}}\n  , but also adjust for dissimilarity to the splinter group: let \n  \n    \n      \n        \n          i\n          \n            ∗\n          \n        \n        =\n        arg\n        ⁡\n        \n          max\n          \n            i\n            ∈\n            C\n          \n        \n        D\n        (\n        i\n        )\n      \n    \n    {\\displaystyle i^{*}=\\arg \\max _{i\\in C}D(i)}\n   where we define \n  \n    \n      \n        D\n        (\n        i\n        )\n        =\n        \n          \n            1\n            \n              \n                |\n              \n              \n                C\n                \n                  ∗\n                \n              \n              \n                |\n              \n              −\n              1\n            \n          \n        \n        \n          ∑\n          \n            j\n            ∈\n            \n              C\n              \n                ∗\n              \n            \n            ∖\n            {\n            i\n            }\n          \n        \n        δ\n        (\n        i\n        ,\n        j\n        )\n        −\n        \n          \n            1\n            \n              \n                |\n              \n              \n                C\n                \n                  \n                    new\n                  \n                \n              \n              \n                |\n              \n            \n          \n        \n        \n          ∑\n          \n            j\n            ∈\n            \n              C\n              \n                \n                  new\n                \n              \n            \n          \n        \n        δ\n        (\n        i\n        ,\n        j\n        )\n      \n    \n    {\\displaystyle D(i)={\\frac {1}{|C_{*}|-1}}\\sum _{j\\in C_{*}\\setminus \\{i\\}}\\delta (i,j)-{\\frac {1}{|C_{\\textrm {new}}|}}\\sum _{j\\in C_{\\textrm {new}}}\\delta (i,j)}\n  , then either stop iterating when \n  \n    \n      \n        D\n        (\n        \n          i\n          \n            ∗\n          \n        \n        )\n        <\n        0\n      \n    \n    {\\displaystyle D(i^{*})<0}\n  , or migrate \n  \n    \n      \n        \n          i\n          \n            ∗\n          \n        \n      \n    \n    {\\displaystyle i^{*}}\n  .\nAdd \n  \n    \n      \n        \n          C\n          \n            \n              new\n            \n          \n        \n      \n    \n    {\\displaystyle C_{\\textrm {new}}}\n   to \n  \n    \n      \n        \n          \n            C\n          \n        \n      \n    \n    {\\displaystyle {\\mathcal {C}}}\n  .Intuitively, \n  \n    \n      \n        D\n        (\n        i\n        )\n      \n    \n    {\\displaystyle D(i)}\n   above measures how strongly an object wants to leave its current cluster, but it is attenuated when the object wouldn't fit in the splinter group either. Such objects will likely start their own splinter group eventually.\nThe dendrogram of DIANA can be constructed by letting the splinter group \n  \n    \n      \n        \n          C\n          \n            \n              new\n            \n          \n        \n      \n    \n    {\\displaystyle C_{\\textrm {new}}}\n   be a child of the hollowed-out cluster \n  \n    \n      \n        \n          C\n          \n            ∗\n          \n        \n      \n    \n    {\\displaystyle C_{*}}\n   each time. This constructs a tree with \n  \n    \n      \n        \n          C\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle C_{0}}\n   as its root and \n  \n    \n      \n        n\n      \n    \n    {\\displaystyle n}\n   unique single-object clusters as its leaves.\n\nSoftware\nOpen source implementations\nALGLIB implements several hierarchical clustering algorithms (single-link, complete-link, Ward) in C++ and C# with O(n²) memory and O(n³) run time.\nELKI includes multiple hierarchical clustering algorithms, various linkage strategies and also includes the efficient SLINK, CLINK and Anderberg algorithms, flexible cluster extraction from dendrograms and various other cluster analysis algorithms.\nJulia has an implementation inside the Clustering.jl package.\nOctave, the GNU analog to MATLAB implements hierarchical clustering in function \"linkage\".\nOrange, a data mining software suite, includes hierarchical clustering with interactive dendrogram visualisation.\nR has built-in functions and packages that provide functions for hierarchical clustering.\nSciPy implements hierarchical clustering in Python, including the efficient SLINK algorithm.\nscikit-learn also implements hierarchical clustering in Python.\nWeka includes hierarchical cluster analysis.\n\nCommercial implementations\nMATLAB includes hierarchical cluster analysis.\nSAS includes hierarchical cluster analysis in PROC CLUSTER.\nMathematica includes a Hierarchical Clustering Package.\nNCSS includes hierarchical cluster analysis.\nSPSS includes hierarchical cluster analysis.\nQlucore Omics Explorer includes hierarchical cluster analysis.\nStata includes hierarchical cluster analysis.\nCrimeStat includes a nearest neighbor hierarchical cluster algorithm with a graphical output for a Geographic Information System.\n\nSee also\nReferences\nFurther reading\nKaufman, L.; Rousseeuw, P.J. (1990). Finding Groups in Data: An Introduction to Cluster Analysis (1 ed.). New York: John Wiley. ISBN 0-471-87876-6.\nHastie, Trevor; Tibshirani, Robert; Friedman, Jerome (2009). \"14.3.12 Hierarchical clustering\". The Elements of Statistical Learning (2nd ed.). New York: Springer. pp. 520–8. ISBN 978-0-387-84857-0. Archived from the original (PDF) on 2009-11-10. Retrieved 2009-10-20.",
    "Generative Adversarial Networks": "A generative adversarial network (GAN) is a class of machine learning frameworks and a prominent framework for approaching generative AI. The concept was initially developed by Ian Goodfellow and his colleagues in June 2014. In a GAN, two neural networks contest with each other in the form of a zero-sum game, where one agent's gain is another agent's loss.\nGiven a training set, this technique learns to generate new data with the same statistics as the training set. For example, a GAN trained on photographs can generate new photographs that look at least superficially authentic to human observers, having many realistic characteristics. Though originally proposed as a form of generative model for unsupervised learning, GANs have also proved useful for semi-supervised learning, fully supervised learning, and reinforcement learning.The core idea of a GAN is based on the \"indirect\" training through the discriminator, another neural network that can tell how \"realistic\" the input seems, which itself is also being updated dynamically. This means that the generator is not trained to minimize the distance to a specific image, but rather to fool the discriminator. This enables the model to learn in an unsupervised manner.\nGANs are similar to mimicry in evolutionary biology, with an evolutionary arms race between both networks.\n\nDefinition\nMathematical\nThe original GAN is defined as the following game:\nEach probability space \n  \n    \n      \n        (\n        Ω\n        ,\n        \n          μ\n          \n            ref\n          \n        \n        )\n      \n    \n    {\\displaystyle (\\Omega ,\\mu _{\\text{ref}})}\n   defines a GAN game.\nThere are 2 players: generator and discriminator.\nThe generator's strategy set is \n  \n    \n      \n        \n          \n            P\n          \n        \n        (\n        Ω\n        )\n      \n    \n    {\\displaystyle {\\mathcal {P}}(\\Omega )}\n  , the set of all probability measures \n  \n    \n      \n        \n          μ\n          \n            G\n          \n        \n      \n    \n    {\\displaystyle \\mu _{G}}\n   on \n  \n    \n      \n        Ω\n      \n    \n    {\\displaystyle \\Omega }\n  .\nThe discriminator's strategy set is the set of Markov kernels \n  \n    \n      \n        \n          μ\n          \n            D\n          \n        \n        :\n        Ω\n        →\n        \n          \n            P\n          \n        \n        [\n        0\n        ,\n        1\n        ]\n      \n    \n    {\\displaystyle \\mu _{D}:\\Omega \\to {\\mathcal {P}}[0,1]}\n  , where \n  \n    \n      \n        \n          \n            P\n          \n        \n        [\n        0\n        ,\n        1\n        ]\n      \n    \n    {\\displaystyle {\\mathcal {P}}[0,1]}\n   is the set of probability measures on \n  \n    \n      \n        [\n        0\n        ,\n        1\n        ]\n      \n    \n    {\\displaystyle [0,1]}\n  .\nThe GAN game is a zero-sum game, with objective function\nThe generator aims to minimize the objective, and the discriminator aims to maximize the objective.\n\nThe generator's task is to approach \n  \n    \n      \n        \n          μ\n          \n            G\n          \n        \n        ≈\n        \n          μ\n          \n            ref\n          \n        \n      \n    \n    {\\displaystyle \\mu _{G}\\approx \\mu _{\\text{ref}}}\n  , that is, to match its own output distribution as closely as possible to the reference distribution. The discriminator's task is to output a value close to 1 when the input appears to be from the reference distribution, and to output a value close to 0 when the input looks like it came from the generator distribution.\n\nIn practice\nThe generative network generates candidates while the discriminative network evaluates them. The contest operates in terms of data distributions. Typically, the generative network learns to map from a latent space to a data distribution of interest, while the discriminative network distinguishes candidates produced by the generator from the true data distribution. The generative network's training objective is to increase the error rate of the discriminative network (i.e., \"fool\" the discriminator network by producing novel candidates that the discriminator thinks are not synthesized (are part of the true data distribution)).A known dataset serves as the initial training data for the discriminator. Training involves presenting it with samples from the training dataset until it achieves acceptable accuracy. The generator is trained based on whether it succeeds in fooling the discriminator. Typically, the generator is seeded with randomized input that is sampled from a predefined latent space (e.g. a multivariate normal distribution). Thereafter, candidates synthesized by the generator are evaluated by the discriminator. Independent backpropagation procedures are applied to both networks so that the generator produces better samples, while the discriminator becomes more skilled at flagging synthetic samples. When used for image generation, the generator is typically a deconvolutional neural network, and the discriminator is a convolutional neural network.\n\nRelation to other statistical machine learning methods\nGANs are implicit generative models, which means that they do not explicitly model the likelihood function nor provide a means for finding the latent variable corresponding to a given sample, unlike alternatives such as flow-based generative model.\n\nCompared to fully visible belief networks such as WaveNet and PixelRNN and autoregressive models in general, GANs can generate one complete sample in one pass, rather than multiple passes through the network.\nCompared to Boltzmann machines and nonlinear ICA, there is no restriction on the type of function used by the network.\nSince neural networks are universal approximators, GANs are asymptotically consistent. Variational autoencoders might be universal approximators, but it is not proven as of 2017.\n\nMathematical properties\nMeasure-theoretic considerations\nThis section provides some of the mathematical theory behind these methods.\n\nIn modern probability theory based on measure theory, a probability space also needs to be equipped with a σ-algebra. As a result, a more rigorous definition of the GAN game would make the following changes:Each probability space \n  \n    \n      \n        (\n        Ω\n        ,\n        \n          \n            B\n          \n        \n        ,\n        \n          μ\n          \n            ref\n          \n        \n        )\n      \n    \n    {\\displaystyle (\\Omega ,{\\mathcal {B}},\\mu _{\\text{ref}})}\n   defines a GAN game.\nThe generator's strategy set is \n  \n    \n      \n        \n          \n            P\n          \n        \n        (\n        Ω\n        ,\n        \n          \n            B\n          \n        \n        )\n      \n    \n    {\\displaystyle {\\mathcal {P}}(\\Omega ,{\\mathcal {B}})}\n  , the set of all probability measures \n  \n    \n      \n        \n          μ\n          \n            G\n          \n        \n      \n    \n    {\\displaystyle \\mu _{G}}\n   on the measure-space \n  \n    \n      \n        (\n        Ω\n        ,\n        \n          \n            B\n          \n        \n        )\n      \n    \n    {\\displaystyle (\\Omega ,{\\mathcal {B}})}\n  .\n\nThe discriminator's strategy set is the set of Markov kernels \n  \n    \n      \n        \n          μ\n          \n            D\n          \n        \n        :\n        (\n        Ω\n        ,\n        \n          \n            B\n          \n        \n        )\n        →\n        \n          \n            P\n          \n        \n        (\n        [\n        0\n        ,\n        1\n        ]\n        ,\n        \n          \n            B\n          \n        \n        (\n        [\n        0\n        ,\n        1\n        ]\n        )\n        )\n      \n    \n    {\\displaystyle \\mu _{D}:(\\Omega ,{\\mathcal {B}})\\to {\\mathcal {P}}([0,1],{\\mathcal {B}}([0,1]))}\n  , where \n  \n    \n      \n        \n          \n            B\n          \n        \n        (\n        [\n        0\n        ,\n        1\n        ]\n        )\n      \n    \n    {\\displaystyle {\\mathcal {B}}([0,1])}\n   is the Borel σ-algebra on \n  \n    \n      \n        [\n        0\n        ,\n        1\n        ]\n      \n    \n    {\\displaystyle [0,1]}\n  .Since issues of measurability never arise in practice, these will not concern us further.\n\nChoice of the strategy set\nIn the most generic version of the GAN game described above, the strategy set for the discriminator contains all Markov kernels \n  \n    \n      \n        \n          μ\n          \n            D\n          \n        \n        :\n        Ω\n        →\n        \n          \n            P\n          \n        \n        [\n        0\n        ,\n        1\n        ]\n      \n    \n    {\\displaystyle \\mu _{D}:\\Omega \\to {\\mathcal {P}}[0,1]}\n  , and the strategy set for the generator contains arbitrary probability distributions \n  \n    \n      \n        \n          μ\n          \n            G\n          \n        \n      \n    \n    {\\displaystyle \\mu _{G}}\n   on \n  \n    \n      \n        Ω\n      \n    \n    {\\displaystyle \\Omega }\n  .\nHowever, as shown below, the optimal discriminator strategy against any \n  \n    \n      \n        \n          μ\n          \n            G\n          \n        \n      \n    \n    {\\displaystyle \\mu _{G}}\n   is deterministic, so there is no loss of generality in restricting the discriminator's strategies to deterministic functions \n  \n    \n      \n        D\n        :\n        Ω\n        →\n        [\n        0\n        ,\n        1\n        ]\n      \n    \n    {\\displaystyle D:\\Omega \\to [0,1]}\n  . In most applications, \n  \n    \n      \n        D\n      \n    \n    {\\displaystyle D}\n   is a deep neural network function.\nAs for the generator, while \n  \n    \n      \n        \n          μ\n          \n            G\n          \n        \n      \n    \n    {\\displaystyle \\mu _{G}}\n   could theoretically be any computable probability distribution, in practice, it is usually implemented as a pushforward: \n  \n    \n      \n        \n          μ\n          \n            G\n          \n        \n        =\n        \n          μ\n          \n            Z\n          \n        \n        ∘\n        \n          G\n          \n            −\n            1\n          \n        \n      \n    \n    {\\displaystyle \\mu _{G}=\\mu _{Z}\\circ G^{-1}}\n  . That is, start with a random variable \n  \n    \n      \n        z\n        ∼\n        \n          μ\n          \n            Z\n          \n        \n      \n    \n    {\\displaystyle z\\sim \\mu _{Z}}\n  , where \n  \n    \n      \n        \n          μ\n          \n            Z\n          \n        \n      \n    \n    {\\displaystyle \\mu _{Z}}\n   is a probability distribution that is easy to compute (such as the uniform distribution, or the Gaussian distribution), then define a function \n  \n    \n      \n        G\n        :\n        \n          Ω\n          \n            Z\n          \n        \n        →\n        Ω\n      \n    \n    {\\displaystyle G:\\Omega _{Z}\\to \\Omega }\n  . Then the distribution \n  \n    \n      \n        \n          μ\n          \n            G\n          \n        \n      \n    \n    {\\displaystyle \\mu _{G}}\n   is the distribution of \n  \n    \n      \n        G\n        (\n        z\n        )\n      \n    \n    {\\displaystyle G(z)}\n  .\nConsequently, the generator's strategy is usually defined as just \n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  , leaving \n  \n    \n      \n        z\n        ∼\n        \n          μ\n          \n            Z\n          \n        \n      \n    \n    {\\displaystyle z\\sim \\mu _{Z}}\n   implicit. In this formalism, the GAN game objective is\n\nGenerative reparametrization\nThe GAN architecture has two main components. One is casting optimization into a game, of form \n  \n    \n      \n        \n          min\n          \n            G\n          \n        \n        \n          max\n          \n            D\n          \n        \n        L\n        (\n        G\n        ,\n        D\n        )\n      \n    \n    {\\displaystyle \\min _{G}\\max _{D}L(G,D)}\n  , which is different from the usual kind of optimization, of form \n  \n    \n      \n        \n          min\n          \n            θ\n          \n        \n        L\n        (\n        θ\n        )\n      \n    \n    {\\displaystyle \\min _{\\theta }L(\\theta )}\n  . The other is the decomposition of \n  \n    \n      \n        \n          μ\n          \n            G\n          \n        \n      \n    \n    {\\displaystyle \\mu _{G}}\n   into \n  \n    \n      \n        \n          μ\n          \n            Z\n          \n        \n        ∘\n        \n          G\n          \n            −\n            1\n          \n        \n      \n    \n    {\\displaystyle \\mu _{Z}\\circ G^{-1}}\n  , which can be understood as a reparametrization trick.\nTo see its significance, one must compare GAN with previous methods for learning generative models, which were plagued with \"intractable probabilistic computations that arise in maximum likelihood estimation and related strategies\".At the same time, Kingma and Welling and Rezende et al. developed the same idea of reparametrization into a general stochastic backpropagation method. Among its first applications was the variational autoencoder.\n\nMove order and strategic equilibria\nIn the original paper, as well as most subsequent papers, it is usually assumed that the generator moves first, and the discriminator moves second, thus giving the following minimax game:\nIf both the generator's and the discriminator's strategy sets are spanned by a finite number of strategies, then by the minimax theorem,that is, the move order does not matter.\nHowever, since the strategy sets are both not finitely spanned, the minimax theorem does not apply, and the idea of an \"equilibrium\" becomes delicate. To wit, there are the following different concepts of equilibrium:\n\nEquilibrium when generator moves first, and discriminator moves second:\nEquilibrium when discriminator moves first, and generator moves second:\nNash equilibrium \n  \n    \n      \n        (\n        \n          \n            \n              \n                μ\n                ^\n              \n            \n          \n          \n            D\n          \n        \n        ,\n        \n          \n            \n              \n                μ\n                ^\n              \n            \n          \n          \n            G\n          \n        \n        )\n      \n    \n    {\\displaystyle ({\\hat {\\mu }}_{D},{\\hat {\\mu }}_{G})}\n  , which is stable under simultaneous move order:For general games, these equilibria do not have to agree, or even to exist. For the original GAN game, these equilibria all exist, and are all equal. However, for more general GAN games, these do not necessarily exist, or agree.\n\nMain theorems for GAN game\nThe original GAN paper proved the following two theorems:\nInterpretation: For any fixed generator strategy \n  \n    \n      \n        \n          μ\n          \n            G\n          \n        \n      \n    \n    {\\displaystyle \\mu _{G}}\n  , the optimal discriminator keeps track of the likelihood ratio between the reference distribution and the generator distribution:where \n  \n    \n      \n        σ\n      \n    \n    {\\displaystyle \\sigma }\n   is the logistic function.\nIn particular, if the prior probability for an image \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n   to come from the reference distribution is equal to \n  \n    \n      \n        \n          \n            1\n            2\n          \n        \n      \n    \n    {\\displaystyle {\\frac {1}{2}}}\n  , then \n  \n    \n      \n        D\n        (\n        x\n        )\n      \n    \n    {\\displaystyle D(x)}\n   is just the posterior probability that \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n   came from the reference distribution:\n\nTraining and evaluating GAN\nTraining\nUnstable convergence\nWhile the GAN game has a unique global equilibrium point when both the generator and discriminator have access to their entire strategy sets, the equilibrium is no longer guaranteed when they have a restricted strategy set.In practice, the generator has access only to measures of form \n  \n    \n      \n        \n          μ\n          \n            Z\n          \n        \n        ∘\n        \n          G\n          \n            θ\n          \n          \n            −\n            1\n          \n        \n      \n    \n    {\\displaystyle \\mu _{Z}\\circ G_{\\theta }^{-1}}\n  , where \n  \n    \n      \n        \n          G\n          \n            θ\n          \n        \n      \n    \n    {\\displaystyle G_{\\theta }}\n   is a function computed by a neural network with parameters \n  \n    \n      \n        θ\n      \n    \n    {\\displaystyle \\theta }\n  , and \n  \n    \n      \n        \n          μ\n          \n            Z\n          \n        \n      \n    \n    {\\displaystyle \\mu _{Z}}\n   is an easily sampled distribution, such as the uniform or normal distribution. Similarly, the discriminator has access only to functions of form \n  \n    \n      \n        \n          D\n          \n            ζ\n          \n        \n      \n    \n    {\\displaystyle D_{\\zeta }}\n  , a function computed by a neural network with parameters \n  \n    \n      \n        ζ\n      \n    \n    {\\displaystyle \\zeta }\n  . These restricted strategy sets take up a vanishingly small proportion of their entire strategy sets.Further, even if an equilibrium still exists, it can only be found by searching in the high-dimensional space of all possible neural network functions. The standard strategy of using gradient descent to find the equilibrium often does not work for GAN, and often the game \"collapses\" into one of several failure modes. To improve the convergence stability, some training strategies start with an easier task, such as generating low-resolution images or simple images (one object with uniform background), and gradually increase the difficulty of the task during training. This essentially translates to applying a curriculum learning scheme.\n\nMode collapse\nGANs often suffer from mode collapse where they fail to generalize properly, missing entire modes from the input data. For example, a GAN trained on the MNIST dataset containing many samples of each digit might only generate pictures of digit 0. This was named in the first paper as the \"Helvetica scenario\".\nOne way this can happen is if the generator learns too fast compared to the discriminator. If the discriminator \n  \n    \n      \n        D\n      \n    \n    {\\displaystyle D}\n   is held constant, then the optimal generator would only output elements of \n  \n    \n      \n        arg\n        ⁡\n        \n          max\n          \n            x\n          \n        \n        D\n        (\n        x\n        )\n      \n    \n    {\\displaystyle \\arg \\max _{x}D(x)}\n  . So for example, if during GAN training for generating MNIST dataset, for a few epochs, the discriminator somehow prefers the digit 0 slightly more than other digits, the generator may seize the opportunity to generate only digit 0, then be unable to escape the local minimum after the discriminator improves.\nSome researchers perceive the root problem to be a weak discriminative network that fails to notice the pattern of omission, while others assign blame to a bad choice of objective function. Many solutions have been proposed, but it is still an open problem.Even the state-of-the-art architecture, BigGAN (2019), could not avoid mode collapse. The authors resorted to \"allowing collapse to occur at the later stages of training, by which time a model is sufficiently trained to achieve good results\".\n\nTwo time-scale update rule\nThe two time-scale update rule (TTUR) is proposed to make GAN convergence more stable by making the learning rate of the generator lower than that of the discriminator. The authors argued that the generator should move slower than the discriminator, so that it does not \"drive the discriminator steadily into new regions without capturing its gathered information\".\nThey proved that a general class of games that included the GAN game, when trained under TTUR, \"converges under mild assumptions to a stationary local Nash equilibrium\".They also proposed using the Adam stochastic optimization to avoid mode collapse, as well as the Fréchet inception distance for evaluating GAN performances.\n\nVanishing gradient\nConversely, if the discriminator learns too fast compared to the generator, then the discriminator could almost perfectly distinguish \n  \n    \n      \n        \n          μ\n          \n            \n              G\n              \n                θ\n              \n            \n          \n        \n        ,\n        \n          μ\n          \n            ref\n          \n        \n      \n    \n    {\\displaystyle \\mu _{G_{\\theta }},\\mu _{\\text{ref}}}\n  . In such case, the generator \n  \n    \n      \n        \n          G\n          \n            θ\n          \n        \n      \n    \n    {\\displaystyle G_{\\theta }}\n   could be stuck with a very high loss no matter which direction it changes its \n  \n    \n      \n        θ\n      \n    \n    {\\displaystyle \\theta }\n  , meaning that the gradient \n  \n    \n      \n        \n          ∇\n          \n            θ\n          \n        \n        L\n        (\n        \n          G\n          \n            θ\n          \n        \n        ,\n        \n          D\n          \n            ζ\n          \n        \n        )\n      \n    \n    {\\displaystyle \\nabla _{\\theta }L(G_{\\theta },D_{\\zeta })}\n   would be close to zero. In such case, the generator cannot learn, a case of the vanishing gradient problem.Intuitively speaking, the discriminator is too good, and since the generator cannot take any small step (only small steps are considered in gradient descent) to improve its payoff, it does not even try.\nOne important method for solving this problem is the Wasserstein GAN.\n\nEvaluation\nGANs are usually evaluated by Inception score (IS), which measures how varied the generator's outputs are (as classified by an image classifier, usually Inception-v3), or Fréchet inception distance (FID), which measures how similar the generator's outputs are to a reference set (as classified by a learned image featurizer, such as Inception-v3 without its final layer). Many papers that propose new GAN architectures for image generation report how their architectures break the state of the art on FID or IS.\nAnother evaluation method is the Learned Perceptual Image Patch Similarity (LPIPS), which starts with a learned image featurizer \n  \n    \n      \n        \n          f\n          \n            θ\n          \n        \n        :\n        \n          Image\n        \n        →\n        \n          \n            R\n          \n          \n            n\n          \n        \n      \n    \n    {\\displaystyle f_{\\theta }:{\\text{Image}}\\to \\mathbb {R} ^{n}}\n  , and finetunes it by supervised learning on a set of \n  \n    \n      \n        (\n        x\n        ,\n        \n          x\n          ′\n        \n        ,\n        \n          PerceptualDifference\n        \n        (\n        x\n        ,\n        \n          x\n          ′\n        \n        )\n        )\n      \n    \n    {\\displaystyle (x,x',{\\text{PerceptualDifference}}(x,x'))}\n  , where \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n   is an image, \n  \n    \n      \n        \n          x\n          ′\n        \n      \n    \n    {\\displaystyle x'}\n   is a perturbed version of it, and \n  \n    \n      \n        \n          PerceptualDifference\n        \n        (\n        x\n        ,\n        \n          x\n          ′\n        \n        )\n      \n    \n    {\\displaystyle {\\text{PerceptualDifference}}(x,x')}\n   is how much they differ, as reported by human subjects. The model is finetuned so that it can approximate \n  \n    \n      \n        ‖\n        \n          f\n          \n            θ\n          \n        \n        (\n        x\n        )\n        −\n        \n          f\n          \n            θ\n          \n        \n        (\n        \n          x\n          ′\n        \n        )\n        ‖\n        ≈\n        \n          PerceptualDifference\n        \n        (\n        x\n        ,\n        \n          x\n          ′\n        \n        )\n      \n    \n    {\\displaystyle \\|f_{\\theta }(x)-f_{\\theta }(x')\\|\\approx {\\text{PerceptualDifference}}(x,x')}\n  . This finetuned model is then used to define \n  \n    \n      \n        \n          LPIPS\n        \n        (\n        x\n        ,\n        \n          x\n          ′\n        \n        )\n        :=\n        ‖\n        \n          f\n          \n            θ\n          \n        \n        (\n        x\n        )\n        −\n        \n          f\n          \n            θ\n          \n        \n        (\n        \n          x\n          ′\n        \n        )\n        ‖\n      \n    \n    {\\displaystyle {\\text{LPIPS}}(x,x'):=\\|f_{\\theta }(x)-f_{\\theta }(x')\\|}\n  .Other evaluation methods are reviewed in.\n\nVariants\nThere is a veritable zoo of GAN variants. Some of the most prominent are as follows:\n\nConditional GAN\nConditional GANs are similar to standard GANs except they allow the model to conditionally generate samples based on additional information. For example, if we want to generate a cat face given a dog picture, we could use a conditional GAN.\nThe generator in a GAN game generates \n  \n    \n      \n        \n          μ\n          \n            G\n          \n        \n      \n    \n    {\\displaystyle \\mu _{G}}\n  , a probability distribution on the probability space \n  \n    \n      \n        Ω\n      \n    \n    {\\displaystyle \\Omega }\n  . This leads to the idea of a conditional GAN, where instead of generating one probability distribution on \n  \n    \n      \n        Ω\n      \n    \n    {\\displaystyle \\Omega }\n  , the generator generates a different probability distribution \n  \n    \n      \n        \n          μ\n          \n            G\n          \n        \n        (\n        c\n        )\n      \n    \n    {\\displaystyle \\mu _{G}(c)}\n   on \n  \n    \n      \n        Ω\n      \n    \n    {\\displaystyle \\Omega }\n  , for each given class label \n  \n    \n      \n        c\n      \n    \n    {\\displaystyle c}\n  .\nFor example, for generating images that look like ImageNet, the generator should be able to generate a picture of cat when given the class label \"cat\".\nIn the original paper, the authors noted that GAN can be trivially extended to conditional GAN by providing the labels to both the generator and the discriminator.\nConcretely, the conditional GAN game is just the GAN game with class labels provided:where \n  \n    \n      \n        \n          μ\n          \n            C\n          \n        \n      \n    \n    {\\displaystyle \\mu _{C}}\n   is a probability distribution over classes, \n  \n    \n      \n        \n          μ\n          \n            ref\n          \n        \n        (\n        c\n        )\n      \n    \n    {\\displaystyle \\mu _{\\text{ref}}(c)}\n   is the probability distribution of real images of class \n  \n    \n      \n        c\n      \n    \n    {\\displaystyle c}\n  , and \n  \n    \n      \n        \n          μ\n          \n            G\n          \n        \n        (\n        c\n        )\n      \n    \n    {\\displaystyle \\mu _{G}(c)}\n   the probability distribution of images generated by the generator when given class label \n  \n    \n      \n        c\n      \n    \n    {\\displaystyle c}\n  .\nIn 2017, a conditional GAN learned to generate 1000 image classes of ImageNet.\n\nGANs with alternative architectures\nThe GAN game is a general framework and can be run with any reasonable parametrization of the generator \n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n   and discriminator \n  \n    \n      \n        D\n      \n    \n    {\\displaystyle D}\n  . In the original paper, the authors demonstrated it using multilayer perceptron networks and convolutional neural networks. Many alternative architectures have been tried.\nDeep convolutional GAN (DCGAN): For both generator and discriminator, uses only deep networks consisting entirely of convolution-deconvolution layers, that is, fully convolutional networks.Self-attention GAN (SAGAN): Starts with the DCGAN, then adds residually-connected standard self-attention modules to the generator and discriminator.\nVariational autoencoder GAN (VAEGAN): Uses a variational autoencoder (VAE) for the generator.\nTransformer GAN (TransGAN): Uses the pure transformer architecture for both the generator and discriminator, entirely devoid of convolution-deconvolution layers.\nFlow-GAN: Uses flow-based generative model for the generator, allowing efficient computation of the likelihood function.\n\nGANs with alternative objectives\nMany GAN variants are merely obtained by changing the loss functions for the generator and discriminator.\nOriginal GAN:\nWe recast the original GAN objective into a form more convenient for comparison:\nOriginal GAN, non-saturating loss:\nThis objective for generator was recommended in the original paper for faster convergence.The effect of using this objective is analyzed in Section 2.2.2 of Arjovsky et al.Original GAN, maximum likelihood:\nwhere \n  \n    \n      \n        σ\n      \n    \n    {\\displaystyle \\sigma }\n   is the logistic function. When the discriminator is optimal, the generator gradient is the same as in maximum likelihood estimation, even though GAN cannot perform maximum likelihood estimation itself.Hinge loss GAN:Least squares GAN:where \n  \n    \n      \n        a\n        ,\n        b\n        ,\n        c\n      \n    \n    {\\displaystyle a,b,c}\n   are parameters to be chosen. The authors recommended \n  \n    \n      \n        a\n        =\n        −\n        1\n        ,\n        b\n        =\n        1\n        ,\n        c\n        =\n        0\n      \n    \n    {\\displaystyle a=-1,b=1,c=0}\n  .\n\nWasserstein GAN (WGAN)\nThe Wasserstein GAN modifies the GAN game at two points:\n\nThe discriminator's strategy set is the set of measurable functions of type \n  \n    \n      \n        D\n        :\n        Ω\n        →\n        \n          R\n        \n      \n    \n    {\\displaystyle D:\\Omega \\to \\mathbb {R} }\n   with bounded Lipschitz norm: \n  \n    \n      \n        ‖\n        D\n        \n          ‖\n          \n            L\n          \n        \n        ≤\n        K\n      \n    \n    {\\displaystyle \\|D\\|_{L}\\leq K}\n  , where \n  \n    \n      \n        K\n      \n    \n    {\\displaystyle K}\n   is a fixed positive constant.\nThe objective isOne of its purposes is to solve the problem of mode collapse (see above). The authors claim \"In no experiment did we see evidence of mode collapse for the WGAN algorithm\".\n\nGANs with more than 2 players\nAdversarial autoencoder\nAn adversarial autoencoder (AAE) is more autoencoder than GAN. The idea is to start with a plain autoencoder, but train a discriminator to discriminate the latent vectors from a reference distribution (often the normal distribution).\n\nInfoGAN\nIn conditional GAN, the generator receives both a noise vector \n  \n    \n      \n        z\n      \n    \n    {\\displaystyle z}\n   and a label \n  \n    \n      \n        c\n      \n    \n    {\\displaystyle c}\n  , and produces an image \n  \n    \n      \n        G\n        (\n        z\n        ,\n        c\n        )\n      \n    \n    {\\displaystyle G(z,c)}\n  . The discriminator receives image-label pairs \n  \n    \n      \n        (\n        x\n        ,\n        c\n        )\n      \n    \n    {\\displaystyle (x,c)}\n  , and computes \n  \n    \n      \n        D\n        (\n        x\n        ,\n        c\n        )\n      \n    \n    {\\displaystyle D(x,c)}\n  .\nWhen the training dataset is unlabeled, conditional GAN does not work directly.\nThe idea of InfoGAN is to decree that every latent vector in the latent space can be decomposed as \n  \n    \n      \n        (\n        z\n        ,\n        c\n        )\n      \n    \n    {\\displaystyle (z,c)}\n  : an incompressible noise part \n  \n    \n      \n        z\n      \n    \n    {\\displaystyle z}\n  , and an informative label part \n  \n    \n      \n        c\n      \n    \n    {\\displaystyle c}\n  , and encourage the generator to comply with the decree, by encouraging it to maximize \n  \n    \n      \n        I\n        (\n        c\n        ,\n        G\n        (\n        z\n        ,\n        c\n        )\n        )\n      \n    \n    {\\displaystyle I(c,G(z,c))}\n  , the mutual information between \n  \n    \n      \n        c\n      \n    \n    {\\displaystyle c}\n   and \n  \n    \n      \n        G\n        (\n        z\n        ,\n        c\n        )\n      \n    \n    {\\displaystyle G(z,c)}\n  , while making no demands on the mutual information \n  \n    \n      \n        z\n      \n    \n    {\\displaystyle z}\n   between \n  \n    \n      \n        G\n        (\n        z\n        ,\n        c\n        )\n      \n    \n    {\\displaystyle G(z,c)}\n  .\nUnfortunately, \n  \n    \n      \n        I\n        (\n        c\n        ,\n        G\n        (\n        z\n        ,\n        c\n        )\n        )\n      \n    \n    {\\displaystyle I(c,G(z,c))}\n   is intractable in general, The key idea of InfoGAN is Variational Mutual Information Maximization: indirectly maximize it by maximizing a lower boundwhere \n  \n    \n      \n        Q\n      \n    \n    {\\displaystyle Q}\n   ranges over all Markov kernels of type \n  \n    \n      \n        Q\n        :\n        \n          Ω\n          \n            Y\n          \n        \n        →\n        \n          \n            P\n          \n        \n        (\n        \n          Ω\n          \n            C\n          \n        \n        )\n      \n    \n    {\\displaystyle Q:\\Omega _{Y}\\to {\\mathcal {P}}(\\Omega _{C})}\n  .\n\nThe InfoGAN game is defined as follows:Three probability spaces define an InfoGAN game:\n\n  \n    \n      \n        (\n        \n          Ω\n          \n            X\n          \n        \n        ,\n        \n          μ\n          \n            ref\n          \n        \n        )\n      \n    \n    {\\displaystyle (\\Omega _{X},\\mu _{\\text{ref}})}\n  , the space of reference images.\n\n  \n    \n      \n        (\n        \n          Ω\n          \n            Z\n          \n        \n        ,\n        \n          μ\n          \n            Z\n          \n        \n        )\n      \n    \n    {\\displaystyle (\\Omega _{Z},\\mu _{Z})}\n  , the fixed random noise generator.\n\n  \n    \n      \n        (\n        \n          Ω\n          \n            C\n          \n        \n        ,\n        \n          μ\n          \n            C\n          \n        \n        )\n      \n    \n    {\\displaystyle (\\Omega _{C},\\mu _{C})}\n  , the fixed random information generator.There are 3 players in 2 teams: generator, Q, and discriminator. The generator and Q are on one team, and the discriminator on the other team.\nThe objective function iswhere \n  \n    \n      \n        \n          L\n          \n            G\n            A\n            N\n          \n        \n        (\n        G\n        ,\n        D\n        )\n        =\n        \n          \n            E\n          \n          \n            x\n            ∼\n            \n              μ\n              \n                ref\n              \n            \n            ,\n          \n        \n        [\n        ln\n        ⁡\n        D\n        (\n        x\n        )\n        ]\n        +\n        \n          \n            E\n          \n          \n            z\n            ∼\n            \n              μ\n              \n                Z\n              \n            \n          \n        \n        [\n        ln\n        ⁡\n        (\n        1\n        −\n        D\n        (\n        G\n        (\n        z\n        ,\n        c\n        )\n        )\n        )\n        ]\n      \n    \n    {\\displaystyle L_{GAN}(G,D)=\\mathbb {E} _{x\\sim \\mu _{\\text{ref}},}[\\ln D(x)]+\\mathbb {E} _{z\\sim \\mu _{Z}}[\\ln(1-D(G(z,c)))]}\n   is the original GAN game objective, and \n  \n    \n      \n        \n          \n            \n              I\n              ^\n            \n          \n        \n        (\n        G\n        ,\n        Q\n        )\n        =\n        \n          \n            E\n          \n          \n            z\n            ∼\n            \n              μ\n              \n                Z\n              \n            \n            ,\n            c\n            ∼\n            \n              μ\n              \n                C\n              \n            \n          \n        \n        [\n        ln\n        ⁡\n        Q\n        (\n        c\n        \n          |\n        \n        G\n        (\n        z\n        ,\n        c\n        )\n        )\n        ]\n      \n    \n    {\\displaystyle {\\hat {I}}(G,Q)=\\mathbb {E} _{z\\sim \\mu _{Z},c\\sim \\mu _{C}}[\\ln Q(c|G(z,c))]}\n  \n\nGenerator-Q team aims to minimize the objective, and discriminator aims to maximize it:\n\nBidirectional GAN (BiGAN)\nThe standard GAN generator is a function of type \n  \n    \n      \n        G\n        :\n        \n          Ω\n          \n            Z\n          \n        \n        →\n        \n          Ω\n          \n            X\n          \n        \n      \n    \n    {\\displaystyle G:\\Omega _{Z}\\to \\Omega _{X}}\n  , that is, it is a mapping from a latent space \n  \n    \n      \n        \n          Ω\n          \n            Z\n          \n        \n      \n    \n    {\\displaystyle \\Omega _{Z}}\n   to the image space \n  \n    \n      \n        \n          Ω\n          \n            X\n          \n        \n      \n    \n    {\\displaystyle \\Omega _{X}}\n  . This can be understood as a \"decoding\" process, whereby every latent vector \n  \n    \n      \n        z\n        ∈\n        \n          Ω\n          \n            Z\n          \n        \n      \n    \n    {\\displaystyle z\\in \\Omega _{Z}}\n   is a code for an image \n  \n    \n      \n        x\n        ∈\n        \n          Ω\n          \n            X\n          \n        \n      \n    \n    {\\displaystyle x\\in \\Omega _{X}}\n  , and the generator performs the decoding. This naturally leads to the idea of training another network that performs \"encoding\", creating an autoencoder out of the encoder-generator pair.\nAlready in the original paper, the authors noted that \"Learned approximate inference can be performed by training an auxiliary network to predict \n  \n    \n      \n        z\n      \n    \n    {\\displaystyle z}\n   given \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n  \". The bidirectional GAN architecture performs exactly this.\nThe BiGAN is defined as follows: Two probability spaces define a BiGAN game:\n\n  \n    \n      \n        (\n        \n          Ω\n          \n            X\n          \n        \n        ,\n        \n          μ\n          \n            X\n          \n        \n        )\n      \n    \n    {\\displaystyle (\\Omega _{X},\\mu _{X})}\n  , the space of reference images.\n\n  \n    \n      \n        (\n        \n          Ω\n          \n            Z\n          \n        \n        ,\n        \n          μ\n          \n            Z\n          \n        \n        )\n      \n    \n    {\\displaystyle (\\Omega _{Z},\\mu _{Z})}\n  , the latent space.There are 3 players in 2 teams: generator, encoder, and discriminator. The generator and encoder are on one team, and the discriminator on the other team.\nThe generator's strategies are functions \n  \n    \n      \n        G\n        :\n        \n          Ω\n          \n            Z\n          \n        \n        →\n        \n          Ω\n          \n            X\n          \n        \n      \n    \n    {\\displaystyle G:\\Omega _{Z}\\to \\Omega _{X}}\n  , and the encoder's strategies are functions \n  \n    \n      \n        E\n        :\n        \n          Ω\n          \n            X\n          \n        \n        →\n        \n          Ω\n          \n            Z\n          \n        \n      \n    \n    {\\displaystyle E:\\Omega _{X}\\to \\Omega _{Z}}\n  . The discriminator's strategies are functions \n  \n    \n      \n        D\n        :\n        \n          Ω\n          \n            X\n          \n        \n        →\n        [\n        0\n        ,\n        1\n        ]\n      \n    \n    {\\displaystyle D:\\Omega _{X}\\to [0,1]}\n  .\nThe objective function is\n\nGenerator-encoder team aims to minimize the objective, and discriminator aims to maximize it: In the paper, they gave a more abstract definition of the objective as:where \n  \n    \n      \n        \n          μ\n          \n            E\n            ,\n            X\n          \n        \n        (\n        d\n        x\n        ,\n        d\n        z\n        )\n        =\n        \n          μ\n          \n            X\n          \n        \n        (\n        d\n        x\n        )\n        ⋅\n        \n          δ\n          \n            E\n            (\n            x\n            )\n          \n        \n        (\n        d\n        z\n        )\n      \n    \n    {\\displaystyle \\mu _{E,X}(dx,dz)=\\mu _{X}(dx)\\cdot \\delta _{E(x)}(dz)}\n   is the probability distribution on \n  \n    \n      \n        \n          Ω\n          \n            X\n          \n        \n        ×\n        \n          Ω\n          \n            Z\n          \n        \n      \n    \n    {\\displaystyle \\Omega _{X}\\times \\Omega _{Z}}\n   obtained by pushing \n  \n    \n      \n        \n          μ\n          \n            X\n          \n        \n      \n    \n    {\\displaystyle \\mu _{X}}\n   forward via \n  \n    \n      \n        x\n        ↦\n        (\n        x\n        ,\n        E\n        (\n        x\n        )\n        )\n      \n    \n    {\\displaystyle x\\mapsto (x,E(x))}\n  , and \n  \n    \n      \n        \n          μ\n          \n            G\n            ,\n            Z\n          \n        \n        (\n        d\n        x\n        ,\n        d\n        z\n        )\n        =\n        \n          δ\n          \n            G\n            (\n            z\n            )\n          \n        \n        (\n        d\n        x\n        )\n        ⋅\n        \n          μ\n          \n            Z\n          \n        \n        (\n        d\n        z\n        )\n      \n    \n    {\\displaystyle \\mu _{G,Z}(dx,dz)=\\delta _{G(z)}(dx)\\cdot \\mu _{Z}(dz)}\n   is the probability distribution on \n  \n    \n      \n        \n          Ω\n          \n            X\n          \n        \n        ×\n        \n          Ω\n          \n            Z\n          \n        \n      \n    \n    {\\displaystyle \\Omega _{X}\\times \\Omega _{Z}}\n   obtained by pushing \n  \n    \n      \n        \n          μ\n          \n            Z\n          \n        \n      \n    \n    {\\displaystyle \\mu _{Z}}\n   forward via \n  \n    \n      \n        z\n        ↦\n        (\n        G\n        (\n        x\n        )\n        ,\n        z\n        )\n      \n    \n    {\\displaystyle z\\mapsto (G(x),z)}\n  .\nApplications of bidirectional models include semi-supervised learning, interpretable machine learning, and neural machine translation.\n\nCycleGAN\nCycleGAN is an architecture for performing translations between two domains, such as between photos of horses and photos of zebras, or photos of night cities and photos of day cities.\n\nThe CycleGAN game is defined as follows:There are two probability spaces \n  \n    \n      \n        (\n        \n          Ω\n          \n            X\n          \n        \n        ,\n        \n          μ\n          \n            X\n          \n        \n        )\n        ,\n        (\n        \n          Ω\n          \n            Y\n          \n        \n        ,\n        \n          μ\n          \n            Y\n          \n        \n        )\n      \n    \n    {\\displaystyle (\\Omega _{X},\\mu _{X}),(\\Omega _{Y},\\mu _{Y})}\n  , corresponding to the two domains needed for translations fore-and-back.\nThere are 4 players in 2 teams: generators \n  \n    \n      \n        \n          G\n          \n            X\n          \n        \n        :\n        \n          Ω\n          \n            X\n          \n        \n        →\n        \n          Ω\n          \n            Y\n          \n        \n        ,\n        \n          G\n          \n            Y\n          \n        \n        :\n        \n          Ω\n          \n            Y\n          \n        \n        →\n        \n          Ω\n          \n            X\n          \n        \n      \n    \n    {\\displaystyle G_{X}:\\Omega _{X}\\to \\Omega _{Y},G_{Y}:\\Omega _{Y}\\to \\Omega _{X}}\n  , and discriminators \n  \n    \n      \n        \n          D\n          \n            X\n          \n        \n        :\n        \n          Ω\n          \n            X\n          \n        \n        →\n        [\n        0\n        ,\n        1\n        ]\n        ,\n        \n          D\n          \n            Y\n          \n        \n        :\n        \n          Ω\n          \n            Y\n          \n        \n        →\n        [\n        0\n        ,\n        1\n        ]\n      \n    \n    {\\displaystyle D_{X}:\\Omega _{X}\\to [0,1],D_{Y}:\\Omega _{Y}\\to [0,1]}\n  .\nThe objective function is\n\nwhere \n  \n    \n      \n        λ\n      \n    \n    {\\displaystyle \\lambda }\n   is a positive adjustable parameter, \n  \n    \n      \n        \n          L\n          \n            G\n            A\n            N\n          \n        \n      \n    \n    {\\displaystyle L_{GAN}}\n   is the GAN game objective, and \n  \n    \n      \n        \n          L\n          \n            c\n            y\n            c\n            l\n            e\n          \n        \n      \n    \n    {\\displaystyle L_{cycle}}\n   is the cycle consistency loss:The generators aim to minimize the objective, and the discriminators aim to maximize it:  Unlike previous work like pix2pix, which requires paired training data, cycleGAN requires no paired data. For example, to train a pix2pix model to turn a summer scenery photo to winter scenery photo and back, the dataset must contain pairs of the same place in summer and winter, shot at the same angle; cycleGAN would only need a set of summer scenery photos, and an unrelated set of winter scenery photos.\n\nGANs with particularly large or small scales\nBigGAN\nThe BigGAN is essentially a self-attention GAN trained on a large scale (up to 80 million parameters) to generate large images of ImageNet (up to 512 x 512 resolution), with numerous engineering tricks to make it converge.\n\nInvertible data augmentation\nWhen there is insufficient training data, the reference distribution \n  \n    \n      \n        \n          μ\n          \n            ref\n          \n        \n      \n    \n    {\\displaystyle \\mu _{\\text{ref}}}\n   cannot be well-approximated by the empirical distribution given by the training dataset. In such cases, data augmentation can be applied, to allow training GAN on smaller datasets. Naïve data augmentation, however, brings its problems.\nConsider the original GAN game, slightly reformulated as follows:Now we use data augmentation by randomly sampling semantic-preserving transforms \n  \n    \n      \n        T\n        :\n        Ω\n        →\n        Ω\n      \n    \n    {\\displaystyle T:\\Omega \\to \\Omega }\n   and applying them to the dataset, to obtain the reformulated GAN game:This is equivalent to a GAN game with a different distribution \n  \n    \n      \n        \n          μ\n          \n            ref\n          \n          ′\n        \n      \n    \n    {\\displaystyle \\mu _{\\text{ref}}'}\n  , sampled by \n  \n    \n      \n        T\n        (\n        x\n        )\n      \n    \n    {\\displaystyle T(x)}\n  , with \n  \n    \n      \n        x\n        ∼\n        \n          μ\n          \n            ref\n          \n        \n        ,\n        T\n        ∼\n        \n          μ\n          \n            t\n            r\n            a\n            n\n            s\n          \n        \n      \n    \n    {\\displaystyle x\\sim \\mu _{\\text{ref}},T\\sim \\mu _{trans}}\n  . For example, if \n  \n    \n      \n        \n          μ\n          \n            ref\n          \n        \n      \n    \n    {\\displaystyle \\mu _{\\text{ref}}}\n   is the distribution of images in ImageNet, and \n  \n    \n      \n        \n          μ\n          \n            t\n            r\n            a\n            n\n            s\n          \n        \n      \n    \n    {\\displaystyle \\mu _{trans}}\n   samples identity-transform with probability 0.5, and horizontal-reflection with probability 0.5, then \n  \n    \n      \n        \n          μ\n          \n            ref\n          \n          ′\n        \n      \n    \n    {\\displaystyle \\mu _{\\text{ref}}'}\n   is the distribution of images in ImageNet and horizontally-reflected ImageNet, combined.\nThe result of such training would be a generator that mimics \n  \n    \n      \n        \n          μ\n          \n            ref\n          \n          ′\n        \n      \n    \n    {\\displaystyle \\mu _{\\text{ref}}'}\n  . For example, it would generate images that look like they are randomly cropped, if the data augmentation uses random cropping.\nThe solution is to apply data augmentation to both generated and real images:The authors demonstrated high-quality generation using just 100-picture-large datasets.The StyleGAN-2-ADA paper points out a further point on data augmentation: it must be invertible. Continue with the example of generating ImageNet pictures. If the data augmentation is \"randomly rotate the picture by 0, 90, 180, 270 degrees with equal probability\", then there is no way for the generator to know which is the true orientation: Consider two generators \n  \n    \n      \n        G\n        ,\n        \n          G\n          ′\n        \n      \n    \n    {\\displaystyle G,G'}\n  , such that for any latent \n  \n    \n      \n        z\n      \n    \n    {\\displaystyle z}\n  , the generated image \n  \n    \n      \n        G\n        (\n        z\n        )\n      \n    \n    {\\displaystyle G(z)}\n   is a 90-degree rotation of \n  \n    \n      \n        \n          G\n          ′\n        \n        (\n        z\n        )\n      \n    \n    {\\displaystyle G'(z)}\n  . They would have exactly the same expected loss, and so neither is preferred over the other.\nThe solution is to only use invertible data augmentation: instead of \"randomly rotate the picture by 0, 90, 180, 270 degrees with equal probability\", use \"randomly rotate the picture by 90, 180, 270 degrees with 0.1 probability, and keep the picture as it is with 0.7 probability\". This way, the generator is still rewarded  to keep images oriented the same way as un-augmented ImageNet pictures.\nAbstractly, the effect of randomly sampling transformations \n  \n    \n      \n        T\n        :\n        Ω\n        →\n        Ω\n      \n    \n    {\\displaystyle T:\\Omega \\to \\Omega }\n   from the distribution \n  \n    \n      \n        \n          μ\n          \n            t\n            r\n            a\n            n\n            s\n          \n        \n      \n    \n    {\\displaystyle \\mu _{trans}}\n   is to define a Markov kernel \n  \n    \n      \n        \n          K\n          \n            t\n            r\n            a\n            n\n            s\n          \n        \n        :\n        Ω\n        →\n        \n          \n            P\n          \n        \n        (\n        Ω\n        )\n      \n    \n    {\\displaystyle K_{trans}:\\Omega \\to {\\mathcal {P}}(\\Omega )}\n  . Then, the data-augmented GAN game pushes the generator to find some \n  \n    \n      \n        \n          \n            \n              \n                μ\n                ^\n              \n            \n          \n          \n            G\n          \n        \n        ∈\n        \n          \n            P\n          \n        \n        (\n        Ω\n        )\n      \n    \n    {\\displaystyle {\\hat {\\mu }}_{G}\\in {\\mathcal {P}}(\\Omega )}\n  , such that where \n  \n    \n      \n        ∗\n      \n    \n    {\\displaystyle *}\n   is the Markov kernel convolution.\nA data-augmentation method is defined to be invertible if its Markov kernel \n  \n    \n      \n        \n          K\n          \n            t\n            r\n            a\n            n\n            s\n          \n        \n      \n    \n    {\\displaystyle K_{trans}}\n   satisfiesImmediately by definition, we see that composing multiple invertible data-augmentation methods results in yet another invertible method. Also by definition, if the data-augmentation method is invertible, then using it in a GAN game does not change the optimal strategy \n  \n    \n      \n        \n          \n            \n              \n                μ\n                ^\n              \n            \n          \n          \n            G\n          \n        \n      \n    \n    {\\displaystyle {\\hat {\\mu }}_{G}}\n   for the generator, which is still \n  \n    \n      \n        \n          μ\n          \n            ref\n          \n        \n      \n    \n    {\\displaystyle \\mu _{\\text{ref}}}\n  .\nThere are two prototypical examples of invertible Markov kernels:\nDiscrete case: Invertible stochastic matrices, when \n  \n    \n      \n        Ω\n      \n    \n    {\\displaystyle \\Omega }\n   is finite.\nFor example, if \n  \n    \n      \n        Ω\n        =\n        {\n        ↑\n        ,\n        ↓\n        ,\n        ←\n        ,\n        →\n        }\n      \n    \n    {\\displaystyle \\Omega =\\{\\uparrow ,\\downarrow ,\\leftarrow ,\\rightarrow \\}}\n   is the set of four images of an arrow, pointing in 4 directions, and the data augmentation is \"randomly rotate the picture by 90, 180, 270 degrees with probability \n  \n    \n      \n        p\n      \n    \n    {\\displaystyle p}\n  , and keep the picture as it is with probability \n  \n    \n      \n        (\n        1\n        −\n        3\n        p\n        )\n      \n    \n    {\\displaystyle (1-3p)}\n  \", then the Markov kernel \n  \n    \n      \n        \n          K\n          \n            t\n            r\n            a\n            n\n            s\n          \n        \n      \n    \n    {\\displaystyle K_{trans}}\n   can be represented as a stochastic matrix: and \n  \n    \n      \n        \n          K\n          \n            t\n            r\n            a\n            n\n            s\n          \n        \n      \n    \n    {\\displaystyle K_{trans}}\n   is an invertible kernel iff \n  \n    \n      \n        [\n        \n          K\n          \n            t\n            r\n            a\n            n\n            s\n          \n        \n        ]\n      \n    \n    {\\displaystyle [K_{trans}]}\n   is an invertible matrix, that is, \n  \n    \n      \n        p\n        ≠\n        1\n        \n          /\n        \n        4\n      \n    \n    {\\displaystyle p\\neq 1/4}\n  .\nContinuous case: The gaussian kernel, when \n  \n    \n      \n        Ω\n        =\n        \n          \n            R\n          \n          \n            n\n          \n        \n      \n    \n    {\\displaystyle \\Omega =\\mathbb {R} ^{n}}\n   for some \n  \n    \n      \n        n\n        ≥\n        1\n      \n    \n    {\\displaystyle n\\geq 1}\n  .\nFor example, if \n  \n    \n      \n        Ω\n        =\n        \n          \n            R\n          \n          \n            \n              256\n              \n                2\n              \n            \n          \n        \n      \n    \n    {\\displaystyle \\Omega =\\mathbb {R} ^{256^{2}}}\n   is the space of 256x256 images, and the data-augmentation method is \"generate a gaussian noise \n  \n    \n      \n        z\n        ∼\n        \n          \n            N\n          \n        \n        (\n        0\n        ,\n        \n          I\n          \n            \n              256\n              \n                2\n              \n            \n          \n        \n        )\n      \n    \n    {\\displaystyle z\\sim {\\mathcal {N}}(0,I_{256^{2}})}\n  , then add \n  \n    \n      \n        ϵ\n        z\n      \n    \n    {\\displaystyle \\epsilon z}\n   to the image\", then \n  \n    \n      \n        \n          K\n          \n            t\n            r\n            a\n            n\n            s\n          \n        \n      \n    \n    {\\displaystyle K_{trans}}\n   is just convolution by the density function of \n  \n    \n      \n        \n          \n            N\n          \n        \n        (\n        0\n        ,\n        \n          ϵ\n          \n            2\n          \n        \n        \n          I\n          \n            \n              256\n              \n                2\n              \n            \n          \n        \n        )\n      \n    \n    {\\displaystyle {\\mathcal {N}}(0,\\epsilon ^{2}I_{256^{2}})}\n  . This is invertible, because convolution by a gaussian is just convolution by the heat kernel, so given any \n  \n    \n      \n        μ\n        ∈\n        \n          \n            P\n          \n        \n        (\n        \n          \n            R\n          \n          \n            n\n          \n        \n        )\n      \n    \n    {\\displaystyle \\mu \\in {\\mathcal {P}}(\\mathbb {R} ^{n})}\n  , the convolved distribution \n  \n    \n      \n        \n          K\n          \n            t\n            r\n            a\n            n\n            s\n          \n        \n        ∗\n        μ\n      \n    \n    {\\displaystyle K_{trans}*\\mu }\n   can be obtained by heating up \n  \n    \n      \n        \n          \n            R\n          \n          \n            n\n          \n        \n      \n    \n    {\\displaystyle \\mathbb {R} ^{n}}\n   precisely according to \n  \n    \n      \n        μ\n      \n    \n    {\\displaystyle \\mu }\n  , then wait for time \n  \n    \n      \n        \n          ϵ\n          \n            2\n          \n        \n        \n          /\n        \n        4\n      \n    \n    {\\displaystyle \\epsilon ^{2}/4}\n  . With that, we can recover \n  \n    \n      \n        μ\n      \n    \n    {\\displaystyle \\mu }\n   by running the heat equation backwards in time for \n  \n    \n      \n        \n          ϵ\n          \n            2\n          \n        \n        \n          /\n        \n        4\n      \n    \n    {\\displaystyle \\epsilon ^{2}/4}\n  .\nMore examples of invertible data augmentations are found in the paper.\n\nSinGAN\nSinGAN pushes data augmentation to the limit, by using only a single image as training data and performing data augmentation on it. The GAN architecture is adapted to this training method by using a multi-scale pipeline.\nThe generator \n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n   is decomposed into a pyramid of generators \n  \n    \n      \n        G\n        =\n        \n          G\n          \n            1\n          \n        \n        ∘\n        \n          G\n          \n            2\n          \n        \n        ∘\n        ⋯\n        ∘\n        \n          G\n          \n            N\n          \n        \n      \n    \n    {\\displaystyle G=G_{1}\\circ G_{2}\\circ \\cdots \\circ G_{N}}\n  , with the lowest one generating the image \n  \n    \n      \n        \n          G\n          \n            N\n          \n        \n        (\n        \n          z\n          \n            N\n          \n        \n        )\n      \n    \n    {\\displaystyle G_{N}(z_{N})}\n   at the lowest resolution, then the generated image is scaled up to \n  \n    \n      \n        r\n        (\n        \n          G\n          \n            N\n          \n        \n        (\n        \n          z\n          \n            N\n          \n        \n        )\n        )\n      \n    \n    {\\displaystyle r(G_{N}(z_{N}))}\n  , and fed to the next level to generate an image \n  \n    \n      \n        \n          G\n          \n            N\n            −\n            1\n          \n        \n        (\n        \n          z\n          \n            N\n            −\n            1\n          \n        \n        +\n        r\n        (\n        \n          G\n          \n            N\n          \n        \n        (\n        \n          z\n          \n            N\n          \n        \n        )\n        )\n        )\n      \n    \n    {\\displaystyle G_{N-1}(z_{N-1}+r(G_{N}(z_{N})))}\n   at a higher resolution, and so on. The discriminator is decomposed into a pyramid as well.\n\nStyleGAN series\nThe StyleGAN family is a series of architectures published by Nvidia's research division.\n\nProgressive GAN\nProgressive GAN is a method for training GAN for large-scale image generation stably, by growing a GAN generator from small to large scale in a pyramidal fashion. Like SinGAN, it decomposes the generator as\n  \n    \n      \n        G\n        =\n        \n          G\n          \n            1\n          \n        \n        ∘\n        \n          G\n          \n            2\n          \n        \n        ∘\n        ⋯\n        ∘\n        \n          G\n          \n            N\n          \n        \n      \n    \n    {\\displaystyle G=G_{1}\\circ G_{2}\\circ \\cdots \\circ G_{N}}\n  , and the discriminator as \n  \n    \n      \n        D\n        =\n        \n          D\n          \n            1\n          \n        \n        ∘\n        \n          D\n          \n            2\n          \n        \n        ∘\n        ⋯\n        ∘\n        \n          D\n          \n            N\n          \n        \n      \n    \n    {\\displaystyle D=D_{1}\\circ D_{2}\\circ \\cdots \\circ D_{N}}\n  .\nDuring training, at first only \n  \n    \n      \n        \n          G\n          \n            N\n          \n        \n        ,\n        \n          D\n          \n            N\n          \n        \n      \n    \n    {\\displaystyle G_{N},D_{N}}\n   are used in a GAN game to generate 4x4 images. Then \n  \n    \n      \n        \n          G\n          \n            N\n            −\n            1\n          \n        \n        ,\n        \n          D\n          \n            N\n            −\n            1\n          \n        \n      \n    \n    {\\displaystyle G_{N-1},D_{N-1}}\n   are added to reach the second stage of GAN game, to generate 8x8 images, and so on, until we reach a GAN game to generate 1024x1024 images.\nTo avoid shock between stages of the GAN game, each new layer is \"blended in\" (Figure 2 of the paper). For example, this is how the second stage GAN game starts:\n\nJust before, the GAN game consists of the pair \n  \n    \n      \n        \n          G\n          \n            N\n          \n        \n        ,\n        \n          D\n          \n            N\n          \n        \n      \n    \n    {\\displaystyle G_{N},D_{N}}\n   generating and discriminating 4x4 images.\nJust after, the GAN game consists of the pair \n  \n    \n      \n        (\n        (\n        1\n        −\n        α\n        )\n        +\n        α\n        ⋅\n        \n          G\n          \n            N\n            −\n            1\n          \n        \n        )\n        ∘\n        u\n        ∘\n        \n          G\n          \n            N\n          \n        \n        ,\n        \n          D\n          \n            N\n          \n        \n        ∘\n        d\n        ∘\n        (\n        (\n        1\n        −\n        α\n        )\n        +\n        α\n        ⋅\n        \n          D\n          \n            N\n            −\n            1\n          \n        \n        )\n      \n    \n    {\\displaystyle ((1-\\alpha )+\\alpha \\cdot G_{N-1})\\circ u\\circ G_{N},D_{N}\\circ d\\circ ((1-\\alpha )+\\alpha \\cdot D_{N-1})}\n   generating and discriminating 8x8 images. Here, the functions \n  \n    \n      \n        u\n        ,\n        d\n      \n    \n    {\\displaystyle u,d}\n   are image up- and down-sampling functions, and \n  \n    \n      \n        α\n      \n    \n    {\\displaystyle \\alpha }\n   is a blend-in factor (much like an alpha in image composing) that smoothly glides from 0 to 1.\n\nStyleGAN-1\nStyleGAN-1 is designed as a combination of Progressive GAN with neural style transfer.The key architectural choice of StyleGAN-1 is a progressive growth mechanism, similar to Progressive GAN. Each generated image starts as a constant \n  \n    \n      \n        4\n        ×\n        4\n        ×\n        512\n      \n    \n    {\\displaystyle 4\\times 4\\times 512}\n   array, and repeatedly passed through style blocks. Each style block applies a \"style latent vector\" via affine transform (\"adaptive instance normalization\"), similar to how neural style transfer uses Gramian matrix. It then adds noise, and normalize (subtract the mean, then divide by the variance).\nAt training time, usually only one style latent vector is used per image generated, but sometimes two (\"mixing regularization\") in order to encourage each style block to independently perform its stylization without expecting help from other style blocks (since they might receive an entirely different style latent vector).\nAfter training, multiple style latent vectors can be fed into each style block. Those fed to the lower layers control the large-scale styles, and those fed to the higher layers control the fine-detail styles.\nStyle-mixing between two images \n  \n    \n      \n        x\n        ,\n        \n          x\n          ′\n        \n      \n    \n    {\\displaystyle x,x'}\n   can be performed as well. First, run a gradient descent to find \n  \n    \n      \n        z\n        ,\n        \n          z\n          ′\n        \n      \n    \n    {\\displaystyle z,z'}\n   such that \n  \n    \n      \n        G\n        (\n        z\n        )\n        ≈\n        x\n        ,\n        G\n        (\n        \n          z\n          ′\n        \n        )\n        ≈\n        \n          x\n          ′\n        \n      \n    \n    {\\displaystyle G(z)\\approx x,G(z')\\approx x'}\n  . This is called \"projecting an image back to style latent space\". Then, \n  \n    \n      \n        z\n      \n    \n    {\\displaystyle z}\n   can be fed to the lower style blocks, and \n  \n    \n      \n        \n          z\n          ′\n        \n      \n    \n    {\\displaystyle z'}\n   to the higher style blocks, to generate a composite image that has the large-scale style of \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n  , and the fine-detail style of \n  \n    \n      \n        \n          x\n          ′\n        \n      \n    \n    {\\displaystyle x'}\n  . Multiple images can also be composed this way.\n\nStyleGAN-2\nStyleGAN-2 improves upon StyleGAN-1, by using the style latent vector to transform the convolution layer's weights instead, thus solving the \"blob\" problem.This was updated by the StyleGAN-2-ADA (\"ADA\" stands for \"adaptive\"), which uses invertible data augmentation as described above. It also tunes the amount of data augmentation applied by starting at zero, and gradually increasing it until an \"overfitting heuristic\" reaches a target level, thus the name \"adaptive\".\n\nStyleGAN-3\nStyleGAN-3 improves upon StyleGAN-2 by solving the \"texture sticking\" problem, which can be seen in the official videos. They analyzed the problem by the Nyquist–Shannon sampling theorem, and argued that the layers in the generator learned to exploit the high-frequency signal in the pixels they operate upon.\nTo solve this, they proposed imposing strict lowpass filters between each generator's layers, so that the generator is forced to operate on the pixels in a way faithful to the continuous signals they represent, rather than operate on them as merely discrete signals. They further imposed rotational and translational invariance by using more signal filters. The resulting StyleGAN-3 is able to solve the texture sticking problem, as well as generating images that rotate and translate smoothly.\n\nApplications\nGAN applications have increased rapidly.\n\nFashion, art and advertising\nGANs can be used to generate art; The Verge wrote in March 2019 that \"The images created by GANs have become the defining look of contemporary AI art.\" GANs can also be used to inpaint photographs or create photos of imaginary fashion models, with no need to hire a model, photographer or makeup artist, or pay for a studio and transportation. GANs have also been used for virtual shadow generation.\n\nInteractive Media\nIn 2020, Artbreeder was used to create the main antagonist in the sequel to the psychological web horror series Ben Drowned. The author would later go on to praise GAN applications for their ability to help generate assets for independent artists who are short on budget and manpower.\n\nScience\nGANs can improve astronomical images and simulate gravitational lensing for dark matter research. They were used in 2019 to successfully model the distribution of dark matter in a particular direction in space and to predict the gravitational lensing that will occur.GANs have been proposed as a fast and accurate way of modeling high energy jet formation and modeling showers through calorimeters of high-energy physics experiments. GANs have also been trained to accurately approximate bottlenecks in computationally expensive simulations of particle physics experiments. Applications in the context of present and proposed CERN experiments have demonstrated the potential of these methods for accelerating simulation and/or improving simulation fidelity.\n\nVideo games\nIn 2018, GANs reached the video game modding community, as a method of up-scaling low-resolution 2D textures in old video games by recreating them in 4k or higher resolutions via image training, and then down-sampling them to fit the game's native resolution (with results resembling the supersampling method of anti-aliasing). With proper training, GANs provide a clearer and sharper 2D texture image magnitudes higher in quality than the original, while fully retaining the original's level of details, colors, etc. Known examples of extensive GAN usage include Final Fantasy VIII, Final Fantasy IX, Resident Evil REmake HD Remaster, and Max Payne.\n\nAI-generated video\nArtificial intelligence art for video uses AI to generate video from text as Text-to-Video model\n\nAudio synthesis\nConcerns about malicious applications\nConcerns have been raised about the potential use of GAN-based human image synthesis for sinister purposes, e.g., to produce fake, possibly incriminating, photographs and videos.\nGANs can be used to generate unique, realistic profile photos of people who do not exist, in order to automate creation of fake social media profiles.In 2019 the state of California considered and passed on October 3, 2019, the bill AB-602, which bans the use of human image synthesis technologies to make fake pornography without the consent of the people depicted, and bill AB-730, which prohibits distribution of manipulated videos of a political candidate within 60 days of an election. Both bills were authored by Assembly member Marc Berman and signed by Governor Gavin Newsom. The laws went into effect in 2020.DARPA's Media Forensics program studies ways to counteract fake media, including fake media produced using GANs.\n\nTransfer learning\nState-of-art transfer learning research use GANs to enforce the alignment of the latent feature space, such as in deep reinforcement learning. This works by feeding the embeddings of the source and target task to the discriminator which tries to guess the context. The resulting loss is then (inversely) backpropagated through the encoder.\n\nMiscellaneous applications\nGAN can be used to detect glaucomatous images helping the early diagnosis which is essential to avoid partial or total loss\nof vision.GANs that produce photorealistic images can be used to visualize interior design, industrial design, shoes, bags, and clothing items or items for computer games' scenes. Such networks were reported to be used by Facebook.GANs have been used to create forensic facial reconstructions of deceased historical figures.GANs can reconstruct 3D models of objects from images, generate novel objects as 3D point clouds, and model patterns of motion in video.GANs can be used to age face photographs to show how an individual's appearance might change with age.GANs can also be used to inpaint missing features in maps, transfer map styles in cartography or augment street view imagery.Relevance feedback on GANs can be used to generate images and replace image search systems.A variation of the GANs is used in training a network to generate optimal control inputs to nonlinear dynamical systems. Where the discriminatory network is known as a critic that checks the optimality of the solution and the generative network is known as an Adaptive network that generates the optimal control. The critic and adaptive network train each other to approximate a nonlinear optimal control.GANs have been used to visualize the effect that climate change will have on specific houses.A GAN model called Speech2Face can reconstruct an image of a person's face after listening to their voice.In 2016 GANs were used to generate new molecules for a variety of protein targets implicated in cancer, inflammation, and fibrosis. In 2019 GAN-generated molecules were validated experimentally all the way into mice.Whereas the majority of GAN applications are in image processing, the work has also been done with time-series data. For example, recurrent GANs (R-GANs) have been used to generate energy data for machine learning.\n\nHistory\nIn 1991, Juergen Schmidhuber published generative and adversarial neural networks that contest with each other in the form of a zero-sum game, where one network's gain is the other network's loss. The first network is a generative model with stochasticity that models a probability distribution over output patterns. The second network learns by gradient descent to predict the reactions of the environment to these patterns. This was called \"artificial curiosity.\" For modern GANs (2014), the environmental reaction is 1 or 0 depending on whether the first network's output is in a given set.Other people had similar ideas but did not develop them similarly. An idea involving adversarial networks was published in a 2010 blog post by Olli Niemitalo. This idea was never implemented and did not involve stochasticity in the generator and thus was not a generative model. It is now known as a conditional GAN or cGAN. An idea similar to GANs was used to model animal behavior by Li, Gauci and Gross in 2013.Another inspiration for GANs was noise-contrastive estimation, which uses the same loss function as GANs and which Goodfellow studied during his PhD in 2010–2014.\nAdversarial machine learning has other uses besides generative modeling and can be applied to models other than neural networks. In control theory, adversarial learning based on neural networks was used in 2006 to train robust controllers in a game theoretic sense, by alternating the iterations between a minimizer policy, the controller, and a maximizer policy, the disturbance.In 2017, a GAN was used for image enhancement focusing on realistic textures rather than pixel-accuracy, producing a higher image quality at high magnification. In 2017, the first faces were generated. These were exhibited in February 2018 at the Grand Palais. Faces generated by StyleGAN in 2019 drew comparisons with Deepfakes.Beginning in 2017, GAN technology began to make its presence felt in the fine arts arena with the appearance of a newly developed implementation which was said to have crossed the threshold of being able to generate unique and appealing abstract paintings, and thus dubbed a \"CAN\", for \"creative adversarial network\". A GAN system was used to create the 2018 painting Edmond de Belamy, which sold for US$432,500. An early 2019 article by members of the original CAN team discussed further progress with that system, and gave consideration as well to the overall prospects for an AI-enabled art.In May 2019, researchers at Samsung demonstrated a GAN-based system that produces videos of a person speaking, given only a single photo of that person.In August 2019, a large dataset consisting of 12,197 MIDI songs each with paired lyrics and melody alignment was created for neural melody generation from lyrics using conditional GAN-LSTM (refer to sources at GitHub AI Melody Generation from Lyrics).In May 2020, Nvidia researchers taught an AI system (termed \"GameGAN\") to recreate the game of Pac-Man simply by watching it being played.\n\nReferences\nExternal links\nKnight, Will. \"5 Big Predictions for Artificial Intelligence in 2017\". MIT Technology Review. Retrieved January 5, 2017.\nKarras, Tero; Laine, Samuli; Aila, Timo (2018). \"A Style-Based Generator Architecture for Generative Adversarial Networks\". arXiv:1812.04948 [cs.NE].\nThis Person Does Not Exist –  photorealistic images of people who do not exist, generated by StyleGAN\nThis Cat Does Not Exist Archived March 5, 2019, at the Wayback Machine –  photorealistic images of cats who do not exist, generated by StyleGAN\nWang, Zhengwei; She, Qi; Ward, Tomas E. (2019). \"Generative Adversarial Networks in Computer Vision: A Survey and Taxonomy\". arXiv:1906.01529 [cs.LG].",
    "Robotics": "Robotics is the interdisciplinary study and practice of the design, construction, operation, and use of robots.Within mechanical engineering, robotics is the design and construction of the physical structures of robots, while in computer science, robotics focuses on robotic automation algorithms. Other disciplines contributing to robotics include electrical, control, software, information, electronic, telecommunication, computer, mechatronic, materials and biomedical engineering. \nThe goal of most robotics is to design machines that can help and assist humans. Many robots are built to do jobs that are hazardous to people, such as finding survivors in unstable ruins, and exploring space, mines and shipwrecks. Others replace people in jobs that are boring, repetitive, or unpleasant, such as cleaning, monitoring, transporting, and assembling. Today, robotics is a rapidly growing field, as technological advances continue; researching, designing, and building new robots serve various practical purposes.\n\nRobotics aspects\nThere are many types of robots; they are used in many different environments and for many different uses. Although diverse in application and form, they all share three basic aspects when it comes to their design and construction:\n\nMechanical construction: a frame, form or shape designed to achieve a particular task. For example, a robot designed to travel across heavy dirt or mud might use caterpillar tracks. Origami inspired robots can sense and analyze in extreme environments. The mechanical aspect of the robot is mostly the creator's solution to completing the assigned task and dealing with the physics of the environment around it. Form follows function.\nElectrical components that power and control the machinery. For example, the robot with caterpillar tracks would need some kind of power to move the tracker treads. That power comes in the form of electricity, which will have to travel through a wire and originate from a battery, a basic electrical circuit. Even petrol-powered machines that get their power mainly from petrol still require an electric current to start the combustion process which is why most petrol-powered machines like cars, have batteries. The electrical aspect of robots is used for movement (through motors), sensing (where electrical signals are used to measure things like heat, sound, position, and energy status), and operation (robots need some level of electrical energy supplied to their motors and sensors in order to activate and perform basic operations)\nSoftware. A program is how a robot decides when or how to do something. In the caterpillar track example, a robot that needs to move across a muddy road may have the correct mechanical construction and receive the correct amount of power from its battery, but would not be able to go anywhere without a program telling it to move. Programs are the core essence of a robot, it could have excellent mechanical and electrical construction, but if its program is poorly structured, its performance will be very poor (or it may not perform at all). There are three different types of robotic programs: remote control, artificial intelligence, and hybrid. A robot with remote control programming has a preexisting set of commands that it will only perform if and when it receives a signal from a control source, typically a human being with remote control. It is perhaps more appropriate to view devices controlled primarily by human commands as falling in the discipline of automation rather than robotics. Robots that use artificial intelligence interact with their environment on their own without a control source, and can determine reactions to objects and problems they encounter using their preexisting programming. A hybrid is a form of programming that incorporates both AI and RC functions in them.\n\nApplied robotics\nAs more and more robots are designed for specific tasks, this method of classification becomes more relevant. For example, many robots are designed for assembly work, which may not be readily adaptable for other applications. They are termed \"assembly robots\". For seam welding, some suppliers provide complete welding systems with the robot i.e. the welding equipment along with other material handling facilities like turntables, etc. as an integrated unit. Such an integrated robotic system is called a \"welding robot\" even though its discrete manipulator unit could be adapted to a variety of tasks. Some robots are specifically designed for heavy load manipulation, and are labeled as \"heavy-duty robots\".Current and potential applications include:\n\nManufacturing. Robots have been increasingly used in manufacturing since the 1960s. According to the Robotic Industries Association US data, in 2016 the automotive industry was the main customer of industrial robots with 52% of total sales. In the auto industry, they can amount for more than half of the \"labor\". There are even \"lights off\" factories such as an IBM keyboard manufacturing factory in Texas that was fully automated as early as 2003.\nAutonomous transport including self-driving cars and airplane autopilot\nDomestic robots including Robotic vacuum cleaners\nConstruction robots. Construction robots can be separated into three types: traditional robots, robotic arm, and robotic exoskeleton.\nAgricultural robots. The use of robots in agriculture is closely linked to the concept of AI-assisted precision agriculture and drone usage.\nMedical robots of various types (such as da Vinci Surgical System and Hospi); and Robot-assisted surgery designed and used in clinics.\nFood processing. Commercial examples of kitchen automation are Flippy (burgers), Zume Pizza (pizza), Cafe X (coffee), Makr Shakr (cocktails), Frobot (frozen yogurts), Sally (salads), salad or food bowl robots manufactured by Dexai (a Draper Laboratory spinoff, operating on military bases), and integrated food bowl assembly systems manufactured by Spyce Kitchen (acquired by Sweetgreen) and Silicon Valley startup Hyphen. Home examples are Rotimatic (flatbreads baking) and Boris (dishwasher loading).\nAutomated mining\nSpace exploration, including Mars rovers\nCleanup of contaminated areas, such as toxic waste or nuclear facilities.\nRobotic lawn mowers and Sports field line marking.\nRobot sports for entertainment and education, including Robot combat, Autonomous racing and drone racing.\nMilitary robots.\n\nComponents\nPower source\nAt present, mostly (lead–acid) batteries are used as a power source. Many different types of batteries can be used as a power source for robots. They range from lead–acid batteries, which are safe and have relatively long shelf lives but are rather heavy compared to silver–cadmium batteries which are much smaller in volume and are currently much more expensive. Designing a battery-powered robot needs to take into account factors such as safety, cycle lifetime, and weight. Generators, often some type of internal combustion engine, can also be used. However, such designs are often mechanically complex and need fuel, require heat dissipation, and are relatively heavy. A tether connecting the robot to a power supply would remove the power supply from the robot entirely. This has the advantage of saving weight and space by moving all power generation and storage components elsewhere. However, this design does come with the drawback of constantly having a cable connected to the robot, which can be difficult to manage. \nPotential power sources could be:\n\npneumatic (compressed gases)\nSolar power (using the sun's energy and converting it into electrical power)\nhydraulics (liquids)\nflywheel energy storage\norganic garbage (through anaerobic digestion)\nnuclear\n\nActuation\nActuators are the \"muscles\" of a robot, the parts which convert stored energy into movement. By far the most popular actuators are electric motors that rotate a wheel or gear, and linear actuators that control industrial robots in factories. There are some recent advances in alternative types of actuators, powered by electricity, chemicals, or compressed air.\n\nElectric motors\nThe vast majority of robots use electric motors, often brushed and brushless DC motors in portable robots or AC motors in industrial robots and CNC machines. These motors are often preferred in systems with lighter loads, and where the predominant form of motion is rotational.\n\nLinear actuators\nVarious types of linear actuators move in and out instead of by spinning, and often have quicker direction changes, particularly when very large forces are needed such as with industrial robotics. They are typically powered by compressed and oxidized air (pneumatic actuator) or an oil (hydraulic actuator) Linear actuators can also be powered by electricity which usually consists of a motor and a leadscrew. Another common type is a mechanical linear actuator such as a rack and pinion on a car.\n\nSeries elastic actuators\nSeries elastic actuation (SEA) relies on the idea of introducing intentional elasticity between the motor actuator and the load for robust force control. Due to the resultant lower reflected inertia, series elastic actuation improves safety when a robot interacts with the environment (e.g., humans or workpieces) or during collisions. Furthermore, it also provides energy efficiency and shock absorption (mechanical filtering) while reducing excessive wear on the transmission and other mechanical components. This approach has successfully been employed in various robots, particularly advanced manufacturing robots and walking humanoid robots.The controller design of a series elastic actuator is most often performed within the passivity framework as it ensures the safety of interaction with unstructured environments. Despite its remarkable stability and robustness, this framework suffers from the stringent limitations imposed on the controller which may trade-off performance. The reader is referred to the following survey which summarizes the common controller architectures for SEA along with the corresponding sufficient passivity conditions. One recent study has derived the necessary and sufficient passivity conditions for one of the most common impedance control architectures, namely velocity-sourced SEA. This work is of particular importance as it drives the non-conservative passivity bounds in an SEA scheme for the first time which allows a larger selection of control gains.\n\nAir muscles\nPneumatic artificial muscles also known as air muscles, are special tubes that expand (typically up to 42%) when air is forced inside them. They are used in some robot applications.\n\nWire muscles\nMuscle wire, also known as shape memory alloy, Nitinol® or Flexinol® wire, is a material that contracts (under 5%) when electricity is applied. They have been used for some small robot applications.\n\nElectroactive polymers\nEAPs or EPAMs are a plastic material that can contract substantially (up to 380% activation strain) from electricity, and have been used in facial muscles and arms of humanoid robots, and to enable new robots to float, fly, swim or walk.\n\nPiezo motors\nRecent alternatives to DC motors are piezo motors or ultrasonic motors. These work on a fundamentally different principle, whereby tiny piezoceramic elements, vibrating many thousands of times per second, cause linear or rotary motion. There are different mechanisms of operation; one type uses the vibration of the piezo elements to step the motor in a circle or a straight line. Another type uses the piezo elements to cause a nut to vibrate or to drive a screw. The advantages of these motors are nanometer resolution, speed, and available force for their size. These motors are already available commercially and being used on some robots.\n\nElastic nanotubes\nElastic nanotubes are a promising artificial muscle technology in early-stage experimental development. The absence of defects in carbon nanotubes enables these filaments to deform elastically by several percent, with energy storage levels of perhaps 10 J/cm3 for metal nanotubes. Human biceps could be replaced with an 8 mm diameter wire of this material. Such compact \"muscle\" might allow future robots to outrun and outjump humans.\n\nSensing\nSensors allow robots to receive information about a certain measurement of the environment, or internal components. This is essential for robots to perform their tasks, and act upon any changes in the environment to calculate the appropriate response. They are used for various forms of measurements, to give the robots warnings about safety or malfunctions, and to provide real-time information about the task it is performing.\n\nTouch\nCurrent robotic and prosthetic hands receive far less tactile information than the human hand. Recent research has developed a tactile sensor array that mimics the mechanical properties and touch receptors of human fingertips. The sensor array is constructed as a rigid core surrounded by conductive fluid contained by an elastomeric skin. Electrodes are mounted on the surface of the rigid core and are connected to an impedance-measuring device within the core. When the artificial skin touches an object the fluid path around the electrodes is deformed, producing impedance changes that map the forces received from the object. The researchers expect that an important function of such artificial fingertips will be adjusting the robotic grip on held objects.\nScientists from several European countries and Israel developed a prosthetic hand in 2009, called SmartHand, which functions like a real one —allowing patients to write with it, type on a keyboard, play piano, and perform other fine movements. The prosthesis has sensors which enable the patient to sense real feelings in its fingertips.\n\nOther\nOther common forms of sensing in robotics use lidar, radar, and sonar. Lidar measures the distance to a target by illuminating the target with laser light and measuring the reflected light with a sensor. Radar uses radio waves to determine the range, angle, or velocity of objects. Sonar uses sound propagation to navigate, communicate with or detect objects on or under the surface of the water.\n\nManipulation\nA definition of robotic manipulation has been provided by Matt Mason as: \"manipulation refers to an agent's control of its environment through selective contact\".Robots need to manipulate objects; pick up, modify, destroy, move or otherwise have an effect. Thus the functional end of a robot arm intended to make the effect (whether a hand, or tool) are often referred to as end effectors, while the \"arm\" is referred to as a manipulator. Most robot arms have replaceable end-effectors, each allowing them to perform some small range of tasks. Some have a fixed manipulator that cannot be replaced, while a few have one very general-purpose manipulator, for example, a humanoid hand.\n\nMechanical grippers\nOne of the most common types of end-effectors are \"grippers\". In its simplest manifestation, it consists of just two fingers that can open and close to pick up and let go of a range of small objects. Fingers can, for example, be made of a chain with a metal wire running through it. Hands that resemble and work more like a human hand include the Shadow Hand and the Robonaut hand. Hands that are of a mid-level complexity include the Delft hand. Mechanical grippers can come in various types, including friction and encompassing jaws. Friction jaws use all the force of the gripper to hold the object in place using friction. Encompassing jaws cradle the object in place, using less friction.\n\nSuction end-effectors\nSuction end-effectors, powered by vacuum generators, are very simple astrictive devices that can hold very large loads provided the prehension surface is smooth enough to ensure suction.\nPick and place robots for electronic components and for large objects like car windscreens, often use very simple vacuum end-effectors.\nSuction is a highly used type of end-effector in industry, in part because the natural compliance of soft suction end-effectors can enable a robot to be more robust in the presence of imperfect robotic perception. As an example: consider the case of a robot vision system that estimates the position of a water bottle but has 1 centimeter of error. While this may cause a rigid mechanical gripper to puncture the water bottle, the soft suction end-effector may just bend slightly and conform to the shape of the water bottle surface.\n\nGeneral purpose effectors\nSome advanced robots are beginning to use fully humanoid hands, like the Shadow Hand, MANUS, and the Schunk hand. They have powerful robot dexterity intelligence (RDI), with as many as 20 degrees of freedom and hundreds of tactile sensors.\n\nLocomotion\nRolling robots\nFor simplicity, most mobile robots have four wheels or a number of continuous tracks. Some researchers have tried to create more complex wheeled robots with only one or two wheels. These can have certain advantages such as greater efficiency and reduced parts, as well as allowing a robot to navigate in confined places that a four-wheeled robot would not be able to.\n\nTwo-wheeled balancing robots\nBalancing robots generally use a gyroscope to detect how much a robot is falling and then drive the wheels proportionally in the same direction, to counterbalance the fall at hundreds of times per second, based on the dynamics of an inverted pendulum. Many different balancing robots have been designed. While the Segway is not commonly thought of as a robot, it can be thought of as a component of a robot, when used as such Segway refer to them as RMP (Robotic Mobility Platform). An example of this use has been as NASA's Robonaut that has been mounted on a Segway.\n\nOne-wheeled balancing robots\nA one-wheeled balancing robot is an extension of a two-wheeled balancing robot so that it can move in any 2D direction using a round ball as its only wheel. Several one-wheeled balancing robots have been designed recently, such as Carnegie Mellon University's \"Ballbot\" which is the approximate height and width of a person, and Tohoku Gakuin University's \"BallIP\". Because of the long, thin shape and ability to maneuver in tight spaces, they have the potential to function better than other robots in environments with people.\n\nSpherical orb robots\nSeveral attempts have been made in robots that are completely inside a spherical ball, either by spinning a weight inside the ball, or by rotating the outer shells of the sphere. These have also been referred to as an orb bot or a ball bot.\n\nSix-wheeled robots\nUsing six wheels instead of four wheels can give better traction or grip in outdoor terrain such as on rocky dirt or grass.\n\nTracked robots\nTank tracks provide even more traction than a six-wheeled robot. Tracked wheels behave as if they were made of hundreds of wheels, therefore are very common for outdoor and military robots, where the robot must drive on very rough terrain. However, they are difficult to use indoors such as on carpets and smooth floors. Examples include NASA's Urban Robot \"Urbie\".\n\nWalking robots\nWalking is a difficult and dynamic problem to solve. Several robots have been made which can walk reliably on two legs, however, none have yet been made which are as robust as a human. There has been much study on human-inspired walking, such as AMBER lab which was established in 2008 by the Mechanical Engineering Department at Texas A&M University. Many other robots have been built that walk on more than two legs, due to these robots being significantly easier to construct. Walking robots can be used for uneven terrains, which would provide better mobility and energy efficiency than other locomotion methods. Typically, robots on two legs can walk well on flat floors and can occasionally walk up stairs. None can walk over rocky, uneven terrain. Some of the methods which have been tried are:\n\nZMP technique\nThe zero moment point (ZMP) is the algorithm used by robots such as Honda's ASIMO. The robot's onboard computer tries to keep the total inertial forces (the combination of Earth's gravity and the acceleration and deceleration of walking), exactly opposed by the floor reaction force (the force of the floor pushing back on the robot's foot). In this way, the two forces cancel out, leaving no moment (force causing the robot to rotate and fall over). However, this is not exactly how a human walks, and the difference is obvious to human observers, some of whom have pointed out that ASIMO walks as if it needs the lavatory. ASIMO's walking algorithm is not static, and some dynamic balancing is used (see below). However, it still requires a smooth surface to walk on.\n\nHopping\nSeveral robots, built in the 1980s by Marc Raibert at the MIT Leg Laboratory, successfully demonstrated very dynamic walking. Initially, a robot with only one leg, and a very small foot could stay upright simply by hopping. The movement is the same as that of a person on a pogo stick. As the robot falls to one side, it would jump slightly in that direction, in order to catch itself. Soon, the algorithm was generalised to two and four legs. A bipedal robot was demonstrated running and even performing somersaults. A quadruped was also demonstrated which could trot, run, pace, and bound. For a full list of these robots, see the MIT Leg Lab Robots page.\n\nDynamic balancing (controlled falling)\nA more advanced way for a robot to walk is by using a dynamic balancing algorithm, which is potentially more robust than the Zero Moment Point technique, as it constantly monitors the robot's motion, and places the feet in order to maintain stability. This technique was recently demonstrated by Anybots' Dexter Robot, which is so stable, it can even jump. Another example is the TU Delft Flame.\n\nPassive dynamics\nPerhaps the most promising approach uses passive dynamics where the momentum of swinging limbs is used for greater efficiency. It has been shown that totally unpowered humanoid mechanisms can walk down a gentle slope, using only gravity to propel themselves. Using this technique, a robot need only supply a small amount of motor power to walk along a flat surface or a little more to walk up a hill. This technique promises to make walking robots at least ten times more efficient than ZMP walkers, like ASIMO.\n\nOther methods of locomotion\nFlying\nA modern passenger airliner is essentially a flying robot, with two humans to manage it. The autopilot can control the plane for each stage of the journey, including takeoff, normal flight, and even landing. Other flying robots are uninhabited and are known as unmanned aerial vehicles (UAVs). They can be smaller and lighter without a human pilot on board, and fly into dangerous territory for military surveillance missions. Some can even fire on targets under command. UAVs are also being developed which can fire on targets automatically, without the need for a command from a human. Other flying robots include cruise missiles, the Entomopter, and the Epson micro helicopter robot. Robots such as the Air Penguin, Air Ray, and Air Jelly have lighter-than-air bodies, are propelled by paddles, and are guided by sonar.\n\nBiomimetic flying robots (BFRs)\nBFRs take inspiration from flying mammals, birds, or insects. BFRs can have flapping wings, which generate the lift and thrust, or they can be propeller actuated. BFRs with flapping wings have increased stroke efficiencies, increased maneuverability, and reduced energy consumption in comparison to propeller actuated BFRs. Mammal and bird inspired BFRs share similar flight characteristics and design considerations. For instance, both mammal and bird inspired BFRs minimize edge fluttering and pressure-induced wingtip curl by increasing the rigidity of the wing edge and wingtips. Mammal and insect inspired BFRs can be impact resistant, making them useful in cluttered environments.\nMammal inspired BFRs typically take inspiration from bats, but the flying squirrel has also inspired a prototype. Examples of bat inspired BFRs include Bat Bot and the DALER. Mammal inspired BFRs can be designed to be multi-modal; therefore, they're capable of both flight and terrestrial movement. To reduce the impact of landing, shock absorbers can be implemented along the wings. Alternatively, the BFR can pitch up and increase the amount of drag it experiences. By increasing the drag force, the BFR will decelerate and minimize the impact upon grounding. Different land gait patterns can also be implemented.\nBird inspired BFRs can take inspiration from raptors, gulls, and everything in-between. Bird inspired BFRs can be feathered to increase the angle of attack range over which the prototype can operate before stalling. The wings of bird inspired BFRs allow for in-plane deformation, and the in-plane wing deformation can be adjusted to maximize flight efficiency depending on the flight gait. An example of a raptor inspired BFR is the prototype by Savastano et al. The prototype has fully deformable flapping wings and is capable of carrying a payload of up to 0.8 kg while performing a parabolic climb, steep descent, and rapid recovery. The gull inspired prototype by Grant et al. accurately mimics the elbow and wrist rotation of gulls, and they find that lift generation is maximized when the elbow and wrist deformations are opposite but equal.Insect inspired BFRs typically take inspiration from beetles or dragonflies. An example of a beetle inspired BFR is the prototype by Phan and Park, and a dragonfly inspired BFR is the prototype by Hu et al. The flapping frequency of insect inspired BFRs are much higher than those of other BFRs; this is because of the aerodynamics of insect flight. Insect inspired BFRs are much smaller than those inspired by mammals or birds, so they are more suitable for dense environments.\n\nBiologically-inspired flying robots\nA class of robots that are biologically inspired, but which do not attempt to mimic biology, are creations such as the Entomopter. Funded by DARPA, NASA, the United States Air Force, and the Georgia Tech Research Institute and patented by Prof. Robert C. Michelson for covert terrestrial missions as well as flight in the lower Mars atmosphere, the Entomopter flight propulsion system uses low Reynolds number wings similar to those of the hawk moth (Manduca sexta), but flaps them in a non-traditional \"opposed x-wing fashion\" while \"blowing\" the surface to enhance lift based on the Coandă effect as well as to control vehicle attitude and direction. Waste gas from the propulsion system not only facilitates the blown wing aerodynamics, but also serves to create ultrasonic emissions like that of a Bat for obstacle avoidance. The Entomopter and other biologically-inspired robots leverage features of biological systems, but do not attempt to create mechanical analogs.\n\nSnaking\nSeveral snake robots have been successfully developed. Mimicking the way real snakes move, these robots can navigate very confined spaces, meaning they may one day be used to search for people trapped in collapsed buildings. The Japanese ACM-R5 snake robot can even navigate both on land and in water.\n\nSkating\nA small number of skating robots have been developed, one of which is a multi-mode walking and skating device. It has four legs, with unpowered wheels, which can either step or roll. Another robot, Plen, can use a miniature skateboard or roller-skates, and skate across a desktop.\n\nClimbing\nSeveral different approaches have been used to develop robots that have the ability to climb vertical surfaces. One approach mimics the movements of a human climber on a wall with protrusions; adjusting the center of mass and moving each limb in turn to gain leverage. An example of this is Capuchin, built by Ruixiang Zhang at Stanford University, California. Another approach uses the specialized toe pad method of wall-climbing geckoes, which can run on smooth surfaces such as vertical glass. Examples of this approach include Wallbot and Stickybot.China's Technology Daily reported on 15 November 2008, that Li Hiu Yeung and his research group of New Concept Aircraft (Zhuhai) Co., Ltd. had successfully developed a bionic gecko robot named \"Speedy Freelander\". According to Yeung, the gecko robot could rapidly climb up and down a variety of building walls, navigate through ground and wall fissures, and walk upside-down on the ceiling. It was also able to adapt to the surfaces of smooth glass, rough, sticky or dusty walls as well as various types of metallic materials. It could also identify and circumvent obstacles automatically. Its flexibility and speed were comparable to a natural gecko. A third approach is to mimic the motion of a snake climbing a pole.\n\nSwimming (Piscine)\nIt is calculated that when swimming some fish can achieve a propulsive efficiency greater than 90%. Furthermore, they can accelerate and maneuver far better than any man-made boat or submarine, and produce less noise and water disturbance. Therefore, many researchers studying underwater robots would like to copy this type of locomotion. Notable examples are the Essex University Computer Science Robotic Fish G9, and the Robot Tuna built by the Institute of Field Robotics, to analyze and mathematically model thunniform motion. The Aqua Penguin, designed and built by Festo of Germany, copies the streamlined shape and propulsion by front \"flippers\" of penguins. Festo have also built the Aqua Ray and Aqua Jelly, which emulate the locomotion of manta ray, and jellyfish, respectively.\n\nIn 2014, iSplash-II was developed by PhD student Richard James Clapham and Prof. Huosheng Hu at Essex University. It was the first robotic fish capable of outperforming real carangiform fish in terms of average maximum velocity (measured in body lengths/ second) and endurance, the duration that top speed is maintained. This build attained swimming speeds of 11.6BL/s (i.e. 3.7 m/s). The first build, iSplash-I (2014) was the first robotic platform to apply a full-body length carangiform swimming motion which was found to increase swimming speed by 27% over the traditional approach of a posterior confined waveform.\n\nSailing\nSailboat robots have also been developed in order to make measurements at the surface of the ocean. A typical sailboat robot is Vaimos built by IFREMER and ENSTA-Bretagne. Since the propulsion of sailboat robots uses the wind, the energy of the batteries is only used for the computer, for the communication and for the actuators (to tune the rudder and the sail). If the robot is equipped with solar panels, the robot could theoretically navigate forever. The two main competitions of sailboat robots are WRSC, which takes place every year in Europe, and Sailbot.\n\nControl\nThe mechanical structure of a robot must be controlled to perform tasks. The control of a robot involves three distinct phases – perception, processing, and action (robotic paradigms). Sensors give information about the environment or the robot itself (e.g. the position of its joints or its end effector). This information is then processed to be stored or transmitted and to calculate the appropriate signals to the actuators (motors), which move the mechanical structure to achieve the required co-ordinated motion or force actions.\nThe processing phase can range in complexity. At a reactive level, it may translate raw sensor information directly into actuator commands (e.g. firing motor power electronic gates based directly upon encoder feedback signals to achieve the required torque/velocity of the shaft). Sensor fusion and internal models may first be used to estimate parameters of interest (e.g. the position of the robot's gripper) from noisy sensor data. An immediate task (such as moving the gripper in a certain direction until an object is detected with a proximity sensor) is sometimes inferred from these estimates. Techniques from control theory are generally used to convert the higher-level tasks into individual commands that drive the actuators, most often using kinematic and dynamic models of the mechanical structure.At longer time scales or with more sophisticated tasks, the robot may need to build and reason with a \"cognitive\" model. Cognitive models try to represent the robot, the world, and how the two interact. Pattern recognition and computer vision can be used to track objects. Mapping techniques can be used to build maps of the world. Finally, motion planning and other artificial intelligence techniques may be used to figure out how to act. For example, a planner may figure out how to achieve a task without hitting obstacles, falling over, etc.\nModern commercial robotic control systems are highly complex, integrate multiple sensors and effectors, have many interacting degrees-of-freedom (DOF) and require operator interfaces, programming tools and real-time capabilities. They are oftentimes interconnected to wider communication networks and in many cases are now both IoT-enabled and mobile. Progress towards open architecture, layered, user-friendly and 'intelligent' sensor-based interconnected robots has emerged from earlier concepts related to Flexible Manufacturing Systems (FMS), and several 'open or 'hybrid' reference architectures exist which assist developers of robot control software and hardware to move beyond traditional, earlier notions of 'closed' robot control systems have been proposed. Open architecture controllers are said to be better able to meet the growing requirements of a wide range of robot users, including system developers, end users and research scientists, and are better positioned to deliver the advanced robotic concepts related to Industry 4.0. In addition to utilizing many established features of robot controllers, such as position, velocity and force control of end effectors, they also enable IoT interconnection and the implementation of more advanced sensor fusion and control techniques, including adaptive control, Fuzzy control and Artificial Neural Network (ANN)-based control. When implemented in real-time, such techniques can potentially improve the stability and performance of robots operating in unknown or uncertain environments by enabling the control systems to learn and adapt to environmental changes. There are several examples of reference architectures for robot controllers, and also examples of successful implementations of actual robot controllers developed from them. One example of a generic reference architecture and associated interconnected, open-architecture robot and controller implementation was developed by Michael Short and colleagues at the University of Sunderland in the UK in 2000 (pictured right). The robot was used in a number of research and development studies, including prototype implementation of novel advanced and intelligent control and environment mapping methods in real-time.\n\nAutomation\nControl systems may also have varying levels of autonomy.\n\nDirect interaction is used for haptic or teleoperated devices, and the human has nearly complete control over the robot's motion.\nOperator-assist modes have the operator commanding medium-to-high-level tasks, with the robot automatically figuring out how to achieve them.\nAn autonomous robot may go without human interaction for extended periods of time . Higher levels of autonomy do not necessarily require more complex cognitive capabilities. For example, robots in assembly plants are completely autonomous but operate in a fixed pattern.Another classification takes into account the interaction between human control and the machine motions.\n\nTeleoperation. A human controls each movement, each machine actuator change is specified by the operator.\nSupervisory. A human specifies general moves or position changes and the machine decides specific movements of its actuators.\nTask-level autonomy. The operator specifies only the task and the robot manages itself to complete it.\nFull autonomy. The machine will create and complete all its tasks without human interaction.\n\nVision\nComputer vision is the science and technology of machines that see. As a scientific discipline, computer vision is concerned with the theory behind artificial systems that extract information from images. The image data can take many forms, such as video sequences and views from cameras.\nIn most practical computer vision applications, the computers are pre-programmed to solve a particular task, but methods based on learning are now becoming increasingly common.\nComputer vision systems rely on image sensors that detect electromagnetic radiation which is typically in the form of either visible light or infra-red light. The sensors are designed using solid-state physics. The process by which light propagates and reflects off surfaces is explained using optics. Sophisticated image sensors even require quantum mechanics to provide a complete understanding of the image formation process. Robots can also be equipped with multiple vision sensors to be better able to compute the sense of depth in the environment. Like human eyes, robots' \"eyes\" must also be able to focus on a particular area of interest, and also adjust to variations in light intensities.\nThere is a subfield within computer vision where artificial systems are designed to mimic the processing and behavior of biological system, at different levels of complexity. Also, some of the learning-based methods developed within computer vision have a background in biology.\n\nEnvironmental interaction and navigation\nThough a significant percentage of robots in commission today are either human controlled or operate in a static environment, there is an increasing interest in robots that can operate autonomously in a dynamic environment. These robots require some combination of navigation hardware and software in order to traverse their environment. In particular, unforeseen events (e.g. people and other obstacles that are not stationary) can cause problems or collisions. Some highly advanced robots such as ASIMO and Meinü robot have particularly good robot navigation hardware and software. Also, self-controlled cars, Ernst Dickmanns' driverless car, and the entries in the DARPA Grand Challenge, are capable of sensing the environment well and subsequently making navigational decisions based on this information, including by a swarm of autonomous robots. Most of these robots employ a GPS navigation device with waypoints, along with radar, sometimes combined with other sensory data such as lidar, video cameras, and inertial guidance systems for better navigation between waypoints.\n\nHuman-robot interaction\nThe state of the art in sensory intelligence for robots will have to progress through several orders of magnitude if we want the robots working in our homes to go beyond vacuum-cleaning the floors. If robots are to work effectively in homes and other non-industrial environments, the way they are instructed to perform their jobs, and especially how they will be told to stop will be of critical importance. The people who interact with them may have little or no training in robotics, and so any interface will need to be extremely intuitive. Science fiction authors also typically assume that robots will eventually be capable of communicating with humans through speech, gestures, and facial expressions, rather than a command-line interface. Although speech would be the most natural way for the human to communicate, it is unnatural for the robot. It will probably be a long time before robots interact as naturally as the fictional C-3PO, or Data of Star Trek, Next Generation. Even though the current state of robotics cannot meet the standards of these robots from science-fiction, robotic media characters (e.g., Wall-E, R2-D2) can elicit audience sympathies that increase people's willingness to accept actual robots in the future. Acceptance of social robots is also likely to increase if people can meet a social robot under appropriate conditions. Studies have shown that interacting with a robot by looking at, touching, or even imagining interacting with the robot can reduce negative feelings that some people have about robots before interacting with them. However, if pre-existing negative sentiments are especially strong, interacting with a robot can increase those negative feelings towards robots.\n\nSpeech recognition\nInterpreting the continuous flow of sounds coming from a human, in real time, is a difficult task for a computer, mostly because of the great variability of speech. The same word, spoken by the same person may sound different depending on local acoustics, volume, the previous word, whether or not the speaker has a cold, etc.. It becomes even harder when the speaker has a different accent. Nevertheless, great strides have been made in the field since Davis, Biddulph, and Balashek designed the first \"voice input system\" which recognized \"ten digits spoken by a single user with 100% accuracy\" in 1952. Currently, the best systems can recognize continuous, natural speech, up to 160 words per minute, with an accuracy of 95%. With the help of artificial intelligence, machines nowadays can use people's voice to identify their emotions such as satisfied or angry.\n\nRobotic voice\nOther hurdles exist when allowing the robot to use voice for interacting with humans. For social reasons, synthetic voice proves suboptimal as a communication medium, making it necessary to develop the emotional component of robotic voice through various techniques. An advantage of diphonic branching is the emotion that the robot is programmed to project, can be carried on the voice tape, or phoneme, already pre-programmed onto the voice media. One of the earliest examples is a teaching robot named Leachim developed in 1974 by Michael J. Freeman. Leachim was able to convert digital memory to rudimentary verbal speech on pre-recorded computer discs. It was programmed to teach students in The Bronx, New York.\n\nGestures\nOne can imagine, in the future, explaining to a robot chef how to make a pastry, or asking directions from a robot police officer. In both of these cases, making hand gestures would aid the verbal descriptions. In the first case, the robot would be recognizing gestures made by the human, and perhaps repeating them for confirmation. In the second case, the robot police officer would gesture to indicate \"down the road, then turn right\". It is likely that gestures will make up a part of the interaction between humans and robots. A great many systems have been developed to recognize human hand gestures.\n\nFacial expression\nFacial expressions can provide rapid feedback on the progress of a dialog between two humans, and soon may be able to do the same for humans and robots. Robotic faces have been constructed by Hanson Robotics using their elastic polymer called Frubber, allowing a large number of facial expressions due to the elasticity of the rubber facial coating and embedded subsurface motors (servos). The coating and servos are built on a metal skull. A robot should know how to approach a human, judging by their facial expression and body language. Whether the person is happy, frightened, or crazy-looking affects the type of interaction expected of the robot. Likewise, robots like Kismet and the more recent addition, Nexi can produce a range of facial expressions, allowing it to have meaningful social exchanges with humans.\n\nArtificial emotions\nArtificial emotions can also be generated, composed of a sequence of facial expressions or gestures. As can be seen from the movie Final Fantasy: The Spirits Within, the programming of these artificial emotions is complex and requires a large amount of human observation. To simplify this programming in the movie, presets were created together with a special software program. This decreased the amount of time needed to make the film. These presets could possibly be transferred for use in real-life robots. An example of a robot with artificial emotions is Robin the Robot developed by an Armenian IT company Expper Technologies, which uses AI-based peer-to-peer interaction. Its main task is achieving emotional well-being, i.e. overcome stress and anxiety. Robin was trained to analyze facial expressions and use his face to display his emotions given the context. The robot has been tested by kids in US clinics, and observations show that Robin increased the appetite and cheerfulness of children after meeting and talking.\n\nPersonality\nMany of the robots of science fiction have a personality, something which may or may not be desirable in the commercial robots of the future. Nevertheless, researchers are trying to create robots which appear to have a personality: i.e. they use sounds, facial expressions, and body language to try to convey an internal state, which may be joy, sadness, or fear. One commercial example is Pleo, a toy robot dinosaur, which can exhibit several apparent emotions.\n\nProxemics\nProxemics is the study of personal space, and HRI systems may try to model and work with its concepts for human interactions.\n\nResearch robotics\nMuch of the research in robotics focuses not on specific industrial tasks, but on investigations into new types of robots, alternative ways to think about or design robots, and new ways to manufacture them. Other investigations, such as MIT's cyberflora project, are almost wholly academic.\nTo describe the level of advancement of a robot, the term \"Generation Robots\" can be used. This term is coined by Professor Hans Moravec, Principal Research Scientist at the Carnegie Mellon University Robotics Institute in describing the near future evolution of robot technology. First-generation robots, Moravec predicted in 1997, should have an intellectual capacity comparable to perhaps a lizard and should become available by 2010. Because the first generation robot would be incapable of learning, however, Moravec predicts that the second generation robot would be an improvement over the first and become available by 2020, with the intelligence maybe comparable to that of a mouse. The third generation robot should have intelligence comparable to that of a monkey. Though fourth generation robots, robots with human intelligence, professor Moravec predicts, would become possible, he does not predict this happening before around 2040 or 2050.\n\nDynamics and kinematics\nThe study of motion can be divided into kinematics and dynamics. Direct kinematics or forward kinematics refers to the calculation of end effector position, orientation, velocity, and acceleration when the corresponding joint values are known. Inverse kinematics refers to the opposite case in which required joint values are calculated for given end effector values, as done in path planning. Some special aspects of kinematics include handling of redundancy (different possibilities of performing the same movement), collision avoidance, and singularity avoidance. Once all relevant positions, velocities, and accelerations have been calculated using kinematics, methods from the field of dynamics are used to study the effect of forces upon these movements. Direct dynamics refers to the calculation of accelerations in the robot once the applied forces are known. Direct dynamics is used in computer simulations of the robot. Inverse dynamics refers to the calculation of the actuator forces necessary to create a prescribed end-effector acceleration. This information can be used to improve the control algorithms of a robot.\nIn each area mentioned above, researchers strive to develop new concepts and strategies, improve existing ones, and improve the interaction between these areas. To do this, criteria for \"optimal\" performance and ways to optimize design, structure, and control of robots must be developed and implemented.\n\nOpen source robotics\nOpen source robotics research seeks standards for defining, and methods for designing and building, robots so that they can easily be reproduced by anyone. Research includes legal and technical definitions; seeking out alternative tools and materials to reduce costs and simplify builds; and creating interfaces and standards for designs to work together. Human usability research also investigates how to best document builds through visual, text or video instructions.\n\nEvolutionary robotics\nEvolutionary robots is a methodology that uses evolutionary computation to help design robots, especially the body form, or motion and behavior controllers. In a similar way to natural evolution, a large population of robots is allowed to compete in some way, or their ability to perform a task is measured using a fitness function. Those that perform worst are removed from the population and replaced by a new set, which have new behaviors based on those of the winners. Over time the population improves, and eventually a satisfactory robot may appear. This happens without any direct programming of the robots by the researchers. Researchers use this method both to create better robots, and to explore the nature of evolution. Because the process often requires many generations of robots to be simulated, this technique may be run entirely or mostly in simulation, using a robot simulator software package, then tested on real robots once the evolved algorithms are good enough. Currently, there are about 10 million industrial robots toiling around the world, and Japan is the top country having high density of utilizing robots in its manufacturing industry.\n\nBionics and biomimetics\nBionics and biomimetics apply the physiology and methods of locomotion of animals to the design of robots. For example, the design of BionicKangaroo was based on the way kangaroos jump.\n\nSwarm robotics\nSwarm robotics is an approach to the coordination of multiple robots as a system which consist of large numbers of mostly simple physical robots. ″In a robot swarm, the collective behavior of the robots results from local interactions between the robots and between the robots and the environment in which they act.″*\n\nQuantum computing\nThere has been some research into whether robotics algorithms can be run more quickly on quantum computers than they can be run on digital computers. This area has been referred to as quantum robotics.\n\nOther research areas\nNanorobots.\nCobots (collaborative robots).\nAutonomous drones.\nHigh temperature crucibles allow robotic systems to automate sample analysis.The main venues for robotics research are the international conferences ICRA and IROS.\n\nHuman factors\nEducation and training\nRobotics engineers design robots, maintain them, develop new applications for them, and conduct research to expand the potential of robotics. Robots have become a popular educational tool in some middle and high schools, particularly in parts of the USA, as well as in numerous youth summer camps, raising interest in programming, artificial intelligence, and robotics among students.\n\nEmployment\nRobotics is an essential component in many modern manufacturing environments. As factories increase their use of robots, the number of robotics–related jobs grow and have been observed to be steadily rising. The employment of robots in industries has increased productivity and efficiency savings and is typically seen as a long-term investment for benefactors. A study found that 47 percent of US jobs are at risk to automation \"over some unspecified number of years\". These claims have been criticized on the ground that social policy, not AI, causes unemployment. In a 2016 article in The Guardian, Stephen Hawking stated \"The automation of factories has already decimated jobs in traditional manufacturing, and the rise of artificial intelligence is likely to extend this job destruction deep into the middle classes, with only the most caring, creative or supervisory roles remaining\".According to a GlobalData September 2021 report, the robotics industry was worth $45bn in 2020, and by 2030, it will have grown at a compound annual growth rate (CAGR) of 29% to $568bn, driving jobs in robotics and related industries.\n\nOccupational safety and health implications\nA discussion paper drawn up by EU-OSHA highlights how the spread of robotics presents both opportunities and challenges for occupational safety and health (OSH).The greatest OSH benefits stemming from the wider use of robotics should be substitution for people working in unhealthy or dangerous environments. In space, defense, security, or the nuclear industry, but also in logistics, maintenance, and inspection, autonomous robots are particularly useful in replacing human workers performing dirty, dull or unsafe tasks, thus avoiding workers' exposures to hazardous agents and conditions and reducing physical, ergonomic and psychosocial risks. For example, robots are already used to perform repetitive and monotonous tasks, to handle radioactive material or to work in explosive atmospheres. In the future, many other highly repetitive, risky or unpleasant tasks will be performed by robots in a variety of sectors like agriculture, construction, transport, healthcare, firefighting or cleaning services.Moreover, there are certain skills to which humans will be better suited than machines for some time to come and the question is how to achieve the best combination of human and robot skills. The advantages of robotics include heavy-duty jobs with precision and repeatability, whereas the advantages of humans include creativity, decision-making, flexibility, and adaptability. This need to combine optimal skills has resulted in collaborative robots and humans sharing a common workspace more closely and led to the development of new approaches and standards to guarantee the safety of the \"man-robot merger\". Some European countries are including robotics in their national programs and trying to promote a safe and flexible cooperation between robots and operators to achieve better productivity. For example, the German Federal Institute for Occupational Safety and Health (BAuA) organises annual workshops on the topic \"human-robot collaboration\".\nIn the future, cooperation between robots and humans will be diversified, with robots increasing their autonomy and human-robot collaboration reaching completely new forms. Current approaches and technical standards aiming to protect employees from the risk of working with collaborative robots will have to be revised.\n\nUser experience\nGreat user experience predicts the needs, experiences, behaviors, language and cognitive abilities, and other factors of each user group. It then uses these insights to produce a product or solution that is ultimately useful and usable. For robots, user experience begins with an understanding of the robot's intended task and environment, while considering any possible social impact the robot may have on human operations and interactions with it.It defines that communication as the transmission of information through signals, which are elements perceived through touch, sound, smell and sight. The author states that the signal connects the sender to the receiver and consists of three parts: the signal itself, what it refers to, and the interpreter. Body postures and gestures, facial expressions, hand and head movements are all part of nonverbal behavior and communication. Robots are no exception when it comes to human-robot interaction. Therefore, humans use their verbal and nonverbal behaviors to communicate their defining characteristics. Similarly, social robots need this coordination to perform human-like behaviors.\n\nCareers\nRobotics is an interdisciplinary field, combining primarily mechanical engineering and computer science but also drawing on electronic engineering and other subjects. The usual way to build a career in robotics is to complete an undergraduate degree in one of these established subjects, followed by a graduate (masters') degree in Robotics. Graduate degrees are typically joined by students coming from all of the contributing disciplines, and include familiarization of relevant undergraduate level subject matter from each of them, followed by specialist study in pure robotics topics which build upon them. As an interdisciplinary subject, robotics graduate programmes tend to be especially reliant on students working and learning together and sharing their knowledge and skills from their home discipline first degrees.    \nRobotics industry careers then follow the same pattern, with most roboticists working as part of interdisciplinary teams of specialists from these home disciplines followed by the robotics graduate degrees which enable them to work together. Workers typically continue to identify as members of their home disciplines who work in robotics, rather than as 'roboticists'. This structure is reinforced by the nature of some engineering professions, which grant chartered engineer status to members of home disciplines rather than to robotics as a whole.\nRobotics careers are widely predicted to grow during in the 21st century, as robots replace more manual and intellectual human work. Workers who lose their jobs to robotics may be well-placed to retrain to build and maintain these robots, using their domain-specific knowledge and skills.\n\nHistory\nIn 1948, Norbert Wiener formulated the principles of cybernetics, the basis of practical robotics.\nFully autonomous robots only appeared in the second half of the 20th century. The first digitally operated and programmable robot, the Unimate, was installed in 1961 to lift hot pieces of metal from a die casting machine and stack them. Commercial and industrial robots are widespread today and used to perform jobs more cheaply, more accurately, and more reliably than humans. They are also employed in some jobs that are too dirty, dangerous, or dull to be suitable for humans. Robots are widely used in manufacturing, assembly, packing and packaging, mining, transport, earth and space exploration, surgery, weaponry, laboratory research, safety, and the mass production of consumer and industrial goods.\n\nSee also\nNotes\nReferences\nFurther reading\nR. Andrew Russell (1990). Robot Tactile Sensing. New York: Prentice Hall. ISBN 978-0-13-781592-0.\nMcGaughey, Ewan (16 October 2019). \"Will robots automate your job away? Full employment, basic income, and economic democracy\". LawArXiv Papers. doi:10.31228/osf.io/udbj8. S2CID 243172487. SSRN 3044448.\nAutor, David H. (1 August 2015). \"Why Are There Still So Many Jobs? The History and Future of Workplace Automation\". Journal of Economic Perspectives. 29 (3): 3–30. doi:10.1257/jep.29.3.3. hdl:1721.1/109476.\nTooze, Adam (6 June 2019). \"Democracy and Its Discontents\". The New York Review of Books. Vol. 66, no. 10.\n\nExternal links\n\nRobotics at Curlie\nIEEE Robotics and Automation Society\nInvestigation of social robots – Robots that mimic human behaviors and gestures.\nWired's guide to the '50 best robots ever', a mix of robots in fiction (Hal, R2D2, K9) to real robots (Roomba, Mobot, Aibo).",
    "Explainable AI": "Explainable AI (XAI), often overlapping with Interpretable AI, or Explainable Machine Learning (XML), either refers to an AI system over which it is possible for humans to retain intellectual oversight, or to the methods to achieve this. The main focus is usually on the reasoning behind the decisions or predictions made by the AI which are made more understandable and transparent. XAI counters the \"black box\" tendency of machine learning, where even the AI's designers cannot explain why it arrived at a specific decision.XAI hopes to help users of AI-powered systems perform more effectively by improving their understanding of how those systems reason. XAI may be an implementation of the social right to explanation. Even if there is no such legal right or regulatory requirement, XAI can improve the user experience of a product or service by helping end users trust that the AI is making good decisions. XAI aims to explain what has been done, what is being done, and what will be done next, and to unveil which information these actions are based on. This makes it possible to confirm existing knowledge, challenge existing knowledge, and generate new assumptions.Machine learning (ML) algorithms used in AI can be categorized as white-box or black-box. White-box models provide results that are understandable to experts in the domain. Black-box models, on the other hand, are extremely hard to explain and can hardly be understood even by domain experts. XAI algorithms follow the three principles of transparency, interpretability, and explainability. A model is transparent “if the processes that extract model parameters from training data and generate labels from testing data can be described and motivated by the approach designer.” Interpretability describes the possibility of comprehending the ML model and presenting the underlying basis for decision-making in a way that is understandable to humans. Explainability is a concept that is recognized as important, but a consensus definition is not available. One possibility is “the collection of features of the interpretable domain that have contributed, for a given example, to producing a decision (e.g., classification or regression)”. If algorithms fulfill these principles, they provide a basis for justifying decisions, tracking them and thereby verifying them, improving the algorithms, and exploring new facts.Sometimes it is also possible to achieve a high-accuracy result with white-box ML algorithms. These algorithms have an interpretable structure that can be used to explain predictions. Concept Bottleneck Models, which use concept-level abstractions to explain model reasoning, are examples of this and can be applied in both image and text prediction tasks. This is especially important in domains like medicine, defense, finance, and law, where it is crucial to understand decisions and build trust in the algorithms. Many researchers argue that, at least for supervised machine learning, the way forward is symbolic regression, where the algorithm searches the space of mathematical expressions to find the model that best fits a given dataset.AI systems optimize behavior to satisfy a mathematically specified goal system chosen by the system designers, such as the command \"maximize the accuracy of assessing how positive film reviews are in the test dataset.\" The AI may learn useful general rules from the test set, such as \"reviews containing the word \"horrible\" are likely to be negative.\" However, it may also learn inappropriate rules, such as \"reviews containing 'Daniel Day-Lewis' are usually positive\"; such rules may be undesirable if they are likely to fail to generalize outside the training set, or if people consider the rule to be \"cheating\" or \"unfair.\" A human can audit rules in an XAI to get an idea of how likely the system is to generalize to future real-world data outside the test set.\n\nGoals\nCooperation between agents – in this case, algorithms and humans – depends on trust. If humans are to accept algorithmic prescriptions, they need to trust them. Incompleteness in formal trust criteria is a barrier to optimization. Transparency, interpretability, and explainability are intermediate goals on the road to these more comprehensive trust criteria. This is particularly relevant in medicine, especially with clinical decision support systems (CDSS), in which medical professionals should be able to understand how and why a machine-based decision was made in order to trust the decision and augment their decision-making process.AI systems sometimes learn undesirable tricks that do an optimal job of satisfying explicit pre-programmed goals on the training data but do not reflect the more nuanced implicit desires of the human system designers or the full complexity of the domain data. For example, a 2017 system tasked with image recognition learned to \"cheat\" by looking for a copyright tag that happened to be associated with horse pictures rather than learning how to tell if a horse was actually pictured. In another 2017 system, a supervised learning AI tasked with grasping items in a virtual world learned to cheat by placing its manipulator between the object and the viewer in a way such that it falsely appeared to be grasping the object.One transparency project, the DARPA XAI program, aims to produce \"glass box\" models that are explainable to a \"human-in-the-loop\" without greatly sacrificing AI performance. Human users of such a system can understand the AI's cognition (both in real-time and after the fact) and can determine whether to trust the AI. Other applications of XAI are knowledge extraction from black-box models and model comparisons. In the context of monitoring systems for ethical and socio-legal compliance, the term \"glass box\" is commonly used to refer to tools that track the inputs and outputs of the system in question, and provide value-based explanations for their behavior. These tools aim to ensure that the system operates in accordance with ethical and legal standards, and that its decision-making processes are transparent and accountable. The term \"glass box\" is often used in contrast to \"black box\" systems, which lack transparency and can be more difficult to monitor and regulate.\nThe term is also used to name a voice assistant that produces counterfactual statements as explanations.\n\nExplainability versus interpretability\nThere is a difference between the terms explainability and interpretability in the context of AI.\n\nHistory and methods\nDuring the 1970s to 1990s, symbolic reasoning systems, such as MYCIN, GUIDON, SOPHIE, and PROTOS could represent, reason about, and explain their reasoning for diagnostic, instructional, or machine-learning (explanation-based learning) purposes. MYCIN, developed in the early 1970s as a research prototype for diagnosing bacteremia infections of the bloodstream, could explain which of its hand-coded rules contributed to a diagnosis in a specific case. Research in intelligent tutoring systems resulted in developing systems such as SOPHIE that could act as an \"articulate expert\", explaining problem-solving strategy at a level the student could understand, so they would know what action to take next. For instance, SOPHIE could explain the qualitative reasoning behind its electronics troubleshooting, even though it ultimately relied on the SPICE circuit simulator. Similarly, GUIDON added tutorial rules to supplement MYCIN's domain-level rules so it could explain the strategy for medical diagnosis. Symbolic approaches to machine learning relying on explanation-based learning, such as PROTOS, made use of explicit representations of explanations expressed in a dedicated explanation language, both to explain their actions and to acquire new knowledge.In the 1980s through the early 1990s, truth maintenance systems (TMS) extended the capabilities of causal-reasoning, rule-based, and logic-based inference systems.: 360–362  A TMS explicitly tracks alternate lines of reasoning, justifications for conclusions, and lines of reasoning that lead to contradictions, allowing future reasoning to avoid these dead ends. To provide an explanation, they trace reasoning from conclusions to assumptions through rule operations or logical inferences, allowing explanations to be generated from the reasoning traces. As an example, consider a rule-based problem solver with just a few rules about Socrates that concludes he has died from poison:\n\nBy just tracing through the dependency structure the problem solver can construct the following explanation: \"Socrates died because he was mortal and drank poison, and all mortals die when they drink poison. Socrates was mortal because he was a man and all men are mortal. Socrates drank poison because he held dissident beliefs, the government was conservative, and those holding conservative dissident beliefs under conservative governments must drink poison.\": 164–165 \nBy the 1990s researchers began studying whether it is possible to meaningfully extract the non-hand-coded rules being generated by opaque trained neural networks. Researchers in clinical expert systems creating neural network-powered decision support for clinicians sought to develop dynamic explanations that allow these technologies to be more trusted and trustworthy in practice. In the 2010s public concerns about racial and other bias in the use of AI for criminal sentencing decisions and findings of creditworthiness may have led to increased demand for transparent artificial intelligence. As a result, many academics and organizations are developing tools to help detect bias in their systems.Marvin Minsky et al. raised the issue that AI can function as a form of surveillance, with the biases inherent in surveillance, suggesting HI (Humanistic Intelligence) as a way to create a more fair and balanced \"human-in-the-loop\" AI.Modern complex AI techniques, such as deep learning and genetic algorithms, are naturally opaque. To address this issue, methods have been developed to make new models more explainable and interpretable. This includes layerwise relevance propagation (LRP), a technique for determining which features in a particular input vector contribute most strongly to a neural network's output. Other techniques explain some particular prediction made by a (nonlinear) black-box model, a goal referred to as \"local interpretability\". The mere transposition of the concepts of local interpretability into a remote context (where the black-box model is executed at a third party) is currently under scrutiny.There has been work on making glass-box models which are more transparent to inspection. This includes decision trees, Bayesian networks, sparse linear models, and more. The Association for Computing Machinery Conference on Fairness, Accountability, and Transparency (ACM FAccT) was established in 2018 to study transparency and explainability in the context of socio-technical systems, many of which include artificial intelligence.Some techniques allow visualisations of the inputs to which individual software neurons respond to most strongly. Several groups found that neurons can be aggregated into circuits that perform human-comprehensible functions, some of which reliably arise across different networks trained independently.There are various techniques to extract compressed representations of the features of given inputs, which can then be analysed by standard clustering techniques. Alternatively, networks can be trained to output linguistic explanations of their behaviour, which are then directly human-interpretable. Model behaviour can also be explained with reference to training data—for example, by evaluating which training inputs influenced a given behaviour the most.The use of explainable artificial intelligence (XAI) in pain research, specifically in understanding the role of electrodermal activity for automated pain recognition: hand-crafted features and deep learning models in pain recognition, highlighting the insights that simple hand-crafted features can yield comparative performances to deep learning models and that both traditional feature engineering and deep feature learning approaches rely on simple characteristics of the input time-series data.\n\nRegulation\nAs regulators, official bodies, and general users come to depend on AI-based dynamic systems, clearer accountability will be required for automated decision-making processes to ensure trust and transparency. The first global conference exclusively dedicated to this emerging discipline was the 2017 International Joint Conference on Artificial Intelligence: Workshop on Explainable Artificial Intelligence (XAI).The European Union introduced a right to explanation in the General Data Protection Right (GDPR) to address potential problems stemming from the rising importance of algorithms. The implementation of the regulation began in 2018. However, the right to explanation in GDPR covers only the local aspect of interpretability. In the United States, insurance companies are required to be able to explain their rate and coverage decisions. In France the Loi pour une République numérique (Digital Republic Act) grants subjects the right to request and receive information pertaining to the implementation of algorithms that process data about them.\n\nLimitations\nDespite ongoing endeavors to enhance the explainability of AI models, they persist with several inherent limitations.\n\nAdversarial parties\nBy making an AI system more explainable, we also reveal more of its inner workings. For example, the explainability method of feature importance identifies features or variables that are most important in determining the model's output, while the influential samples method identifies the training samples that are most influential in determining the output, given a particular input. Adversarial parties could take advantage of this knowledge.\nFor example, competitor firms could replicate aspects of the original AI system in their own product, thus reducing competitive advantage. An explainable AI system is also susceptible to being “gamed”—influenced in a way that undermines its intended purpose. One study gives the example of a predictive policing system; in this case, those who could potentially “game” the system are the criminals subject to the system's decisions. In this study, developers of the system discussed the issue of criminal gangs looking to illegally obtain passports, and they expressed concerns that, if given an idea of what factors might trigger an alert in the passport application process, those gangs would be able to “send guinea pigs” to test those triggers, eventually finding a loophole that would allow them to “reliably get passports from under the noses of the authorities”.\n\nTechnical complexity\nA fundamental barrier to making AI systems explainable is the technical complexity of such systems. End users often lack the coding knowledge required to understand software of any kind. Current methods used to explain AI are mainly technical ones, geared toward machine learning engineers for debugging purposes, rather than toward the end users who are ultimately affected by the system, causing “a gap between explainability in practice and the goal of transparency”. Proposed solutions to address the issue of technical complexity include either promoting the coding education of the general public so technical explanations would be more accessible to end users, or providing explanations in layperson terms.The solution must avoid oversimplification. It is important to strike a balance between accuracy – how faithfully the explanation reflects the process of the AI system – and explainability – how well end users understand the process. This is a difficult balance to strike, since the complexity of machine learning makes it difficult for even ML engineers to fully understand, let alone non-experts.\n\nUnderstanding versus trust\nThe goal of explainability to end users of AI systems is to increase trust in the systems, even “address concerns about lack of ‘fairness’ and discriminatory effects”. However, even with a good understanding of an AI system, end users may not necessarily trust the system. In one study, participants were presented with combinations of white-box and black-box explanations, and static and interactive explanations of AI systems. While these explanations served to increase both their self-reported and objective understanding, it had no impact on their level of trust, which remained skeptical.This outcome was especially true for decisions that impacted the end user in a significant way, such as graduate school admissions. Participants judged algorithms to be too inflexible and unforgiving in comparison to human decision-makers; instead of rigidly adhering to a set of rules, humans are able to consider exceptional cases as well as appeals to their initial decision. For such decisions, explainability will not necessarily cause end users to accept the use of decision-making algorithms. We will need to either turn to another method to increase trust and acceptance of decision-making algorithms, or question the need to rely solely on AI for such impactful decisions in the first place.\nHowever, some emphasize that the purpose of explainability of artificial intelligence is not to merely increase users' trust in the system's decisions, but to calibrate the users' level of trust to the correct level. According to this principle, too much or too little user trust in the AI system will harm the overall performance of the human-system unit. When the trust is excessive, the users are not critical of possible mistakes of the system and when the users do not have enough trust in the system, they will not exhaust the benefits inherent in it.\n\nCriticism\nScholars have suggested that explainability in AI should be considered a goal secondary to AI effectiveness, and that encouraging the exclusive development of XAI may limit the functionality of AI more broadly. Critiques of XAI rely on developed concepts of mechanistic and empiric reasoning from evidence-based medicine to suggest that AI technologies can be clinically validated even when their function cannot be understood by their operators.Moreover, XAI systems have primarily focused on making AI systems understandable to AI practitioners rather than end users, and their results on user perceptions of these systems have been somewhat fragmented. Some researchers advocate the use of inherently interpretable machine learning models, rather than using post-hoc explanations in which a second model is created to explain the first. This is partly because post-hoc models increase the complexity in a decision pathway and partly because it is often unclear how faithfully a post-hoc explanation can mimic the computations of an entirely separate model. However, another view is that what is important is that the explanation accomplishes the given task at hand, and whether it is pre or post-hoc doesn't matter. If a post-hoc explanation method helps a doctor diagnose cancer better, it is of secondary importance whether it is a correct/incorrect explanation.\nThe goals of XAI amount to a form of lossy compression that will become less effective as AI models grow in their number of parameters. Along with other factors this leads to a theoretical limit for explainability.\n\nExplainability in related fields\nExplainability was studied also in related fields.\n\nVoting\nCailloux and Endriss present a method for explaining voting rules using the axioms that characterize them. They exemplify their method on the Borda voting rule .\nPeters, Procaccia, Psomas and Zhou present an algorithm for explaining the outcomes of the Borda rule using O(m2) explanations, and prove that this is tight in the worst case.\n\nParticipatory budgeting\nYang, Hausladen, Peters, Pournaras, Fricker and Helbing present an empirical study of explainability in participatory budgeting. They compared the Greedy and the Equal Shares rules, and three types of explanations: mechanism explanation (a general explanation of how the aggregation rule works given the voting input), individual explanation (explaining how many voters had at least one approved project, at least 10000 CHF in approved projects), and group explanation (explaining how the budget is distributed among the districts and topics). They compared the perceived trustworthyness and fairness of Greedy and Equal Shares, before and after the explanations. They found out that, for MES, Mechanism explanation yields the highest increase in perceived fairness and trustworthiness; the second-highest was Group explanation. For Greedy, Mechanims explanation increases perceived trustworthiness but not fairness, whereas Individual explanation increases both perceived fairness and trustworthiness. Group explanation decreases the perceived fairness and trustworthiness.\n\nPayoff allocation\nNizri, Azaria and Hazon present an algorithm for computing explanations for the Shapley value. Given a coalitional game, their algorithm  decomposes it to sub-games, for which it is easy to generate verbal explanations based on the axioms characterizing the Shapley value. The payoff allocation for each sub-game is perceived as fair, so the Shapley-based payoff allocation for the given game should seem fair as well. An experiment with 210 human subjects shows that, with their automatically generated explanations, subjects perceive Shapley-based payoff allocation as significantly fairer than with a general standard explanation.\n\nSee also\nAlgorithmic transparency – study on the transparency of algorithmsPages displaying wikidata descriptions as a fallback\nRight to explanation – Right to have an algorithm explained\nAccumulated local effects – Machine learning method\n\nReferences\nExternal links\n\"the World Conference on eXplainable Artificial Intelligence\".\nMazumdar, Dipankar; Neto, Mário Popolin; Paulovich, Fernando V. (2021). \"Random Forest similarity maps: A Scalable Visual Representation for Global and Local Interpretation\". Electronics. 10 (22): 2862. doi:10.3390/electronics10222862.\n\"AI Explainability 360\".\n\"Explainable AI Is The Next Big Thing In Accounting And Finance\". Forbes.\n\"FAT* Conference on Fairness, Accountability, and Transparency\".\n\"FATML Workshop on Fairness, Accountability, and Transparency in Machine Learning\".\n\"'Explainable Artificial Intelligence': Cracking open the black box of AI\". Computerworld. 2017-11-02. Archived from the original on 2020-10-22. Retrieved 2017-11-02.\nPark, Dong Huk; Hendricks, Lisa Anne; Akata, Zeynep; Schiele, Bernt; Darrell, Trevor; Rohrbach, Marcus (2016-12-14). \"Attentive Explanations: Justifying Decisions and Pointing to the Evidence\". arXiv:1612.04757 [cs.CV].\n\"Explainable AI: Making machines understandable for humans\". Explainable AI: Making machines understandable for humans. Retrieved 2017-11-02.\n\"End-to-End Deep Learning for Self-Driving Cars\". Parallel Forall. 2016-08-17. Retrieved 2017-11-02.\n\"Explaining How End-to-End Deep Learning Steers a Self-Driving Car\". Parallel Forall. 2017-05-23. Retrieved 2017-11-02.\nKnight, Will (2017-03-14). \"DARPA is funding projects that will try to open up AI's black boxes\". MIT Technology Review. Retrieved 2017-11-02.\nAlvarez-Melis, David; Jaakkola, Tommi S. (2017-07-06). \"A causal framework for explaining the predictions of black-box sequence-to-sequence models\". arXiv:1707.01943 [cs.LG].\n\"Similarity Cracks the Code Of Explainable AI\". simMachines. 2017-10-12. Retrieved 2018-02-02.\nBojarski, Mariusz; Yeres, Philip; Choromanska, Anna; Choromanski, Krzysztof; Firner, Bernhard; Jackel, Lawrence; Muller, Urs (2017-04-25). \"Explaining How a Deep Neural Network Trained with End-to-End Learning Steers a Car\". arXiv:1704.07911 [cs.CV].\n\"What are the methods to interpret the output of machine learning methods?\". IntelligenceReborn. 2020-12-30. Retrieved 2020-12-30.",
    "Data Mining": "Data mining is the process of extracting and discovering patterns in large data sets involving methods at the intersection of machine learning, statistics, and database systems. Data mining is an interdisciplinary subfield of computer science and statistics with an overall goal of extracting information (with intelligent methods) from a data set and transforming the information into a comprehensible structure for further use. Data mining is the analysis step of the \"knowledge discovery in databases\" process, or KDD. Aside from the raw analysis step, it also involves database and data management aspects, data pre-processing, model and inference considerations, interestingness metrics, complexity considerations, post-processing of discovered structures, visualization, and online updating.The term \"data mining\" is a misnomer because the goal is the extraction of patterns and knowledge from large amounts of data, not the extraction (mining) of data itself. It also is a buzzword and is frequently applied to any form of large-scale data or information processing (collection, extraction, warehousing, analysis, and statistics) as well as any application of computer decision support system, including artificial intelligence (e.g., machine learning) and business intelligence. Often the more general terms (large scale) data analysis and analytics—or, when referring to actual methods, artificial intelligence and machine learning—are more appropriate.\nThe actual data mining task is the semi-automatic or automatic analysis of large quantities of data to extract previously unknown, interesting patterns such as groups of data records (cluster analysis), unusual records (anomaly detection), and dependencies (association rule mining, sequential pattern mining). This usually involves using database techniques such as spatial indices. These patterns can then be seen as a kind of summary of the input data, and may be used in further analysis or, for example, in machine learning and predictive analytics. For example, the data mining step might identify multiple groups in the data, which can then be used to obtain more accurate prediction results by a decision support system. Neither the data collection, data preparation, nor result interpretation and reporting is part of the data mining step, although they do belong to the overall KDD process as additional steps.\nThe difference between data analysis and data mining is that data analysis is used to test models and hypotheses on the dataset, e.g., analyzing the effectiveness of a marketing campaign, regardless of the amount of data. In contrast, data mining uses machine learning and statistical models to uncover clandestine or hidden patterns in a large volume of data.The related terms data dredging, data fishing, and data snooping refer to the use of data mining methods to sample parts of a larger population data set that are (or may be) too small for reliable statistical inferences to be made about the validity of any patterns discovered. These methods can, however, be used in creating new hypotheses to test against the larger data populations.\n\nEtymology\nIn the 1960s, statisticians and economists used terms like data fishing or data dredging to refer to what they considered the bad practice of analyzing data without an a-priori hypothesis. The term \"data mining\" was used in a similarly critical way by economist Michael Lovell in an article published in the Review of Economic Studies in 1983. Lovell indicates that the practice \"masquerades under a variety of aliases, ranging from \"experimentation\" (positive) to \"fishing\" or \"snooping\" (negative).\nThe term data mining appeared around 1990 in the database community, with generally positive connotations. For a short time in 1980s, the phrase \"database mining\"™, was used, but since it was trademarked by HNC, a San Diego-based company, to pitch their Database Mining Workstation; researchers consequently turned to data mining. Other terms used include data archaeology, information harvesting, information discovery, knowledge extraction, etc. Gregory Piatetsky-Shapiro coined the term \"knowledge discovery in databases\" for the first workshop on the same topic (KDD-1989) and this term became more popular in the AI and machine learning communities. However, the term data mining became more popular in the business and press communities. Currently, the terms data mining and knowledge discovery are used interchangeably.\n\nBackground\nThe manual extraction of patterns from data has occurred for centuries. Early methods of identifying patterns in data include Bayes' theorem (1700s) and regression analysis (1800s). The proliferation, ubiquity and increasing power of computer technology have dramatically increased data collection, storage, and manipulation ability. As data sets have grown in size and complexity, direct \"hands-on\" data analysis has increasingly been augmented with indirect, automated data processing, aided by other discoveries in computer science, specially in the field of machine learning, such as neural networks, cluster analysis, genetic algorithms (1950s), decision trees and decision rules (1960s), and support vector machines (1990s). Data mining is the process of applying these methods with the intention of uncovering hidden patterns. in large data sets. It bridges the gap from applied statistics and artificial intelligence (which usually provide the mathematical background) to database management by exploiting the way data is stored and indexed in databases to execute the actual learning and discovery algorithms more efficiently, allowing such methods to be applied to ever-larger data sets.\n\nProcess\nThe knowledge discovery in databases (KDD) process is commonly defined with the stages:\n\nSelection\nPre-processing\nTransformation\nData mining\nInterpretation/evaluation.It exists, however, in many variations on this theme, such as the Cross-industry standard process for data mining (CRISP-DM) which defines six phases:\n\nBusiness understanding\nData understanding\nData preparation\nModeling\nEvaluation\nDeploymentor a simplified process such as (1) Pre-processing, (2) Data Mining, and (3) Results Validation.\nPolls conducted in 2002, 2004, 2007 and 2014 show that the CRISP-DM methodology is the leading methodology used by data miners.The only other data mining standard named in these polls was SEMMA. However, 3–4 times as many people reported using CRISP-DM. Several teams of researchers have published reviews of data mining process models, and Azevedo and Santos conducted a comparison of CRISP-DM and SEMMA in 2008.\n\nPre-processing\nBefore data mining algorithms can be used, a target data set must be assembled. As data mining can only uncover patterns actually present in the data, the target data set must be large enough to contain these patterns while remaining concise enough to be mined within an acceptable time limit. A common source for data is a data mart or data warehouse. Pre-processing is essential to analyze the multivariate data sets before data mining. The target set is then cleaned. Data cleaning removes the observations containing noise and those with missing data.\n\nData mining\nData mining involves six common classes of tasks:\nAnomaly detection (outlier/change/deviation detection) – The identification of unusual data records, that might be interesting or data errors that require further investigation due to being out of standard range.\nAssociation rule learning (dependency modeling) – Searches for relationships between variables. For example, a supermarket might gather data on customer purchasing habits. Using association rule learning, the supermarket can determine which products are frequently bought together and use this information for marketing purposes. This is sometimes referred to as market basket analysis.\nClustering – is the task of discovering groups and structures in the data that are in some way or another \"similar\", without using known structures in the data.\nClassification – is the task of generalizing known structure to apply to new data. For example, an e-mail program might attempt to classify an e-mail as \"legitimate\" or as \"spam\".\nRegression – attempts to find a function that models the data with the least error that is, for estimating the relationships among data or datasets.\nSummarization – providing a more compact representation of the data set, including visualization and report generation.\n\nResults validation\nData mining can unintentionally be misused, producing results that appear to be significant but which do not actually predict future behavior and cannot be reproduced on a new sample of data, therefore bearing little use. This is sometimes caused by investigating too many hypotheses and not performing proper statistical hypothesis testing. A simple version of this problem in machine learning is known as overfitting, but the same problem can arise at different phases of the process and thus a train/test split—when applicable at all—may not be sufficient to prevent this from happening.The final step of knowledge discovery from data is to verify that the patterns produced by the data mining algorithms occur in the wider data set. Not all patterns found by the algorithms are necessarily valid. It is common for data mining algorithms to find patterns in the training set which are not present in the general data set. This is called overfitting. To overcome this, the evaluation uses a test set of data on which the data mining algorithm was not trained. The learned patterns are applied to this test set, and the resulting output is compared to the desired output. For example, a data mining algorithm trying to distinguish \"spam\" from \"legitimate\" e-mails would be trained on a training set of sample e-mails. Once trained, the learned patterns would be applied to the test set of e-mails on which it had not been trained. The accuracy of the patterns can then be measured from how many e-mails they correctly classify. Several statistical methods may be used to evaluate the algorithm, such as ROC curves.\nIf the learned patterns do not meet the desired standards, it is necessary to re-evaluate and change the pre-processing and data mining steps. If the learned patterns do meet the desired standards, then the final step is to interpret the learned patterns and turn them into knowledge.\n\nResearch\nThe premier professional body in the field is the Association for Computing Machinery's (ACM) Special Interest Group (SIG) on Knowledge Discovery and Data Mining (SIGKDD). Since 1989, this ACM SIG has hosted an annual international conference and published its proceedings, and since 1999 it has published a biannual academic journal titled \"SIGKDD Explorations\".Computer science conferences on data mining include:\n\nCIKM Conference – ACM Conference on Information and Knowledge Management\nEuropean Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases\nKDD Conference – ACM SIGKDD Conference on Knowledge Discovery and Data MiningData mining topics are also present in many data management/database conferences such as the ICDE Conference, SIGMOD Conference and International Conference on Very Large Data Bases.\n\nStandards\nThere have been some efforts to define standards for the data mining process, for example, the 1999 European Cross Industry Standard Process for Data Mining (CRISP-DM 1.0) and the 2004 Java Data Mining standard (JDM 1.0). Development on successors to these processes (CRISP-DM 2.0 and JDM 2.0) was active in 2006 but has stalled since. JDM 2.0 was withdrawn without reaching a final draft.\nFor exchanging the extracted models—in particular for use in predictive analytics—the key standard is the Predictive Model Markup Language (PMML), which is an XML-based language developed by the Data Mining Group (DMG) and supported as exchange format by many data mining applications. As the name suggests, it only covers prediction models, a particular data mining task of high importance to business applications. However, extensions to cover (for example) subspace clustering have been proposed independently of the DMG.\n\nNotable uses\nData mining is used wherever there is digital data available. Notable examples of data mining can be found throughout business, medicine, science, finance, construction, and surveillance.\n\nPrivacy concerns and ethics\nWhile the term \"data mining\" itself may have no ethical implications, it is often associated with the mining of information in relation to user behavior (ethical and otherwise).The ways in which data mining can be used can in some cases and contexts raise questions regarding privacy, legality, and ethics. In particular, data mining government or commercial data sets for national security or law enforcement purposes, such as in the Total Information Awareness Program or in ADVISE, has raised privacy concerns.Data mining requires data preparation which uncovers information or patterns which compromise confidentiality and privacy obligations. A common way for this to occur is through data aggregation. Data aggregation involves combining data together (possibly from various sources) in a way that facilitates analysis (but that also might make identification of private, individual-level data deducible or otherwise apparent). This is not data mining per se, but a result of the preparation of data before—and for the purposes of—the analysis. The threat to an individual's privacy comes into play when the data, once compiled, cause the data miner, or anyone who has access to the newly compiled data set, to be able to identify specific individuals, especially when the data were originally anonymous.It is recommended to be aware of the following before data are collected:\nThe purpose of the data collection and any (known) data mining projects.\nHow the data will be used.\nWho will be able to mine the data and use the data and their derivatives.\nThe status of security surrounding access to the data.\nHow collected data can be updated.Data may also be modified so as to become anonymous, so that individuals may not readily be identified. However, even \"anonymized\" data sets can potentially contain enough information to allow identification of individuals, as occurred when journalists were able to find several individuals based on a set of search histories that were inadvertently released by AOL.The inadvertent revelation of personally identifiable information leading to the provider violates Fair Information Practices.   This indiscretion can cause financial,\nemotional, or bodily harm to the indicated individual.  In one instance of privacy violation, the patrons of Walgreens filed a lawsuit against the company in 2011 for selling\nprescription information to data mining companies who in turn provided the data\nto pharmaceutical companies.\n\nSituation in Europe\nEurope has rather strong privacy laws, and efforts are underway to further strengthen the rights of the consumers. However, the U.S.–E.U. Safe Harbor Principles, developed between 1998 and 2000, currently effectively expose European users to privacy exploitation by U.S. companies. As a consequence of Edward Snowden's global surveillance disclosure, there has been increased discussion to revoke this agreement, as in particular the data will be fully exposed to the National Security Agency, and attempts to reach an agreement with the United States have failed.In the United Kingdom in particular there have been cases of corporations using data mining as a way to target certain groups of customers forcing them to pay unfairly high prices. These groups tend to be people of lower socio-economic status who are not savvy to the ways they can be exploited in digital market places.\n\nSituation in the United States\nIn the United States, privacy concerns have been addressed by the US Congress via the passage of regulatory controls such as the Health Insurance Portability and Accountability Act (HIPAA). The HIPAA requires individuals to give their \"informed consent\" regarding information they provide and its intended present and future uses. According to an article in Biotech Business Week, \"'[i]n practice, HIPAA may not offer any greater protection than the longstanding regulations in the research arena,' says the AAHC. More importantly, the rule's goal of protection through informed consent is approach a level of incomprehensibility to average individuals.\" This underscores the necessity for data anonymity in data aggregation and mining practices.\nU.S. information privacy legislation such as HIPAA and the Family Educational Rights and Privacy Act (FERPA) applies only to the specific areas that each such law addresses. The use of data mining by the majority of businesses in the U.S. is not controlled by any legislation.\n\nCopyright law\nSituation in Europe\nUnder European copyright database laws, the mining of in-copyright works (such as by web mining) without the permission of the copyright owner is not legal. Where a database is pure data in Europe, it may be that there is no copyright—but database rights may exist, so data mining becomes subject to intellectual property owners' rights that are protected by the Database Directive. On the recommendation of the Hargreaves review, this led to the UK government to amend its copyright law in 2014 to allow content mining as a limitation and exception. The UK was the second country in the world to do so after Japan, which introduced an exception in 2009 for data mining. However, due to the restriction of the Information Society Directive (2001), the UK exception only allows content mining for non-commercial purposes. UK copyright law also does not allow this provision to be overridden by contractual terms and conditions.\nSince 2020 also Switzerland has been regulating data mining by allowing it in the research field under certain conditions laid down by art. 24d of the Swiss Copyright Act. This new article entered into force on 1 April 2020.The European Commission facilitated stakeholder discussion on text and data mining in 2013, under the title of Licences for Europe. The focus on the solution to this legal issue, such as licensing rather than limitations and exceptions, led to representatives of universities, researchers, libraries, civil society groups and open access publishers to leave the stakeholder dialogue in May 2013.\n\nSituation in the United States\nUS copyright law, and in particular its provision for fair use, upholds the legality of content mining in America, and other fair use countries such as Israel, Taiwan and South Korea. As content mining is transformative, that is it does not supplant the original work, it is viewed as being lawful under fair use. For example, as part of the Google Book settlement the presiding judge on the case ruled that Google's digitization project of in-copyright books was lawful, in part because of the transformative uses that the digitization project displayed—one being text and data mining.\n\nSoftware\nFree open-source data mining software and applications\nThe following applications are available under free/open-source licenses. Public access to application source code is also available.\n\nCarrot2: Text and search results clustering framework.\nChemicalize.org: A chemical structure miner and web search engine.\nELKI: A university research project with advanced cluster analysis and outlier detection methods written in the Java language.\nGATE: a natural language processing and language engineering tool.\nKNIME: The Konstanz Information Miner, a user-friendly and comprehensive data analytics framework.\nMassive Online Analysis (MOA): a real-time big data stream mining with concept drift tool in the Java programming language.\nMEPX: cross-platform tool for regression and classification problems based on a Genetic Programming variant.\nmlpack: a collection of ready-to-use machine learning algorithms written in the C++ language.\nNLTK (Natural Language Toolkit): A suite of libraries and programs for symbolic and statistical natural language processing (NLP) for the Python language.\nOpenNN: Open neural networks library.\nOrange: A component-based data mining and machine learning software suite written in the Python language.\nPSPP: Data mining and statistics software under the GNU Project similar to SPSS\nR: A programming language and software environment for statistical computing, data mining, and graphics. It is part of the GNU Project.\nscikit-learn: An open-source machine learning library for the Python programming language;\nTorch: An open-source deep learning library for the Lua programming language and scientific computing framework with wide support for machine learning algorithms.\nUIMA: The UIMA (Unstructured Information Management Architecture) is a component framework for analyzing unstructured content such as text, audio and video – originally developed by IBM.\nWeka: A suite of machine learning software applications written in the Java programming language.\n\nProprietary data-mining software and applications\nThe following applications are available under proprietary licenses.\n\nAngoss KnowledgeSTUDIO: data mining tool\nLIONsolver: an integrated software application for data mining, business intelligence, and modeling that implements the Learning and Intelligent OptimizatioN (LION) approach.\nPolyAnalyst: data and text mining software by Megaputer Intelligence.\nMicrosoft Analysis Services: data mining software provided by Microsoft.\nNetOwl: suite of multilingual text and entity analytics products that enable data mining.\nOracle Data Mining: data mining software by Oracle Corporation.\nPSeven: platform for automation of engineering simulation and analysis, multidisciplinary optimization and data mining provided by DATADVANCE.\nQlucore Omics Explorer: data mining software.\nRapidMiner: An environment for machine learning and data mining experiments.\nSAS Enterprise Miner: data mining software provided by the SAS Institute.\nSPSS Modeler: data mining software provided by IBM.\nSTATISTICA Data Miner: data mining software provided by StatSoft.\nTanagra: Visualisation-oriented data mining software, also for teaching.\nVertica: data mining software provided by Hewlett-Packard.\nGoogle Cloud Platform: automated custom ML models managed by Google.\nAmazon SageMaker: managed service provided by Amazon for creating & productionising custom ML models.\n\nSee also\nMethods\nApplication domains\nApplication examples\n\nRelated topicsFor more information about extracting information out of data (as opposed to analyzing data), see:\n\nOther resourcesInternational Journal of Data Warehousing and Mining\n\nReferences\nFurther reading\nExternal links\n\nKnowledge Discovery Software at Curlie\nData Mining Tool Vendors at Curlie"
}